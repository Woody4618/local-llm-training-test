Directory structure:
└── solana-developers-program-examples/
    ├── README.md
    ├── CONTRIBUTING.md
    ├── Cargo.toml
    ├── biome.json
    ├── package.json
    ├── pnpm-lock.yaml
    ├── basics/
    │   ├── account-data/
    │   │   ├── anchor/
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── programs/
    │   │   │   │   └── anchor-program-example/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           ├── constants.rs
    │   │   │   │           ├── lib.rs
    │   │   │   │           ├── instructions/
    │   │   │   │           │   ├── create.rs
    │   │   │   │           │   └── mod.rs
    │   │   │   │           └── state/
    │   │   │   │               ├── address_info.rs
    │   │   │   │               └── mod.rs
    │   │   │   └── tests/
    │   │   │       ├── bankrun.test.ts
    │   │   │       └── test.ts
    │   │   ├── native/
    │   │   │   ├── cicd.sh
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── program/
    │   │   │   │   ├── Cargo.toml
    │   │   │   │   └── src/
    │   │   │   │       ├── lib.rs
    │   │   │   │       ├── processor.rs
    │   │   │   │       ├── instructions/
    │   │   │   │       │   ├── create.rs
    │   │   │   │       │   └── mod.rs
    │   │   │   │       └── state/
    │   │   │   │           ├── address_info.rs
    │   │   │   │           └── mod.rs
    │   │   │   └── tests/
    │   │   │       └── test.ts
    │   │   ├── poseidon/
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── .gitignore
    │   │   │   ├── .prettierignore
    │   │   │   ├── programs/
    │   │   │   │   └── account-data/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           └── lib.rs
    │   │   │   ├── tests/
    │   │   │   │   ├── bankrun.test.ts
    │   │   │   │   └── test.ts
    │   │   │   └── ts-programs/
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       └── src/
    │   │   │           └── accountData.ts
    │   │   └── steel/
    │   │       ├── README.md
    │   │       ├── Cargo.toml
    │   │       ├── package.json
    │   │       ├── pnpm-lock.yaml
    │   │       ├── tsconfig.json
    │   │       ├── api/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       ├── consts.rs
    │   │       │       ├── instruction.rs
    │   │       │       ├── lib.rs
    │   │       │       ├── sdk.rs
    │   │       │       └── state.rs
    │   │       ├── program/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       ├── create_address_info.rs
    │   │       │       ├── error.rs
    │   │       │       └── lib.rs
    │   │       └── tests/
    │   │           └── addressInfo.test.ts
    │   ├── checking-accounts/
    │   │   ├── README.md
    │   │   ├── anchor/
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── programs/
    │   │   │   │   └── anchor-program-example/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           └── lib.rs
    │   │   │   └── tests/
    │   │   │       ├── bankrun.test.ts
    │   │   │       └── test.ts
    │   │   ├── native/
    │   │   │   ├── cicd.sh
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── program/
    │   │   │   │   ├── Cargo.toml
    │   │   │   │   └── src/
    │   │   │   │       └── lib.rs
    │   │   │   └── tests/
    │   │   │       └── test.ts
    │   │   ├── poseidon/
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── .gitignore
    │   │   │   ├── .prettierignore
    │   │   │   ├── programs/
    │   │   │   │   └── checking-accounts/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           └── lib.rs
    │   │   │   ├── tests/
    │   │   │   │   └── checking-accounts.ts
    │   │   │   └── ts-programs/
    │   │   │       ├── package.json
    │   │   │       └── src/
    │   │   │           └── checkingAccounts.ts
    │   │   └── steel/
    │   │       ├── README.md
    │   │       ├── Cargo.toml
    │   │       ├── .gitignore
    │   │       ├── api/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       ├── consts.rs
    │   │       │       ├── instruction.rs
    │   │       │       ├── lib.rs
    │   │       │       ├── sdk.rs
    │   │       │       └── state/
    │   │       │           ├── account_to_change.rs
    │   │       │           └── mod.rs
    │   │       └── program/
    │   │           ├── Cargo.toml
    │   │           ├── src/
    │   │           │   ├── check_accounts.rs
    │   │           │   └── lib.rs
    │   │           └── tests/
    │   │               └── test.rs
    │   ├── close-account/
    │   │   ├── anchor/
    │   │   │   ├── README.md
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── migrations/
    │   │   │   │   └── deploy.ts
    │   │   │   ├── programs/
    │   │   │   │   └── close-account/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           ├── lib.rs
    │   │   │   │           ├── instructions/
    │   │   │   │           │   ├── close_user.rs
    │   │   │   │           │   ├── create_user.rs
    │   │   │   │           │   └── mod.rs
    │   │   │   │           └── state/
    │   │   │   │               ├── mod.rs
    │   │   │   │               └── user_state.rs
    │   │   │   └── tests/
    │   │   │       ├── bankrun.test.ts
    │   │   │       └── close-account.ts
    │   │   ├── native/
    │   │   │   ├── cicd.sh
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── program/
    │   │   │   │   ├── Cargo.toml
    │   │   │   │   └── src/
    │   │   │   │       ├── lib.rs
    │   │   │   │       ├── processor.rs
    │   │   │   │       ├── instructions/
    │   │   │   │       │   ├── close_user.rs
    │   │   │   │       │   ├── create_user.rs
    │   │   │   │       │   └── mod.rs
    │   │   │   │       └── state/
    │   │   │   │           ├── mod.rs
    │   │   │   │           └── user.rs
    │   │   │   ├── tests/
    │   │   │   │   ├── close-account.test.ts
    │   │   │   │   └── tsconfig.test.json
    │   │   │   └── ts/
    │   │   │       ├── index.ts
    │   │   │       ├── instructions/
    │   │   │       │   ├── close.ts
    │   │   │       │   ├── create.ts
    │   │   │       │   └── index.ts
    │   │   │       └── state/
    │   │   │           └── index.ts
    │   │   ├── poseidon/
    │   │   │   ├── README.md
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── .gitignore
    │   │   │   ├── migrations/
    │   │   │   │   └── deploy.ts
    │   │   │   ├── programs/
    │   │   │   │   └── close-account/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           └── lib.rs
    │   │   │   ├── tests/
    │   │   │   │   └── close-account.ts
    │   │   │   └── ts-programs/
    │   │   │       ├── closeAccounts.ts
    │   │   │       ├── package.json
    │   │   │       └── pnpm-lock.yaml
    │   │   └── steel/
    │   │       ├── README.md
    │   │       ├── Cargo.toml
    │   │       ├── cicd.sh
    │   │       ├── package.json
    │   │       ├── pnpm-lock.yaml
    │   │       ├── .gitignore
    │   │       ├── api/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       ├── error.rs
    │   │       │       ├── instruction.rs
    │   │       │       ├── lib.rs
    │   │       │       ├── sdk.rs
    │   │       │       └── state/
    │   │       │           ├── mod.rs
    │   │       │           └── user.rs
    │   │       ├── program/
    │   │       │   ├── Cargo.toml
    │   │       │   ├── src/
    │   │       │   │   ├── close_user.rs
    │   │       │   │   ├── create_user.rs
    │   │       │   │   └── lib.rs
    │   │       │   └── tests/
    │   │       │       └── test.rs
    │   │       ├── tests/
    │   │       │   ├── close-account.test.ts
    │   │       │   └── tsconfig.test.json
    │   │       └── ts/
    │   │           ├── index.ts
    │   │           └── instructions/
    │   │               ├── close.ts
    │   │               ├── create.ts
    │   │               └── index.ts
    │   ├── counter/
    │   │   ├── README.md
    │   │   ├── anchor/
    │   │   │   ├── README.md
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── .gitignore
    │   │   │   ├── .prettierignore
    │   │   │   ├── migrations/
    │   │   │   │   └── deploy.ts
    │   │   │   ├── programs/
    │   │   │   │   └── counter_anchor/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           └── lib.rs
    │   │   │   └── tests/
    │   │   │       ├── bankrun.test.ts
    │   │   │       └── counter_anchor.ts
    │   │   ├── mpl-stack/
    │   │   │   ├── README.md
    │   │   │   ├── Cargo.toml
    │   │   │   ├── jest.config.js
    │   │   │   ├── package.json
    │   │   │   ├── .solitarc.js
    │   │   │   ├── idl/
    │   │   │   │   ├── counter_mpl_stack.json
    │   │   │   │   └── counter_solana_native.json
    │   │   │   ├── src/
    │   │   │   │   ├── lib.rs
    │   │   │   │   └── state.rs
    │   │   │   ├── tests/
    │   │   │   │   └── counter.test.ts
    │   │   │   └── ts/
    │   │   │       ├── index.ts
    │   │   │       └── generated/
    │   │   │           ├── index.ts
    │   │   │           ├── accounts/
    │   │   │           │   ├── Counter.ts
    │   │   │           │   └── index.ts
    │   │   │           └── instructions/
    │   │   │               ├── Increment.ts
    │   │   │               └── index.ts
    │   │   ├── native/
    │   │   │   ├── README.md
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── program/
    │   │   │   │   ├── Cargo.toml
    │   │   │   │   └── src/
    │   │   │   │       ├── lib.rs
    │   │   │   │       └── state.rs
    │   │   │   ├── tests/
    │   │   │   │   ├── counter.test.ts
    │   │   │   │   └── tsconfig.test.json
    │   │   │   └── ts/
    │   │   │       ├── index.ts
    │   │   │       ├── accounts/
    │   │   │       │   ├── counter.ts
    │   │   │       │   └── index.ts
    │   │   │       └── instructions/
    │   │   │           ├── createIncrementInstruction.ts
    │   │   │           └── index.ts
    │   │   ├── poseidon/
    │   │   │   └── counter-program/
    │   │   │       ├── Anchor.toml
    │   │   │       ├── Cargo.toml
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       ├── tsconfig.json
    │   │   │       ├── .gitignore
    │   │   │       ├── .prettierignore
    │   │   │       ├── migrations/
    │   │   │       │   └── deploy.ts
    │   │   │       ├── programs/
    │   │   │       │   └── counter-program/
    │   │   │       │       ├── Cargo.toml
    │   │   │       │       ├── Xargo.toml
    │   │   │       │       └── src/
    │   │   │       │           └── lib.rs
    │   │   │       ├── tests/
    │   │   │       │   ├── counter-program.test.ts
    │   │   │       │   └── tsconfig.test.json
    │   │   │       └── ts-programs/
    │   │   │           ├── package.json
    │   │   │           ├── pnpm-lock.yaml
    │   │   │           └── src/
    │   │   │               └── counter-program.ts
    │   │   ├── seahorse/
    │   │   │   ├── README.md
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── tsconfig.json
    │   │   │   ├── .gitignore
    │   │   │   ├── .prettierignore
    │   │   │   ├── migrations/
    │   │   │   │   └── deploy.ts
    │   │   │   ├── programs/
    │   │   │   │   └── counter_seahorse/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           └── lib.rs
    │   │   │   ├── programs_py/
    │   │   │   │   ├── counter_seahorse.py
    │   │   │   │   └── seahorse/
    │   │   │   │       ├── __init__.py
    │   │   │   │       └── prelude.py
    │   │   │   └── tests/
    │   │   │       └── counter_seahorse.ts
    │   │   └── steel/
    │   │       ├── README.md
    │   │       ├── Cargo.toml
    │   │       ├── package.json
    │   │       ├── pnpm-lock.yaml
    │   │       ├── tsconfig.json
    │   │       ├── .gitignore
    │   │       ├── api/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       ├── consts.rs
    │   │       │       ├── instruction.rs
    │   │       │       ├── lib.rs
    │   │       │       ├── sdk.rs
    │   │       │       └── state.rs
    │   │       ├── program/
    │   │       │   ├── Cargo.toml
    │   │       │   ├── src/
    │   │       │   │   ├── increment.rs
    │   │       │   │   ├── initialize.rs
    │   │       │   │   └── lib.rs
    │   │       │   └── tests/
    │   │       │       └── test.rs
    │   │       └── tests/
    │   │           └── main.test.ts
    │   ├── create-account/
    │   │   ├── README.md
    │   │   ├── anchor/
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── programs/
    │   │   │   │   └── create-system-account/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           └── lib.rs
    │   │   │   └── tests/
    │   │   │       ├── bankrun.test.ts
    │   │   │       └── test.ts
    │   │   ├── native/
    │   │   │   ├── cicd.sh
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── program/
    │   │   │   │   ├── Cargo.toml
    │   │   │   │   └── src/
    │   │   │   │       └── lib.rs
    │   │   │   └── tests/
    │   │   │       └── test.ts
    │   │   ├── poseidon/
    │   │   │   └── create_system_account/
    │   │   │       ├── Anchor.toml
    │   │   │       ├── Cargo.toml
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       ├── tsconfig.json
    │   │   │       ├── .gitignore
    │   │   │       ├── .prettierignore
    │   │   │       ├── migrations/
    │   │   │       │   └── deploy.ts
    │   │   │       ├── programs/
    │   │   │       │   └── create_system_account/
    │   │   │       │       ├── Cargo.toml
    │   │   │       │       ├── Xargo.toml
    │   │   │       │       └── src/
    │   │   │       │           └── lib.rs
    │   │   │       ├── tests/
    │   │   │       │   ├── bankrun.test.ts
    │   │   │       │   └── create_system_account.ts
    │   │   │       └── ts-programs/
    │   │   │           ├── package.json
    │   │   │           ├── pnpm-lock.yaml
    │   │   │           └── src/
    │   │   │               └── create_system_account.ts
    │   │   └── steel/
    │   │       ├── README.md
    │   │       ├── Cargo.toml
    │   │       ├── cicd.sh
    │   │       ├── package.json
    │   │       ├── pnpm-lock.yaml
    │   │       ├── tsconfig.json
    │   │       ├── .gitignore
    │   │       ├── api/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       ├── error.rs
    │   │       │       ├── instruction.rs
    │   │       │       ├── lib.rs
    │   │       │       ├── sdk.rs
    │   │       │       └── state.rs
    │   │       ├── program/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       ├── initialize.rs
    │   │       │       └── lib.rs
    │   │       └── tests/
    │   │           └── main.test.ts
    │   ├── cross-program-invocation/
    │   │   ├── README.md
    │   │   ├── anchor/
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── .gitignore
    │   │   │   ├── .prettierignore
    │   │   │   ├── idls/
    │   │   │   │   └── lever.json
    │   │   │   ├── migrations/
    │   │   │   │   └── deploy.ts
    │   │   │   ├── programs/
    │   │   │   │   ├── hand/
    │   │   │   │   │   ├── Cargo.toml
    │   │   │   │   │   ├── Xargo.toml
    │   │   │   │   │   └── src/
    │   │   │   │   │       └── lib.rs
    │   │   │   │   └── lever/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           └── lib.rs
    │   │   │   └── tests/
    │   │   │       ├── bankrun.test.ts
    │   │   │       └── cpi.ts
    │   │   ├── native/
    │   │   │   ├── Cargo.toml
    │   │   │   ├── cicd.sh
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── programs/
    │   │   │   │   ├── hand/
    │   │   │   │   │   ├── Cargo.toml
    │   │   │   │   │   ├── Xargo.toml
    │   │   │   │   │   └── src/
    │   │   │   │   │       └── lib.rs
    │   │   │   │   └── lever/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           └── lib.rs
    │   │   │   └── tests/
    │   │   │       └── test.ts
    │   │   └── steel/
    │   │       ├── README.md
    │   │       ├── hand/
    │   │       │   ├── README.md
    │   │       │   ├── Cargo.toml
    │   │       │   ├── .gitignore
    │   │       │   ├── api/
    │   │       │   │   ├── Cargo.toml
    │   │       │   │   └── src/
    │   │       │   │       ├── instruction.rs
    │   │       │   │       ├── lib.rs
    │   │       │   │       └── sdk.rs
    │   │       │   └── program/
    │   │       │       ├── Cargo.toml
    │   │       │       ├── src/
    │   │       │       │   ├── lib.rs
    │   │       │       │   └── pull_lever.rs
    │   │       │       └── tests/
    │   │       │           └── test.rs
    │   │       └── lever/
    │   │           ├── README.md
    │   │           ├── Cargo.toml
    │   │           ├── .gitignore
    │   │           ├── api/
    │   │           │   ├── Cargo.toml
    │   │           │   └── src/
    │   │           │       ├── consts.rs
    │   │           │       ├── error.rs
    │   │           │       ├── instruction.rs
    │   │           │       ├── lib.rs
    │   │           │       ├── sdk.rs
    │   │           │       ├── utils.rs
    │   │           │       └── state/
    │   │           │           ├── mod.rs
    │   │           │           └── power_status.rs
    │   │           └── program/
    │   │               ├── Cargo.toml
    │   │               ├── src/
    │   │               │   ├── initialize.rs
    │   │               │   ├── lib.rs
    │   │               │   └── switch_power.rs
    │   │               └── tests/
    │   │                   └── test.rs
    │   ├── favorites/
    │   │   ├── anchor/
    │   │   │   ├── README.md
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── .gitignore
    │   │   │   ├── .prettierignore
    │   │   │   ├── migrations/
    │   │   │   │   └── deploy.ts
    │   │   │   ├── programs/
    │   │   │   │   └── favorites/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           └── lib.rs
    │   │   │   └── tests/
    │   │   │       ├── favorites-bankrun.test.ts
    │   │   │       ├── favorites.test.ts
    │   │   │       └── system-errors.ts
    │   │   ├── native/
    │   │   │   ├── cicd.sh
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── program/
    │   │   │   │   ├── Cargo.toml
    │   │   │   │   └── src/
    │   │   │   │       ├── lib.rs
    │   │   │   │       ├── processor.rs
    │   │   │   │       ├── state.rs
    │   │   │   │       └── instructions/
    │   │   │   │           ├── create_pda.rs
    │   │   │   │           ├── get_pda.rs
    │   │   │   │           └── mod.rs
    │   │   │   └── tests/
    │   │   │       └── test.ts
    │   │   ├── poseidon/
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── migrations/
    │   │   │   │   └── deploy.ts
    │   │   │   ├── programs/
    │   │   │   │   └── favorites-program/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           └── lib.rs
    │   │   │   ├── tests/
    │   │   │   │   ├── favorites-bankrun.test.ts
    │   │   │   │   └── favorites.test.ts
    │   │   │   └── ts-programs/
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       └── src/
    │   │   │           └── favoritesProgram.ts
    │   │   └── steel/
    │   │       ├── README.md
    │   │       ├── Cargo.toml
    │   │       ├── .gitignore
    │   │       ├── api/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       ├── consts.rs
    │   │       │       ├── error.rs
    │   │       │       ├── instruction.rs
    │   │       │       ├── lib.rs
    │   │       │       ├── sdk.rs
    │   │       │       ├── utils.rs
    │   │       │       └── state/
    │   │       │           ├── favorites.rs
    │   │       │           └── mod.rs
    │   │       └── program/
    │   │           ├── Cargo.toml
    │   │           ├── src/
    │   │           │   ├── lib.rs
    │   │           │   ├── set_favorites.rs
    │   │           │   └── utils.rs
    │   │           └── tests/
    │   │               └── test.rs
    │   ├── hello-solana/
    │   │   ├── README.md
    │   │   ├── anchor/
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── programs/
    │   │   │   │   └── hello-solana/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           └── lib.rs
    │   │   │   └── tests/
    │   │   │       ├── bankrun.test.ts
    │   │   │       └── test.ts
    │   │   ├── native/
    │   │   │   ├── cicd.sh
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── program/
    │   │   │   │   ├── Cargo.toml
    │   │   │   │   └── src/
    │   │   │   │       └── lib.rs
    │   │   │   └── tests/
    │   │   │       └── index.test.ts
    │   │   ├── poseidon/
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── .gitignore
    │   │   │   ├── .prettierignore
    │   │   │   ├── hello-solana/
    │   │   │   │   ├── Anchor.toml
    │   │   │   │   ├── Cargo.toml
    │   │   │   │   ├── package.json
    │   │   │   │   ├── pnpm-lock.yaml
    │   │   │   │   ├── tsconfig.json
    │   │   │   │   ├── .gitignore
    │   │   │   │   ├── .prettierignore
    │   │   │   │   ├── migrations/
    │   │   │   │   │   └── deploy.ts
    │   │   │   │   ├── programs/
    │   │   │   │   │   └── hello-solana/
    │   │   │   │   │       ├── Cargo.toml
    │   │   │   │   │       ├── Xargo.toml
    │   │   │   │   │       └── src/
    │   │   │   │   │           └── lib.rs
    │   │   │   │   ├── tests/
    │   │   │   │   │   ├── bankrun.test.ts
    │   │   │   │   │   └── test.ts
    │   │   │   │   └── ts-programs/
    │   │   │   │       └── src/
    │   │   │   │           └── hello-solana.ts
    │   │   │   ├── migrations/
    │   │   │   │   └── deploy.ts
    │   │   │   ├── programs/
    │   │   │   │   └── hello-solana/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           └── lib.rs
    │   │   │   ├── tests/
    │   │   │   │   └── hello-solana.ts
    │   │   │   └── ts-programs/
    │   │   │       ├── package.json
    │   │   │       └── src/
    │   │   │           └── helloSolana.ts
    │   │   ├── seahorse/
    │   │   │   └── hello_solana/
    │   │   │       ├── README.md
    │   │   │       ├── Anchor.toml
    │   │   │       ├── Cargo.toml
    │   │   │       ├── package.json
    │   │   │       ├── tsconfig.json
    │   │   │       ├── .gitignore
    │   │   │       ├── .prettierignore
    │   │   │       ├── migrations/
    │   │   │       │   └── deploy.ts
    │   │   │       ├── programs/
    │   │   │       │   └── hello_solana/
    │   │   │       │       ├── Cargo.toml
    │   │   │       │       ├── Xargo.toml
    │   │   │       │       └── src/
    │   │   │       │           └── lib.rs
    │   │   │       ├── programs_py/
    │   │   │       │   ├── hello_solana.py
    │   │   │       │   └── seahorse/
    │   │   │       │       ├── __init__.py
    │   │   │       │       └── prelude.py
    │   │   │       └── tests/
    │   │   │           └── hello_solana.ts
    │   │   └── steel/
    │   │       ├── Cargo.toml
    │   │       ├── package.json
    │   │       ├── pnpm-lock.yaml
    │   │       ├── tsconfig.json
    │   │       ├── program/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       └── lib.rs
    │   │       └── tests/
    │   │           └── index.test.ts
    │   ├── pda-rent-payer/
    │   │   ├── README.md
    │   │   ├── anchor/
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── programs/
    │   │   │   │   └── anchor-program-example/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           ├── lib.rs
    │   │   │   │           └── instructions/
    │   │   │   │               ├── create_new_account.rs
    │   │   │   │               ├── init_rent_vault.rs
    │   │   │   │               └── mod.rs
    │   │   │   └── tests/
    │   │   │       ├── bankrun.test.ts
    │   │   │       └── test.ts
    │   │   ├── native/
    │   │   │   ├── cicd.sh
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── program/
    │   │   │   │   ├── Cargo.toml
    │   │   │   │   └── src/
    │   │   │   │       ├── lib.rs
    │   │   │   │       ├── processor.rs
    │   │   │   │       ├── instructions/
    │   │   │   │       │   ├── create_new_account.rs
    │   │   │   │       │   ├── init_rent_vault.rs
    │   │   │   │       │   └── mod.rs
    │   │   │   │       └── state/
    │   │   │   │           └── mod.rs
    │   │   │   └── tests/
    │   │   │       └── test.ts
    │   │   ├── poseidon/
    │   │   │   └── pda_rent_payer/
    │   │   │       ├── Anchor.toml
    │   │   │       ├── Cargo.toml
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       ├── tsconfig.json
    │   │   │       ├── .gitignore
    │   │   │       ├── .prettierignore
    │   │   │       ├── migrations/
    │   │   │       │   └── deploy.ts
    │   │   │       ├── programs/
    │   │   │       │   └── pda_rent_payer/
    │   │   │       │       ├── Cargo.toml
    │   │   │       │       ├── Xargo.toml
    │   │   │       │       └── src/
    │   │   │       │           └── lib.rs
    │   │   │       ├── tests/
    │   │   │       │   └── bankrun.test.ts
    │   │   │       └── ts-programs/
    │   │   │           ├── package.json
    │   │   │           ├── pnpm-lock.yaml
    │   │   │           └── src/
    │   │   │               └── pda_rent_payer.ts
    │   │   └── steel/
    │   │       ├── README.md
    │   │       ├── Cargo.toml
    │   │       ├── cicd.sh
    │   │       ├── package.json
    │   │       ├── pnpm-lock.yaml
    │   │       ├── tsconfig.json
    │   │       ├── .gitignore
    │   │       ├── api/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       ├── consts.rs
    │   │       │       ├── error.rs
    │   │       │       ├── instruction.rs
    │   │       │       ├── lib.rs
    │   │       │       ├── sdk.rs
    │   │       │       └── state/
    │   │       │           ├── accounts.rs
    │   │       │           └── mod.rs
    │   │       ├── program/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       ├── create_new_account.rs
    │   │       │       ├── init_rent_vault.rs
    │   │       │       └── lib.rs
    │   │       └── tests/
    │   │           └── main.test.ts
    │   ├── processing-instructions/
    │   │   ├── README.md
    │   │   ├── anchor/
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── programs/
    │   │   │   │   └── processing-instructions/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           └── lib.rs
    │   │   │   └── tests/
    │   │   │       ├── bankrun.test.ts
    │   │   │       └── test.ts
    │   │   ├── native/
    │   │   │   ├── cicd.sh
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── program/
    │   │   │   │   ├── Cargo.toml
    │   │   │   │   └── src/
    │   │   │   │       └── lib.rs
    │   │   │   └── tests/
    │   │   │       └── test.ts
    │   │   ├── poseidon/
    │   │   │   └── processing-instructions-program/
    │   │   │       ├── Anchor.toml
    │   │   │       ├── Cargo.toml
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       ├── tsconfig.json
    │   │   │       ├── .gitignore
    │   │   │       ├── .prettierignore
    │   │   │       ├── migrations/
    │   │   │       │   └── deploy.ts
    │   │   │       ├── programs/
    │   │   │       │   └── processing-instructions-program/
    │   │   │       │       ├── Cargo.toml
    │   │   │       │       ├── Xargo.toml
    │   │   │       │       └── src/
    │   │   │       │           └── lib.rs
    │   │   │       ├── tests/
    │   │   │       │   ├── bankrun.test.ts
    │   │   │       │   └── processing-instructions-program.ts
    │   │   │       └── ts-programs/
    │   │   │           ├── package.json
    │   │   │           ├── pnpm-lock.yaml
    │   │   │           └── src/
    │   │   │               └── processingInstructionsProgram.ts
    │   │   └── steel/
    │   │       ├── README.md
    │   │       ├── Cargo.toml
    │   │       ├── package.json
    │   │       ├── pnpm-lock.yaml
    │   │       ├── tsconfig.json
    │   │       ├── .gitignore
    │   │       ├── api/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       ├── instruction.rs
    │   │       │       ├── lib.rs
    │   │       │       └── sdk.rs
    │   │       ├── program/
    │   │       │   ├── Cargo.toml
    │   │       │   ├── src/
    │   │       │   │   ├── go_to_the_park.rs
    │   │       │   │   └── lib.rs
    │   │       │   └── tests/
    │   │       │       └── test.rs
    │   │       └── tests/
    │   │           └── main.test.ts
    │   ├── program-derived-addresses/
    │   │   ├── anchor/
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── programs/
    │   │   │   │   └── anchor-program-example/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           ├── lib.rs
    │   │   │   │           ├── instructions/
    │   │   │   │           │   ├── create.rs
    │   │   │   │           │   ├── increment.rs
    │   │   │   │           │   └── mod.rs
    │   │   │   │           └── state/
    │   │   │   │               ├── mod.rs
    │   │   │   │               └── page_visits.rs
    │   │   │   └── tests/
    │   │   │       ├── bankrun.test.ts
    │   │   │       └── test.ts
    │   │   ├── native/
    │   │   │   ├── cicd.sh
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── program/
    │   │   │   │   ├── Cargo.toml
    │   │   │   │   └── src/
    │   │   │   │       ├── lib.rs
    │   │   │   │       ├── processor.rs
    │   │   │   │       ├── instructions/
    │   │   │   │       │   ├── create.rs
    │   │   │   │       │   ├── increment.rs
    │   │   │   │       │   └── mod.rs
    │   │   │   │       └── state/
    │   │   │   │           ├── mod.rs
    │   │   │   │           └── page_visits.rs
    │   │   │   └── tests/
    │   │   │       └── test.ts
    │   │   ├── poseidon/
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── .gitignore
    │   │   │   ├── .prettierignore
    │   │   │   ├── programs/
    │   │   │   │   └── program-derived-addresses/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           └── lib.rs
    │   │   │   ├── tests/
    │   │   │   │   └── program-derived-addresses.ts
    │   │   │   └── ts-programs/
    │   │   │       ├── package.json
    │   │   │       └── src/
    │   │   │           └── programDerivedAddresses.ts
    │   │   └── steel/
    │   │       ├── README.md
    │   │       ├── Cargo.toml
    │   │       ├── package.json
    │   │       ├── pnpm-lock.yaml
    │   │       ├── tsconfig.json
    │   │       ├── .gitignore
    │   │       ├── api/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       ├── consts.rs
    │   │       │       ├── instruction.rs
    │   │       │       ├── lib.rs
    │   │       │       ├── sdk.rs
    │   │       │       └── state.rs
    │   │       ├── program/
    │   │       │   ├── Cargo.toml
    │   │       │   ├── src/
    │   │       │   │   ├── create.rs
    │   │       │   │   ├── increment.rs
    │   │       │   │   └── lib.rs
    │   │       │   └── tests/
    │   │       │       └── test.rs
    │   │       └── tests/
    │   │           └── main.test.ts
    │   ├── realloc/
    │   │   ├── anchor/
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── .gitignore
    │   │   │   ├── .prettierignore
    │   │   │   ├── migrations/
    │   │   │   │   └── deploy.ts
    │   │   │   ├── programs/
    │   │   │   │   └── anchor-realloc/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           └── lib.rs
    │   │   │   └── tests/
    │   │   │       ├── anchor-realloc.ts
    │   │   │       └── bankrun.test.ts
    │   │   ├── native/
    │   │   │   ├── cicd.sh
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── program/
    │   │   │   │   ├── Cargo.toml
    │   │   │   │   └── src/
    │   │   │   │       ├── lib.rs
    │   │   │   │       ├── processor.rs
    │   │   │   │       ├── instructions/
    │   │   │   │       │   ├── create.rs
    │   │   │   │       │   ├── mod.rs
    │   │   │   │       │   └── reallocate.rs
    │   │   │   │       └── state/
    │   │   │   │           ├── address_info.rs
    │   │   │   │           ├── enhanced_address_info.rs
    │   │   │   │           ├── mod.rs
    │   │   │   │           └── work_info.rs
    │   │   │   ├── tests/
    │   │   │   │   ├── realloc.test.ts
    │   │   │   │   └── tsconfig.test.json
    │   │   │   └── ts/
    │   │   │       ├── index.ts
    │   │   │       ├── instructions/
    │   │   │       │   ├── create.ts
    │   │   │       │   ├── index.ts
    │   │   │       │   ├── instruction.ts
    │   │   │       │   └── reallocate.ts
    │   │   │       ├── state/
    │   │   │       │   ├── address-info.ts
    │   │   │       │   ├── enhanced-address-info.ts
    │   │   │       │   ├── index.ts
    │   │   │       │   └── work-info.ts
    │   │   │       └── util/
    │   │   │           ├── index.ts
    │   │   │           └── util.ts
    │   │   ├── poseidon/
    │   │   │   └── realloc-program/
    │   │   │       ├── Anchor.toml
    │   │   │       ├── Cargo.toml
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       ├── tsconfig.json
    │   │   │       ├── .gitignore
    │   │   │       ├── .prettierignore
    │   │   │       ├── migrations/
    │   │   │       │   └── deploy.ts
    │   │   │       ├── programs/
    │   │   │       │   └── realloc-program/
    │   │   │       │       ├── Cargo.toml
    │   │   │       │       ├── Xargo.toml
    │   │   │       │       └── src/
    │   │   │       │           └── lib.rs
    │   │   │       ├── tests/
    │   │   │       │   ├── bankrun.test.ts
    │   │   │       │   └── realloc-program.ts
    │   │   │       └── ts-programs/
    │   │   │           ├── package.json
    │   │   │           ├── pnpm-lock.yaml
    │   │   │           └── src/
    │   │   │               └── reallocProgram.ts
    │   │   └── steel/
    │   │       ├── README.md
    │   │       ├── Cargo.toml
    │   │       ├── .gitignore
    │   │       ├── api/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       ├── consts.rs
    │   │       │       ├── error.rs
    │   │       │       ├── instruction.rs
    │   │       │       ├── lib.rs
    │   │       │       ├── sdk.rs
    │   │       │       ├── utils.rs
    │   │       │       └── state/
    │   │       │           ├── address_info.rs
    │   │       │           ├── enchanced_address_info.rs
    │   │       │           ├── mod.rs
    │   │       │           └── work_info.rs
    │   │       └── program/
    │   │           ├── Cargo.toml
    │   │           ├── src/
    │   │           │   ├── add.rs
    │   │           │   ├── initialize.rs
    │   │           │   └── lib.rs
    │   │           └── tests/
    │   │               └── test.rs
    │   ├── rent/
    │   │   ├── README.md
    │   │   ├── anchor/
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── programs/
    │   │   │   │   └── rent-example/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           └── lib.rs
    │   │   │   └── tests/
    │   │   │       ├── bankrun.test.ts
    │   │   │       └── test.ts
    │   │   ├── native/
    │   │   │   ├── cicd.sh
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── program/
    │   │   │   │   ├── Cargo.toml
    │   │   │   │   └── src/
    │   │   │   │       └── lib.rs
    │   │   │   └── tests/
    │   │   │       └── test.ts
    │   │   ├── poseidon/
    │   │   │   └── rent_program/
    │   │   │       ├── Anchor.toml
    │   │   │       ├── Cargo.toml
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       ├── tsconfig.json
    │   │   │       ├── .gitignore
    │   │   │       ├── .prettierignore
    │   │   │       ├── migrations/
    │   │   │       │   └── deploy.ts
    │   │   │       ├── programs/
    │   │   │       │   └── rent_program/
    │   │   │       │       ├── Cargo.toml
    │   │   │       │       ├── Xargo.toml
    │   │   │       │       └── src/
    │   │   │       │           └── lib.rs
    │   │   │       ├── tests/
    │   │   │       │   ├── bankrun.test.ts
    │   │   │       │   └── rent_program.ts
    │   │   │       └── ts-programs/
    │   │   │           ├── package.json
    │   │   │           ├── pnpm-lock.yaml
    │   │   │           └── src/
    │   │   │               └── rent_program.ts
    │   │   └── steel/
    │   │       ├── README.md
    │   │       ├── Cargo.toml
    │   │       ├── package.json
    │   │       ├── .gitignore
    │   │       ├── api/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       ├── error.rs
    │   │       │       ├── instruction.rs
    │   │       │       ├── lib.rs
    │   │       │       ├── sdk.rs
    │   │       │       └── state/
    │   │       │           ├── address.rs
    │   │       │           └── mod.rs
    │   │       └── program/
    │   │           ├── Cargo.toml
    │   │           ├── src/
    │   │           │   ├── create_account.rs
    │   │           │   └── lib.rs
    │   │           └── tests/
    │   │               └── test.rs
    │   ├── repository-layout/
    │   │   ├── README.md
    │   │   ├── anchor/
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── programs/
    │   │   │   │   └── carnival/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           ├── error.rs
    │   │   │   │           ├── lib.rs
    │   │   │   │           ├── instructions/
    │   │   │   │           │   ├── eat_food.rs
    │   │   │   │           │   ├── get_on_ride.rs
    │   │   │   │           │   ├── mod.rs
    │   │   │   │           │   └── play_game.rs
    │   │   │   │           └── state/
    │   │   │   │               ├── food.rs
    │   │   │   │               ├── game.rs
    │   │   │   │               ├── mod.rs
    │   │   │   │               └── ride.rs
    │   │   │   └── tests/
    │   │   │       ├── bankrun.test.ts
    │   │   │       └── test.ts
    │   │   └── native/
    │   │       ├── cicd.sh
    │   │       ├── package.json
    │   │       ├── pnpm-lock.yaml
    │   │       ├── tsconfig.json
    │   │       ├── program/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       ├── error.rs
    │   │       │       ├── lib.rs
    │   │       │       ├── processor.rs
    │   │       │       ├── instructions/
    │   │       │       │   ├── eat_food.rs
    │   │       │       │   ├── get_on_ride.rs
    │   │       │       │   ├── mod.rs
    │   │       │       │   └── play_game.rs
    │   │       │       └── state/
    │   │       │           ├── food.rs
    │   │       │           ├── game.rs
    │   │       │           ├── mod.rs
    │   │       │           └── ride.rs
    │   │       └── tests/
    │   │           └── test.ts
    │   └── transfer-sol/
    │       ├── README.md
    │       ├── anchor/
    │       │   ├── Anchor.toml
    │       │   ├── Cargo.toml
    │       │   ├── package.json
    │       │   ├── pnpm-lock.yaml
    │       │   ├── tsconfig.json
    │       │   ├── programs/
    │       │   │   └── transfer-sol/
    │       │   │       ├── Cargo.toml
    │       │   │       ├── Xargo.toml
    │       │   │       └── src/
    │       │   │           └── lib.rs
    │       │   └── tests/
    │       │       ├── bankrun.test.ts
    │       │       └── test.ts
    │       ├── native/
    │       │   ├── cicd.sh
    │       │   ├── package.json
    │       │   ├── pnpm-lock.yaml
    │       │   ├── tsconfig.json
    │       │   ├── program/
    │       │   │   ├── Cargo.toml
    │       │   │   └── src/
    │       │   │       ├── instruction.rs
    │       │   │       ├── lib.rs
    │       │   │       └── processor.rs
    │       │   └── tests/
    │       │       ├── instruction.ts
    │       │       └── test.ts
    │       ├── poseidon/
    │       │   ├── Anchor.toml
    │       │   ├── Cargo.toml
    │       │   ├── package.json
    │       │   ├── pnpm-lock.yaml
    │       │   ├── tsconfig.json
    │       │   ├── .gitignore
    │       │   ├── .prettierignore
    │       │   ├── programs/
    │       │   │   └── transfer-sol/
    │       │   │       ├── Cargo.toml
    │       │   │       ├── Xargo.toml
    │       │   │       └── src/
    │       │   │           └── lib.rs
    │       │   ├── tests/
    │       │   │   └── transferSol.ts
    │       │   └── ts-programs/
    │       │       ├── package.json
    │       │       └── src/
    │       │           └── transferSol.ts
    │       ├── seahorse/
    │       │   ├── README.md
    │       │   ├── Anchor.toml
    │       │   ├── Cargo.toml
    │       │   ├── package.json
    │       │   ├── tsconfig.json
    │       │   ├── .gitignore
    │       │   ├── .prettierignore
    │       │   ├── migrations/
    │       │   │   └── deploy.ts
    │       │   ├── programs/
    │       │   │   └── seahorse/
    │       │   │       ├── Cargo.toml
    │       │   │       ├── Xargo.toml
    │       │   │       └── src/
    │       │   │           ├── lib.rs
    │       │   │           └── dot/
    │       │   │               ├── mod.rs
    │       │   │               └── program.rs
    │       │   ├── programs_py/
    │       │   │   ├── seahorse.py
    │       │   │   └── seahorse/
    │       │   │       ├── __init__.py
    │       │   │       └── prelude.py
    │       │   └── tests/
    │       │       └── seahorse.ts
    │       └── steel/
    │           ├── README.md
    │           ├── Cargo.toml
    │           ├── cicd.sh
    │           ├── package.json
    │           ├── pnpm-lock.yaml
    │           ├── tsconfig.json
    │           ├── api/
    │           │   ├── Cargo.toml
    │           │   └── src/
    │           │       ├── instruction.rs
    │           │       ├── lib.rs
    │           │       └── sdk.rs
    │           ├── program/
    │           │   ├── Cargo.toml
    │           │   ├── src/
    │           │   │   ├── lib.rs
    │           │   │   ├── transfer_sol_with_cpi.rs
    │           │   │   └── transfer_sol_with_program.rs
    │           │   └── tests/
    │           │       └── test.rs
    │           └── tests/
    │               ├── instruction.ts
    │               └── test.ts
    ├── compression/
    │   ├── cnft-burn/
    │   │   └── anchor/
    │   │       ├── README.md
    │   │       ├── Anchor.toml
    │   │       ├── Cargo.toml
    │   │       ├── package.json
    │   │       ├── pnpm-lock.yaml
    │   │       ├── tsconfig.json
    │   │       ├── .gitignore
    │   │       ├── .prettierignore
    │   │       ├── migrations/
    │   │       │   └── deploy.ts
    │   │       ├── programs/
    │   │       │   └── cnft-burn/
    │   │       │       ├── Cargo.toml
    │   │       │       ├── Xargo.toml
    │   │       │       └── src/
    │   │       │           └── lib.rs
    │   │       └── tests/
    │   │           ├── cnft-burn.ts
    │   │           ├── createAndMint.ts
    │   │           ├── fetchNFTsByCollection.ts
    │   │           ├── readApi.ts
    │   │           ├── utils.ts
    │   │           ├── ReadApi/
    │   │           │   ├── WrapperConnection.ts
    │   │           │   └── types.ts
    │   │           └── utils/
    │   │               ├── compression.ts
    │   │               └── helpers.ts
    │   ├── cnft-vault/
    │   │   └── anchor/
    │   │       ├── README.md
    │   │       ├── Anchor.toml
    │   │       ├── Cargo.toml
    │   │       ├── package.json
    │   │       ├── pnpm-lock.yaml
    │   │       ├── tsconfig.json
    │   │       ├── .gitignore
    │   │       ├── programs/
    │   │       │   └── cnft-vault/
    │   │       │       ├── Cargo.toml
    │   │       │       ├── Xargo.toml
    │   │       │       └── src/
    │   │       │           └── lib.rs
    │   │       └── tests/
    │   │           ├── readAPI.ts
    │   │           ├── tests.ts
    │   │           ├── utils.ts
    │   │           └── scripts/
    │   │               ├── constants.ts
    │   │               ├── withdraw.ts
    │   │               ├── withdrawTwo.ts
    │   │               └── withdrawWithLookup.ts
    │   └── cutils/
    │       └── anchor/
    │           ├── README.md
    │           ├── Anchor.toml
    │           ├── Cargo.toml
    │           ├── package.json
    │           ├── pnpm-lock.yaml
    │           ├── tsconfig.json
    │           ├── .gitignore
    │           ├── programs/
    │           │   └── cutils/
    │           │       ├── Cargo.toml
    │           │       ├── Xargo.toml
    │           │       └── src/
    │           │           ├── lib.rs
    │           │           ├── actions/
    │           │           │   ├── mint.rs
    │           │           │   ├── mod.rs
    │           │           │   └── verify.rs
    │           │           └── state/
    │           │               ├── data.rs
    │           │               └── mod.rs
    │           └── tests/
    │               ├── setup.ts
    │               ├── tests.ts
    │               └── utils/
    │                   ├── compression.ts
    │                   ├── helpers.ts
    │                   ├── readAPI.ts
    │                   └── utils.ts
    ├── oracles/
    │   └── pyth/
    │       ├── README.md
    │       ├── anchor/
    │       │   ├── Anchor.toml
    │       │   ├── Cargo.toml
    │       │   ├── package.json
    │       │   ├── pnpm-lock.yaml
    │       │   ├── tsconfig.json
    │       │   ├── .gitignore
    │       │   ├── .prettierignore
    │       │   ├── migrations/
    │       │   │   └── deploy.ts
    │       │   ├── programs/
    │       │   │   └── pythexample/
    │       │   │       ├── Cargo.toml
    │       │   │       ├── Xargo.toml
    │       │   │       └── src/
    │       │   │           ├── error.rs
    │       │   │           ├── lib.rs
    │       │   │           └── state.rs
    │       │   └── tests/
    │       │       └── pythexample.ts
    │       └── seahorse/
    │           ├── README.md
    │           ├── Anchor.toml
    │           ├── Cargo.toml
    │           ├── package.json
    │           ├── tsconfig.json
    │           ├── .gitignore
    │           ├── .prettierignore
    │           ├── migrations/
    │           │   └── deploy.ts
    │           ├── programs/
    │           │   └── seahorse/
    │           │       ├── Cargo.toml
    │           │       ├── Xargo.toml
    │           │       └── src/
    │           │           ├── lib.rs
    │           │           └── dot/
    │           │               ├── mod.rs
    │           │               └── program.rs
    │           ├── programs_py/
    │           │   ├── seahorse.py
    │           │   └── seahorse/
    │           │       ├── __init__.py
    │           │       ├── prelude.py
    │           │       └── pyth.py
    │           └── tests/
    │               └── seahorse.ts
    ├── scripts/
    │   ├── sync-package-json.ts
    │   └── lib/
    │       ├── change-package-version.ts
    │       ├── command-check.ts
    │       ├── command-help.ts
    │       ├── command-list.ts
    │       ├── command-set.ts
    │       ├── command-update.ts
    │       ├── get-deps-count.ts
    │       ├── get-recursive-file-list.ts
    │       └── index.ts
    ├── tokens/
    │   ├── create-token/
    │   │   ├── README.md
    │   │   ├── anchor/
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── prepare.mjs
    │   │   │   ├── tsconfig.json
    │   │   │   ├── programs/
    │   │   │   │   └── create-token/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           └── lib.rs
    │   │   │   └── tests/
    │   │   │       ├── bankrun.test.ts
    │   │   │       └── test.ts
    │   │   ├── native/
    │   │   │   ├── cicd.sh
    │   │   │   ├── package.json
    │   │   │   ├── tsconfig.json
    │   │   │   ├── program/
    │   │   │   │   ├── Cargo.toml
    │   │   │   │   └── src/
    │   │   │   │       └── lib.rs
    │   │   │   └── tests/
    │   │   │       └── test.ts
    │   │   └── steel/
    │   │       ├── README.md
    │   │       ├── Cargo.toml
    │   │       ├── .gitignore
    │   │       ├── api/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       ├── consts.rs
    │   │       │       ├── error.rs
    │   │       │       ├── instruction.rs
    │   │       │       ├── lib.rs
    │   │       │       └── sdk.rs
    │   │       └── program/
    │   │           ├── Cargo.toml
    │   │           ├── src/
    │   │           │   ├── lib.rs
    │   │           │   └── token.rs
    │   │           └── tests/
    │   │               └── test.rs
    │   ├── escrow/
    │   │   ├── anchor/
    │   │   │   ├── README.md
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── register.js
    │   │   │   ├── tsconfig.json
    │   │   │   ├── .gitignore
    │   │   │   ├── .mocharc.json
    │   │   │   ├── .prettierignore
    │   │   │   ├── migrations/
    │   │   │   │   └── deploy.ts
    │   │   │   ├── programs/
    │   │   │   │   └── escrow/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           ├── constants.rs
    │   │   │   │           ├── error.rs
    │   │   │   │           ├── lib.rs
    │   │   │   │           ├── instructions/
    │   │   │   │           │   ├── make_offer.rs
    │   │   │   │           │   ├── mod.rs
    │   │   │   │           │   ├── shared.rs
    │   │   │   │           │   └── take_offer.rs
    │   │   │   │           └── state/
    │   │   │   │               ├── mod.rs
    │   │   │   │               └── offer.rs
    │   │   │   └── tests/
    │   │   │       ├── bankrun.test.ts
    │   │   │       └── escrow.test.ts
    │   │   ├── native/
    │   │   │   ├── Cargo.toml
    │   │   │   ├── cicd.sh
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── program/
    │   │   │   │   ├── Cargo.toml
    │   │   │   │   └── src/
    │   │   │   │       ├── error.rs
    │   │   │   │       ├── lib.rs
    │   │   │   │       ├── state.rs
    │   │   │   │       ├── utils.rs
    │   │   │   │       └── instructions/
    │   │   │   │           ├── make_offer.rs
    │   │   │   │           ├── mod.rs
    │   │   │   │           └── take_offer.rs
    │   │   │   └── tests/
    │   │   │       ├── account.ts
    │   │   │       ├── instruction.ts
    │   │   │       ├── test.ts
    │   │   │       └── utils.ts
    │   │   ├── poseidon/
    │   │   │   └── escrow/
    │   │   │       ├── Anchor.toml
    │   │   │       ├── Cargo.toml
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       ├── tsconfig.json
    │   │   │       ├── .gitignore
    │   │   │       ├── .prettierignore
    │   │   │       ├── migrations/
    │   │   │       │   └── deploy.ts
    │   │   │       ├── programs/
    │   │   │       │   └── escrow/
    │   │   │       │       ├── Cargo.toml
    │   │   │       │       ├── Xargo.toml
    │   │   │       │       └── src/
    │   │   │       │           └── lib.rs
    │   │   │       ├── tests/
    │   │   │       │   ├── bankrun.test.ts
    │   │   │       │   └── escrow.ts
    │   │   │       └── ts-programs/
    │   │   │           └── src/
    │   │   │               └── escrow.ts
    │   │   └── steel/
    │   │       ├── README.md
    │   │       ├── Cargo.toml
    │   │       ├── package.json
    │   │       ├── pnpm-lock.yaml
    │   │       ├── tsconfig.json
    │   │       ├── api/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       ├── consts.rs
    │   │       │       ├── instruction.rs
    │   │       │       ├── lib.rs
    │   │       │       ├── sdk.rs
    │   │       │       └── state/
    │   │       │           ├── mod.rs
    │   │       │           └── offer.rs
    │   │       ├── program/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       ├── lib.rs
    │   │       │       ├── make_offer.rs
    │   │       │       └── take_offer.rs
    │   │       └── tests/
    │   │           ├── bankrun.test.ts
    │   │           └── utils.ts
    │   ├── external-delegate-token-master/
    │   │   └── anchor/
    │   │       ├── Anchor.toml
    │   │       ├── package.json
    │   │       ├── tsconfig.json
    │   │       ├── programs/
    │   │       │   └── external-delegate-token-master/
    │   │       │       └── src/
    │   │       │           └── lib.rs
    │   │       └── tests/
    │   │           ├── external-delegate-token-master.test.ts
    │   │           └── types.js
    │   ├── nft-minter/
    │   │   ├── README.md
    │   │   ├── anchor/
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── prepare.mjs
    │   │   │   ├── tsconfig.json
    │   │   │   ├── programs/
    │   │   │   │   └── nft-minter/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           └── lib.rs
    │   │   │   └── tests/
    │   │   │       ├── bankrun.test.ts
    │   │   │       └── test.ts
    │   │   └── native/
    │   │       ├── cicd.sh
    │   │       ├── package.json
    │   │       ├── tsconfig.json
    │   │       ├── program/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       ├── lib.rs
    │   │       │       ├── processor.rs
    │   │       │       └── instructions/
    │   │       │           ├── create.rs
    │   │       │           ├── mint.rs
    │   │       │           └── mod.rs
    │   │       └── tests/
    │   │           ├── instructions.ts
    │   │           └── test.ts
    │   ├── nft-operations/
    │   │   └── anchor/
    │   │       ├── readme.MD
    │   │       ├── Anchor.toml
    │   │       ├── Cargo.lock
    │   │       ├── Cargo.toml
    │   │       ├── package.json
    │   │       ├── pnpm-lock.yaml
    │   │       ├── prepare.mjs
    │   │       ├── tsconfig.json
    │   │       ├── programs/
    │   │       │   └── mint-nft/
    │   │       │       ├── Cargo.toml
    │   │       │       ├── Xargo.toml
    │   │       │       └── src/
    │   │       │           ├── lib.rs
    │   │       │           └── contexts/
    │   │       │               ├── create_collection.rs
    │   │       │               ├── mint_nft.rs
    │   │       │               ├── mod.rs
    │   │       │               └── verify_collection.rs
    │   │       └── tests/
    │   │           ├── bankrun.test.ts
    │   │           └── mint-nft.ts
    │   ├── pda-mint-authority/
    │   │   ├── README.md
    │   │   ├── anchor/
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── prepare.mjs
    │   │   │   ├── tsconfig.json
    │   │   │   ├── programs/
    │   │   │   │   └── token-minter/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           ├── lib.rs
    │   │   │   │           └── instructions/
    │   │   │   │               ├── create.rs
    │   │   │   │               ├── mint.rs
    │   │   │   │               └── mod.rs
    │   │   │   └── tests/
    │   │   │       ├── bankrun.test.ts
    │   │   │       └── test.ts
    │   │   ├── native/
    │   │   │   ├── cicd.sh
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── program/
    │   │   │   │   ├── Cargo.toml
    │   │   │   │   └── src/
    │   │   │   │       ├── lib.rs
    │   │   │   │       ├── processor.rs
    │   │   │   │       ├── instructions/
    │   │   │   │       │   ├── create.rs
    │   │   │   │       │   ├── init.rs
    │   │   │   │       │   ├── mint.rs
    │   │   │   │       │   └── mod.rs
    │   │   │   │       └── state/
    │   │   │   │           └── mod.rs
    │   │   │   └── tests/
    │   │   │       ├── instructions.ts
    │   │   │       └── test.ts
    │   │   ├── poseidon/
    │   │   │   └── token-minter/
    │   │   │       ├── Anchor.toml
    │   │   │       ├── Cargo.toml
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       ├── tsconfig.json
    │   │   │       ├── .gitignore
    │   │   │       ├── .prettierignore
    │   │   │       ├── migrations/
    │   │   │       │   └── deploy.ts
    │   │   │       ├── programs/
    │   │   │       │   └── token-minter/
    │   │   │       │       ├── Cargo.toml
    │   │   │       │       ├── Xargo.toml
    │   │   │       │       └── src/
    │   │   │       │           └── lib.rs
    │   │   │       ├── tests/
    │   │   │       │   ├── bankrun.test.ts
    │   │   │       │   └── token-minter.ts
    │   │   │       └── ts-programs/
    │   │   │           ├── package.json
    │   │   │           ├── pnpm-lock.yaml
    │   │   │           └── src/
    │   │   │               └── token-minter.ts
    │   │   └── steel/
    │   │       ├── README.md
    │   │       ├── Cargo.toml
    │   │       ├── cicd.sh
    │   │       ├── package.json
    │   │       ├── pnpm-lock.yaml
    │   │       ├── prepare.mjs
    │   │       ├── tsconfig.json
    │   │       ├── .gitignore
    │   │       ├── api/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       ├── consts.rs
    │   │       │       ├── instruction.rs
    │   │       │       ├── lib.rs
    │   │       │       ├── sdk.rs
    │   │       │       └── state/
    │   │       │           ├── mint_authority.rs
    │   │       │           └── mod.rs
    │   │       ├── program/
    │   │       │   ├── Cargo.toml
    │   │       │   ├── build.rs
    │   │       │   ├── src/
    │   │       │   │   ├── create.rs
    │   │       │   │   ├── init.rs
    │   │       │   │   ├── lib.rs
    │   │       │   │   └── mint.rs
    │   │       │   └── tests/
    │   │       │       └── test.rs
    │   │       └── tests/
    │   │           ├── instructions.ts
    │   │           └── tests.ts
    │   ├── spl-token-minter/
    │   │   ├── README.md
    │   │   ├── anchor/
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── prepare.mjs
    │   │   │   ├── tsconfig.json
    │   │   │   ├── programs/
    │   │   │   │   └── spl-token-minter/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           ├── lib.rs
    │   │   │   │           └── instructions/
    │   │   │   │               ├── create.rs
    │   │   │   │               ├── mint.rs
    │   │   │   │               └── mod.rs
    │   │   │   └── tests/
    │   │   │       ├── bankrun.test.ts
    │   │   │       └── test.ts
    │   │   ├── native/
    │   │   │   ├── cicd.sh
    │   │   │   ├── package.json
    │   │   │   ├── tsconfig.json
    │   │   │   ├── program/
    │   │   │   │   ├── Cargo.toml
    │   │   │   │   └── src/
    │   │   │   │       ├── lib.rs
    │   │   │   │       ├── processor.rs
    │   │   │   │       └── instructions/
    │   │   │   │           ├── create.rs
    │   │   │   │           ├── mint.rs
    │   │   │   │           └── mod.rs
    │   │   │   └── tests/
    │   │   │       ├── instructions.ts
    │   │   │       └── test.ts
    │   │   ├── poseidon/
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── migrations/
    │   │   │   │   └── deploy.ts
    │   │   │   ├── programs/
    │   │   │   │   └── spl-token-minter/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           └── lib.rs
    │   │   │   ├── tests/
    │   │   │   │   └── spl-token-minter.ts
    │   │   │   └── ts-programs/
    │   │   │       ├── package.json
    │   │   │       └── src/
    │   │   │           └── splTokenMinter.ts
    │   │   └── steel/
    │   │       ├── README.md
    │   │       ├── Cargo.toml
    │   │       ├── cicd.sh
    │   │       ├── package.json
    │   │       ├── pnpm-lock.yaml
    │   │       ├── prepare.mjs
    │   │       ├── tsconfig.json
    │   │       ├── .gitignore
    │   │       ├── api/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       ├── consts.rs
    │   │       │       ├── instruction.rs
    │   │       │       ├── lib.rs
    │   │       │       ├── sdk.rs
    │   │       │       └── utils.rs
    │   │       ├── program/
    │   │       │   ├── Cargo.toml
    │   │       │   ├── src/
    │   │       │   │   ├── create.rs
    │   │       │   │   ├── lib.rs
    │   │       │   │   └── mint.rs
    │   │       │   └── tests/
    │   │       │       └── test.rs
    │   │       └── tests/
    │   │           ├── bankrun.test.ts
    │   │           └── instructions.ts
    │   ├── token-2022/
    │   │   ├── basics/
    │   │   │   └── anchor/
    │   │   │       ├── Anchor.toml
    │   │   │       ├── Cargo.toml
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       ├── tsconfig.json
    │   │   │       ├── .gitignore
    │   │   │       ├── .prettierignore
    │   │   │       ├── migrations/
    │   │   │       │   └── deploy.ts
    │   │   │       ├── programs/
    │   │   │       │   └── basics/
    │   │   │       │       ├── Cargo.toml
    │   │   │       │       ├── Xargo.toml
    │   │   │       │       └── src/
    │   │   │       │           └── lib.rs
    │   │   │       └── tests/
    │   │   │           ├── anchor.ts
    │   │   │           └── bankrun.test.ts
    │   │   ├── cpi-guard/
    │   │   │   └── anchor/
    │   │   │       ├── Anchor.toml
    │   │   │       ├── Cargo.toml
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       ├── tsconfig.json
    │   │   │       ├── .gitignore
    │   │   │       ├── .prettierignore
    │   │   │       ├── migrations/
    │   │   │       │   └── deploy.ts
    │   │   │       ├── programs/
    │   │   │       │   └── cpi-guard/
    │   │   │       │       ├── Cargo.toml
    │   │   │       │       ├── Xargo.toml
    │   │   │       │       └── src/
    │   │   │       │           └── lib.rs
    │   │   │       └── tests/
    │   │   │           └── cpi-guard.ts
    │   │   ├── default-account-state/
    │   │   │   ├── anchor/
    │   │   │   │   ├── Anchor.toml
    │   │   │   │   ├── Cargo.toml
    │   │   │   │   ├── package.json
    │   │   │   │   ├── pnpm-lock.yaml
    │   │   │   │   ├── tsconfig.json
    │   │   │   │   ├── .gitignore
    │   │   │   │   ├── .prettierignore
    │   │   │   │   ├── migrations/
    │   │   │   │   │   └── deploy.ts
    │   │   │   │   ├── programs/
    │   │   │   │   │   └── default-account-state/
    │   │   │   │   │       ├── Cargo.toml
    │   │   │   │   │       ├── Xargo.toml
    │   │   │   │   │       └── src/
    │   │   │   │   │           └── lib.rs
    │   │   │   │   └── tests/
    │   │   │   │       └── default-account-state.ts
    │   │   │   └── native/
    │   │   │       ├── README.md
    │   │   │       ├── cicd.sh
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       ├── tsconfig.json
    │   │   │       ├── program/
    │   │   │       │   ├── Cargo.toml
    │   │   │       │   └── src/
    │   │   │       │       └── lib.rs
    │   │   │       └── tests/
    │   │   │           └── test.ts
    │   │   ├── group/
    │   │   │   └── anchor/
    │   │   │       ├── Anchor.toml
    │   │   │       ├── Cargo.toml
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       ├── tsconfig.json
    │   │   │       ├── .gitignore
    │   │   │       ├── .prettierignore
    │   │   │       ├── migrations/
    │   │   │       │   └── deploy.ts
    │   │   │       ├── programs/
    │   │   │       │   └── group/
    │   │   │       │       ├── Cargo.toml
    │   │   │       │       ├── Xargo.toml
    │   │   │       │       └── src/
    │   │   │       │           └── lib.rs
    │   │   │       └── tests/
    │   │   │           └── group.ts
    │   │   ├── immutable-owner/
    │   │   │   └── anchor/
    │   │   │       ├── Anchor.toml
    │   │   │       ├── Cargo.toml
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       ├── tsconfig.json
    │   │   │       ├── .gitignore
    │   │   │       ├── .prettierignore
    │   │   │       ├── migrations/
    │   │   │       │   └── deploy.ts
    │   │   │       ├── programs/
    │   │   │       │   └── immutable-owner/
    │   │   │       │       ├── Cargo.toml
    │   │   │       │       ├── Xargo.toml
    │   │   │       │       └── src/
    │   │   │       │           └── lib.rs
    │   │   │       └── tests/
    │   │   │           └── immutable-owner.ts
    │   │   ├── interest-bearing/
    │   │   │   └── anchor/
    │   │   │       ├── Anchor.toml
    │   │   │       ├── Cargo.toml
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       ├── tsconfig.json
    │   │   │       ├── .gitignore
    │   │   │       ├── .prettierignore
    │   │   │       ├── migrations/
    │   │   │       │   └── deploy.ts
    │   │   │       ├── programs/
    │   │   │       │   └── interest-bearing/
    │   │   │       │       ├── Cargo.toml
    │   │   │       │       ├── Xargo.toml
    │   │   │       │       └── src/
    │   │   │       │           └── lib.rs
    │   │   │       └── tests/
    │   │   │           └── interest-bearing.ts
    │   │   ├── memo-transfer/
    │   │   │   └── anchor/
    │   │   │       ├── Anchor.toml
    │   │   │       ├── Cargo.toml
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       ├── tsconfig.json
    │   │   │       ├── .gitignore
    │   │   │       ├── .prettierignore
    │   │   │       ├── migrations/
    │   │   │       │   └── deploy.ts
    │   │   │       ├── programs/
    │   │   │       │   └── memo-transfer/
    │   │   │       │       ├── Cargo.toml
    │   │   │       │       ├── Xargo.toml
    │   │   │       │       └── src/
    │   │   │       │           └── lib.rs
    │   │   │       └── tests/
    │   │   │           └── memo-transfer.ts
    │   │   ├── metadata/
    │   │   │   └── anchor/
    │   │   │       ├── Anchor.toml
    │   │   │       ├── Cargo.toml
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       ├── tsconfig.json
    │   │   │       ├── .gitignore
    │   │   │       ├── .prettierignore
    │   │   │       ├── migrations/
    │   │   │       │   └── deploy.ts
    │   │   │       ├── programs/
    │   │   │       │   └── metadata/
    │   │   │       │       ├── Cargo.toml
    │   │   │       │       ├── Xargo.toml
    │   │   │       │       └── src/
    │   │   │       │           ├── lib.rs
    │   │   │       │           └── instructions/
    │   │   │       │               ├── emit.rs
    │   │   │       │               ├── initialize.rs
    │   │   │       │               ├── mod.rs
    │   │   │       │               ├── remove_key.rs
    │   │   │       │               ├── update_authority.rs
    │   │   │       │               └── update_field.rs
    │   │   │       └── tests/
    │   │   │           └── metadata.ts
    │   │   ├── mint-close-authority/
    │   │   │   ├── anchor/
    │   │   │   │   ├── Anchor.toml
    │   │   │   │   ├── Cargo.toml
    │   │   │   │   ├── package.json
    │   │   │   │   ├── pnpm-lock.yaml
    │   │   │   │   ├── tsconfig.json
    │   │   │   │   ├── .gitignore
    │   │   │   │   ├── .prettierignore
    │   │   │   │   ├── migrations/
    │   │   │   │   │   └── deploy.ts
    │   │   │   │   ├── programs/
    │   │   │   │   │   └── mint-close-authority/
    │   │   │   │   │       ├── Cargo.toml
    │   │   │   │   │       ├── Xargo.toml
    │   │   │   │   │       └── src/
    │   │   │   │   │           └── lib.rs
    │   │   │   │   └── tests/
    │   │   │   │       └── mint-close-authority.ts
    │   │   │   └── native/
    │   │   │       ├── cicd.sh
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       ├── tsconfig.json
    │   │   │       ├── program/
    │   │   │       │   ├── Cargo.toml
    │   │   │       │   └── src/
    │   │   │       │       └── lib.rs
    │   │   │       └── tests/
    │   │   │           └── test.ts
    │   │   ├── multiple-extensions/
    │   │   │   └── native/
    │   │   │       ├── cicd.sh
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       ├── tsconfig.json
    │   │   │       ├── program/
    │   │   │       │   ├── Cargo.toml
    │   │   │       │   └── src/
    │   │   │       │       └── lib.rs
    │   │   │       └── tests/
    │   │   │           └── test.ts
    │   │   ├── nft-meta-data-pointer/
    │   │   │   └── anchor-example/
    │   │   │       ├── README.md
    │   │   │       ├── nx.json
    │   │   │       ├── package.json
    │   │   │       ├── anchor/
    │   │   │       │   ├── README.md
    │   │   │       │   ├── Anchor.toml
    │   │   │       │   ├── Cargo.toml
    │   │   │       │   ├── package.json
    │   │   │       │   ├── pnpm-lock.yaml
    │   │   │       │   ├── rustfmt.toml
    │   │   │       │   ├── tsconfig.json
    │   │   │       │   ├── .gitignore
    │   │   │       │   ├── .prettierignore
    │   │   │       │   ├── migrations/
    │   │   │       │   │   └── deploy.ts
    │   │   │       │   ├── programs/
    │   │   │       │   │   └── extension_nft/
    │   │   │       │   │       ├── Cargo.toml
    │   │   │       │   │       ├── Xargo.toml
    │   │   │       │   │       └── src/
    │   │   │       │   │           ├── constants.rs
    │   │   │       │   │           ├── errors.rs
    │   │   │       │   │           ├── lib.rs
    │   │   │       │   │           ├── instructions/
    │   │   │       │   │           │   ├── chop_tree.rs
    │   │   │       │   │           │   ├── init_player.rs
    │   │   │       │   │           │   ├── mint_nft.rs
    │   │   │       │   │           │   └── mod.rs
    │   │   │       │   │           └── state/
    │   │   │       │   │               ├── game_data.rs
    │   │   │       │   │               ├── mod.rs
    │   │   │       │   │               └── player_data.rs
    │   │   │       │   └── tests/
    │   │   │       │       └── lumberjack.ts
    │   │   │       ├── app/
    │   │   │       │   ├── README.md
    │   │   │       │   ├── next.config.js
    │   │   │       │   ├── package.json
    │   │   │       │   ├── tsconfig.json
    │   │   │       │   ├── .eslintrc.json
    │   │   │       │   ├── .gitignore
    │   │   │       │   ├── components/
    │   │   │       │   │   ├── ChopTreeButton.tsx
    │   │   │       │   │   ├── DisplayGameState.tsx
    │   │   │       │   │   ├── DisplayNfts.tsx
    │   │   │       │   │   ├── InitPlayerButton.tsx
    │   │   │       │   │   ├── MintNftButton.tsx
    │   │   │       │   │   ├── RequestAirdrop.tsx
    │   │   │       │   │   ├── SessionKeyButton.tsx
    │   │   │       │   │   └── WalletMultiButton.tsx
    │   │   │       │   ├── contexts/
    │   │   │       │   │   ├── GameStateProvider.tsx
    │   │   │       │   │   ├── NftProvider.tsx
    │   │   │       │   │   ├── SessionProvider.tsx
    │   │   │       │   │   └── WalletContextProvider.tsx
    │   │   │       │   ├── idl/
    │   │   │       │   │   └── extension_nft.ts
    │   │   │       │   ├── pages/
    │   │   │       │   │   ├── _app.tsx
    │   │   │       │   │   ├── _document.tsx
    │   │   │       │   │   ├── index.tsx
    │   │   │       │   │   └── api/
    │   │   │       │   │       └── hello.ts
    │   │   │       │   ├── public/
    │   │   │       │   ├── styles/
    │   │   │       │   │   ├── Home.module.css
    │   │   │       │   │   └── globals.css
    │   │   │       │   └── utils/
    │   │   │       │       ├── anchor.ts
    │   │   │       │       └── wrappedConnection.ts
    │   │   │       └── unity/
    │   │   │           └── ExtensionNft/
    │   │   │               ├── .gitattributes
    │   │   │               ├── .gitignore
    │   │   │               ├── Assets/
    │   │   │               │   ├── DOTween 4.meta
    │   │   │               │   ├── Frictionless.meta
    │   │   │               │   ├── Game.meta
    │   │   │               │   ├── Resources.meta
    │   │   │               │   ├── Socket.meta
    │   │   │               │   ├── TextMesh Pro.meta
    │   │   │               │   ├── WebGLTemplates.meta
    │   │   │               │   ├── DOTween 4/
    │   │   │               │   │   ├── DOTween.XML
    │   │   │               │   │   ├── DOTween.XML.meta
    │   │   │               │   │   ├── DOTween.dll.mdb
    │   │   │               │   │   ├── DOTween.dll.mdb.meta
    │   │   │               │   │   ├── DOTween.dll.meta
    │   │   │               │   │   ├── Editor.meta
    │   │   │               │   │   ├── Modules.meta
    │   │   │               │   │   ├── readme.txt
    │   │   │               │   │   ├── readme.txt.meta
    │   │   │               │   │   ├── Editor/
    │   │   │               │   │   │   ├── DOTweenEditor.XML
    │   │   │               │   │   │   ├── DOTweenEditor.XML.meta
    │   │   │               │   │   │   ├── DOTweenEditor.dll.mdb
    │   │   │               │   │   │   ├── DOTweenEditor.dll.mdb.meta
    │   │   │               │   │   │   ├── DOTweenEditor.dll.meta
    │   │   │               │   │   │   ├── Imgs.meta
    │   │   │               │   │   │   └── Imgs/
    │   │   │               │   │   │       ├── DOTweenIcon.png.meta
    │   │   │               │   │   │       ├── DOTweenMiniIcon.png.meta
    │   │   │               │   │   │       ├── Footer.png.meta
    │   │   │               │   │   │       ├── Footer_dark.png.meta
    │   │   │               │   │   │       └── Header.jpg.meta
    │   │   │               │   │   └── Modules/
    │   │   │               │   │       ├── DOTweenModuleAudio.cs
    │   │   │               │   │       ├── DOTweenModuleAudio.cs.meta
    │   │   │               │   │       ├── DOTweenModuleEPOOutline.cs
    │   │   │               │   │       ├── DOTweenModuleEPOOutline.cs.meta
    │   │   │               │   │       ├── DOTweenModulePhysics.cs
    │   │   │               │   │       ├── DOTweenModulePhysics.cs.meta
    │   │   │               │   │       ├── DOTweenModulePhysics2D.cs
    │   │   │               │   │       ├── DOTweenModulePhysics2D.cs.meta
    │   │   │               │   │       ├── DOTweenModuleSprite.cs
    │   │   │               │   │       ├── DOTweenModuleSprite.cs.meta
    │   │   │               │   │       ├── DOTweenModuleUI.cs
    │   │   │               │   │       ├── DOTweenModuleUI.cs.meta
    │   │   │               │   │       ├── DOTweenModuleUnityVersion.cs
    │   │   │               │   │       ├── DOTweenModuleUnityVersion.cs.meta
    │   │   │               │   │       ├── DOTweenModuleUtils.cs
    │   │   │               │   │       └── DOTweenModuleUtils.cs.meta
    │   │   │               │   ├── Frictionless/
    │   │   │               │   │   ├── IMultiSceneSingleton.cs
    │   │   │               │   │   ├── IMultiSceneSingleton.cs.meta
    │   │   │               │   │   ├── IReinitializingMultiSceneSingleton.cs
    │   │   │               │   │   ├── IReinitializingMultiSceneSingleton.cs.meta
    │   │   │               │   │   ├── MessageRouter.cs
    │   │   │               │   │   ├── MessageRouter.cs.meta
    │   │   │               │   │   ├── ServiceFactory.cs
    │   │   │               │   │   └── ServiceFactory.cs.meta
    │   │   │               │   ├── Game/
    │   │   │               │   │   ├── Materials.meta
    │   │   │               │   │   ├── Prefabs.meta
    │   │   │               │   │   ├── Scenes.meta
    │   │   │               │   │   ├── Scripts.meta
    │   │   │               │   │   ├── Sprites.meta
    │   │   │               │   │   ├── Materials/
    │   │   │               │   │   │   ├── WoodParticles.mat
    │   │   │               │   │   │   └── WoodParticles.mat.meta
    │   │   │               │   │   ├── Prefabs/
    │   │   │               │   │   │   ├── DefaultButton.prefab
    │   │   │               │   │   │   ├── DefaultButton.prefab.meta
    │   │   │               │   │   │   ├── InteractionBlocker.prefab
    │   │   │               │   │   │   ├── InteractionBlocker.prefab.meta
    │   │   │               │   │   │   ├── NftItemView.prefab
    │   │   │               │   │   │   ├── NftItemView.prefab.meta
    │   │   │               │   │   │   ├── NftListPopup.prefab
    │   │   │               │   │   │   ├── NftListPopup.prefab.meta
    │   │   │               │   │   │   ├── SessionPopup.prefab
    │   │   │               │   │   │   ├── SessionPopup.prefab.meta
    │   │   │               │   │   │   ├── SolBalanceWidget.prefab
    │   │   │               │   │   │   ├── SolBalanceWidget.prefab.meta
    │   │   │               │   │   │   ├── TokenBalanceWidget.prefab
    │   │   │               │   │   │   ├── TokenBalanceWidget.prefab.meta
    │   │   │               │   │   │   ├── WoodParticles.prefab
    │   │   │               │   │   │   └── WoodParticles.prefab.meta
    │   │   │               │   │   ├── Scenes/
    │   │   │               │   │   │   ├── GameScene.unity
    │   │   │               │   │   │   ├── GameScene.unity.meta
    │   │   │               │   │   │   ├── LoginScene.unity
    │   │   │               │   │   │   └── LoginScene.unity.meta
    │   │   │               │   │   ├── Scripts/
    │   │   │               │   │   │   ├── SimpleRotate.cs
    │   │   │               │   │   │   ├── SimpleRotate.cs.meta
    │   │   │               │   │   │   ├── Solana.meta
    │   │   │               │   │   │   ├── Ui.meta
    │   │   │               │   │   │   ├── Solana/
    │   │   │               │   │   │   │   ├── AnchorService.cs
    │   │   │               │   │   │   │   ├── AnchorService.cs.meta
    │   │   │               │   │   │   │   ├── ExtensionNft.cs
    │   │   │               │   │   │   │   ├── ExtensionNft.cs.meta
    │   │   │               │   │   │   │   ├── NftMintingService.cs
    │   │   │               │   │   │   │   ├── NftMintingService.cs.meta
    │   │   │               │   │   │   │   ├── NftService.cs
    │   │   │               │   │   │   │   ├── NftService.cs.meta
    │   │   │               │   │   │   │   ├── SolanaUtils.cs
    │   │   │               │   │   │   │   └── SolanaUtils.cs.meta
    │   │   │               │   │   │   └── Ui/
    │   │   │               │   │   │       ├── BasePopup.cs
    │   │   │               │   │   │       ├── BasePopup.cs.meta
    │   │   │               │   │   │       ├── GameScreen.cs
    │   │   │               │   │   │       ├── GameScreen.cs.meta
    │   │   │               │   │   │       ├── InteractionBlocker.cs
    │   │   │               │   │   │       ├── InteractionBlocker.cs.meta
    │   │   │               │   │   │       ├── LoginScreen.cs
    │   │   │               │   │   │       ├── LoginScreen.cs.meta
    │   │   │               │   │   │       ├── NftContextMenu.cs
    │   │   │               │   │   │       ├── NftContextMenu.cs.meta
    │   │   │               │   │   │       ├── NftItemListView.cs
    │   │   │               │   │   │       ├── NftItemListView.cs.meta
    │   │   │               │   │   │       ├── NftItemView.cs
    │   │   │               │   │   │       ├── NftItemView.cs.meta
    │   │   │               │   │   │       ├── NftListPopup.cs
    │   │   │               │   │   │       ├── NftListPopup.cs.meta
    │   │   │               │   │   │       ├── NftListPopupUiData.cs
    │   │   │               │   │   │       ├── NftListPopupUiData.cs.meta
    │   │   │               │   │   │       ├── SafeArea.cs
    │   │   │               │   │   │       ├── SafeArea.cs.meta
    │   │   │               │   │   │       ├── SelectedNft.cs
    │   │   │               │   │   │       ├── SelectedNft.cs.meta
    │   │   │               │   │   │       ├── SessionPopup.cs
    │   │   │               │   │   │       ├── SessionPopup.cs.meta
    │   │   │               │   │   │       ├── SessionPopupUiData.cs
    │   │   │               │   │   │       ├── SessionPopupUiData.cs.meta
    │   │   │               │   │   │       ├── SolBalanceWidget.cs
    │   │   │               │   │   │       ├── SolBalanceWidget.cs.meta
    │   │   │               │   │   │       ├── TokenPanel.cs
    │   │   │               │   │   │       ├── TokenPanel.cs.meta
    │   │   │               │   │   │       ├── UiService.cs
    │   │   │               │   │   │       └── UiService.cs.meta
    │   │   │               │   │   └── Sprites/
    │   │   │               │   │       ├── background.png.meta
    │   │   │               │   │       ├── beaver.png.meta
    │   │   │               │   │       ├── icon_energy.png.meta
    │   │   │               │   │       ├── icon_solana.png.meta
    │   │   │               │   │       ├── icon_usdc.png.meta
    │   │   │               │   │       ├── icon_wood.png.meta
    │   │   │               │   │       ├── tree.png.meta
    │   │   │               │   │       ├── ui_close_button.png.meta
    │   │   │               │   │       ├── ui_default_button.png.meta
    │   │   │               │   │       ├── ui_element_panel_rect.png.meta
    │   │   │               │   │       ├── ui_panel.png.meta
    │   │   │               │   │       └── ui_spinner.png.meta
    │   │   │               │   ├── Resources/
    │   │   │               │   │   ├── DOTweenSettings.asset
    │   │   │               │   │   ├── DOTweenSettings.asset.meta
    │   │   │               │   │   ├── SolanaUnitySDK.meta
    │   │   │               │   │   └── SolanaUnitySDK/
    │   │   │               │   │       ├── WalletAdapterButton.prefab
    │   │   │               │   │       ├── WalletAdapterButton.prefab.meta
    │   │   │               │   │       ├── WalletAdapterUI.prefab
    │   │   │               │   │       ├── WalletAdapterUI.prefab.meta
    │   │   │               │   │       ├── [WalletController].prefab
    │   │   │               │   │       └── [WalletController].prefab.meta
    │   │   │               │   ├── Socket/
    │   │   │               │   │   ├── SocketStatusWidget.cs
    │   │   │               │   │   └── SocketStatusWidget.cs.meta
    │   │   │               │   ├── TextMesh Pro/
    │   │   │               │   │   ├── Documentation.meta
    │   │   │               │   │   ├── Fonts.meta
    │   │   │               │   │   ├── Resources.meta
    │   │   │               │   │   ├── Shaders.meta
    │   │   │               │   │   ├── Sprites.meta
    │   │   │               │   │   ├── Documentation/
    │   │   │               │   │   │   └── TextMesh Pro User Guide 2016.pdf.meta
    │   │   │               │   │   ├── Fonts/
    │   │   │               │   │   │   ├── LiberationSans - OFL.txt
    │   │   │               │   │   │   ├── LiberationSans - OFL.txt.meta
    │   │   │               │   │   │   ├── LiberationSans.ttf
    │   │   │               │   │   │   └── LiberationSans.ttf.meta
    │   │   │               │   │   ├── Resources/
    │   │   │               │   │   │   ├── Fonts & Materials.meta
    │   │   │               │   │   │   ├── LineBreaking Following Characters.txt
    │   │   │               │   │   │   ├── LineBreaking Following Characters.txt.meta
    │   │   │               │   │   │   ├── LineBreaking Leading Characters.txt
    │   │   │               │   │   │   ├── LineBreaking Leading Characters.txt.meta
    │   │   │               │   │   │   ├── Sprite Assets.meta
    │   │   │               │   │   │   ├── Style Sheets.meta
    │   │   │               │   │   │   ├── TMP Settings.asset
    │   │   │               │   │   │   ├── TMP Settings.asset.meta
    │   │   │               │   │   │   ├── Fonts & Materials/
    │   │   │               │   │   │   │   ├── LiberationSans SDF - Drop Shadow.mat
    │   │   │               │   │   │   │   ├── LiberationSans SDF - Drop Shadow.mat.meta
    │   │   │               │   │   │   │   ├── LiberationSans SDF - Fallback.asset
    │   │   │               │   │   │   │   ├── LiberationSans SDF - Fallback.asset.meta
    │   │   │               │   │   │   │   ├── LiberationSans SDF - Outline.mat
    │   │   │               │   │   │   │   ├── LiberationSans SDF - Outline.mat.meta
    │   │   │               │   │   │   │   ├── LiberationSans SDF.asset
    │   │   │               │   │   │   │   └── LiberationSans SDF.asset.meta
    │   │   │               │   │   │   ├── Sprite Assets/
    │   │   │               │   │   │   │   ├── EmojiOne.asset
    │   │   │               │   │   │   │   └── EmojiOne.asset.meta
    │   │   │               │   │   │   └── Style Sheets/
    │   │   │               │   │   │       ├── Default Style Sheet.asset
    │   │   │               │   │   │       └── Default Style Sheet.asset.meta
    │   │   │               │   │   ├── Shaders/
    │   │   │               │   │   │   ├── TMP_Bitmap-Custom-Atlas.shader
    │   │   │               │   │   │   ├── TMP_Bitmap-Custom-Atlas.shader.meta
    │   │   │               │   │   │   ├── TMP_Bitmap-Mobile.shader
    │   │   │               │   │   │   ├── TMP_Bitmap-Mobile.shader.meta
    │   │   │               │   │   │   ├── TMP_Bitmap.shader
    │   │   │               │   │   │   ├── TMP_Bitmap.shader.meta
    │   │   │               │   │   │   ├── TMP_SDF Overlay.shader
    │   │   │               │   │   │   ├── TMP_SDF Overlay.shader.meta
    │   │   │               │   │   │   ├── TMP_SDF SSD.shader
    │   │   │               │   │   │   ├── TMP_SDF SSD.shader.meta
    │   │   │               │   │   │   ├── TMP_SDF-Mobile Masking.shader
    │   │   │               │   │   │   ├── TMP_SDF-Mobile Masking.shader.meta
    │   │   │               │   │   │   ├── TMP_SDF-Mobile Overlay.shader
    │   │   │               │   │   │   ├── TMP_SDF-Mobile Overlay.shader.meta
    │   │   │               │   │   │   ├── TMP_SDF-Mobile SSD.shader
    │   │   │               │   │   │   ├── TMP_SDF-Mobile SSD.shader.meta
    │   │   │               │   │   │   ├── TMP_SDF-Mobile.shader
    │   │   │               │   │   │   ├── TMP_SDF-Mobile.shader.meta
    │   │   │               │   │   │   ├── TMP_SDF-Surface-Mobile.shader
    │   │   │               │   │   │   ├── TMP_SDF-Surface-Mobile.shader.meta
    │   │   │               │   │   │   ├── TMP_SDF-Surface.shader
    │   │   │               │   │   │   ├── TMP_SDF-Surface.shader.meta
    │   │   │               │   │   │   ├── TMP_SDF.shader
    │   │   │               │   │   │   ├── TMP_SDF.shader.meta
    │   │   │               │   │   │   ├── TMP_Sprite.shader
    │   │   │               │   │   │   ├── TMP_Sprite.shader.meta
    │   │   │               │   │   │   ├── TMPro.cginc
    │   │   │               │   │   │   ├── TMPro.cginc.meta
    │   │   │               │   │   │   ├── TMPro_Mobile.cginc
    │   │   │               │   │   │   ├── TMPro_Mobile.cginc.meta
    │   │   │               │   │   │   ├── TMPro_Properties.cginc
    │   │   │               │   │   │   ├── TMPro_Properties.cginc.meta
    │   │   │               │   │   │   ├── TMPro_Surface.cginc
    │   │   │               │   │   │   └── TMPro_Surface.cginc.meta
    │   │   │               │   │   └── Sprites/
    │   │   │               │   │       ├── EmojiOne Attribution.txt
    │   │   │               │   │       ├── EmojiOne Attribution.txt.meta
    │   │   │               │   │       ├── EmojiOne.json
    │   │   │               │   │       ├── EmojiOne.json.meta
    │   │   │               │   │       └── EmojiOne.png.meta
    │   │   │               │   └── WebGLTemplates/
    │   │   │               │       ├── SolanaWebGlTemplate.meta
    │   │   │               │       ├── xNFT.meta
    │   │   │               │       ├── SolanaWebGlTemplate/
    │   │   │               │       │   ├── TemplateData.meta
    │   │   │               │       │   ├── index.html
    │   │   │               │       │   ├── index.html.meta
    │   │   │               │       │   ├── thumbnail.png.meta
    │   │   │               │       │   └── TemplateData/
    │   │   │               │       │       ├── favicon.ico.meta
    │   │   │               │       │       ├── fullscreen-button.png.meta
    │   │   │               │       │       ├── progress-bar-empty-dark.png.meta
    │   │   │               │       │       ├── progress-bar-empty-light.png.meta
    │   │   │               │       │       ├── progress-bar-full-dark.png.meta
    │   │   │               │       │       ├── progress-bar-full-light.png.meta
    │   │   │               │       │       ├── style.css
    │   │   │               │       │       ├── style.css.meta
    │   │   │               │       │       ├── unity-logo-dark.png.meta
    │   │   │               │       │       ├── unity-logo-light.png.meta
    │   │   │               │       │       └── webgl-logo.png.meta
    │   │   │               │       └── xNFT/
    │   │   │               │           ├── index.html
    │   │   │               │           ├── index.html.meta
    │   │   │               │           └── thumbnail.png.meta
    │   │   │               ├── Packages/
    │   │   │               │   ├── manifest.json
    │   │   │               │   └── packages-lock.json
    │   │   │               ├── ProjectSettings/
    │   │   │               │   ├── AudioManager.asset
    │   │   │               │   ├── ClusterInputManager.asset
    │   │   │               │   ├── DynamicsManager.asset
    │   │   │               │   ├── EditorBuildSettings.asset
    │   │   │               │   ├── EditorSettings.asset
    │   │   │               │   ├── GraphicsSettings.asset
    │   │   │               │   ├── InputManager.asset
    │   │   │               │   ├── MemorySettings.asset
    │   │   │               │   ├── NavMeshAreas.asset
    │   │   │               │   ├── PackageManagerSettings.asset
    │   │   │               │   ├── Physics2DSettings.asset
    │   │   │               │   ├── PresetManager.asset
    │   │   │               │   ├── ProjectSettings.asset
    │   │   │               │   ├── ProjectVersion.txt
    │   │   │               │   ├── QualitySettings.asset
    │   │   │               │   ├── SceneTemplateSettings.json
    │   │   │               │   ├── TagManager.asset
    │   │   │               │   ├── TimeManager.asset
    │   │   │               │   ├── UnityConnectSettings.asset
    │   │   │               │   ├── VFXManager.asset
    │   │   │               │   ├── VersionControlSettings.asset
    │   │   │               │   ├── XRSettings.asset
    │   │   │               │   ├── boot.config
    │   │   │               │   └── Packages/
    │   │   │               │       └── com.unity.testtools.codecoverage/
    │   │   │               │           └── Settings.json
    │   │   │               └── UserSettings/
    │   │   │                   ├── EditorUserSettings.asset
    │   │   │                   ├── Search.settings
    │   │   │                   └── Layouts/
    │   │   │                       └── default-2021.dwlt
    │   │   ├── non-transferable/
    │   │   │   ├── anchor/
    │   │   │   │   ├── Anchor.toml
    │   │   │   │   ├── Cargo.toml
    │   │   │   │   ├── package.json
    │   │   │   │   ├── pnpm-lock.yaml
    │   │   │   │   ├── tsconfig.json
    │   │   │   │   ├── .gitignore
    │   │   │   │   ├── .prettierignore
    │   │   │   │   ├── migrations/
    │   │   │   │   │   └── deploy.ts
    │   │   │   │   ├── programs/
    │   │   │   │   │   └── non-transferable/
    │   │   │   │   │       ├── Cargo.toml
    │   │   │   │   │       ├── Xargo.toml
    │   │   │   │   │       └── src/
    │   │   │   │   │           └── lib.rs
    │   │   │   │   └── tests/
    │   │   │   │       └── non-transferable.ts
    │   │   │   └── native/
    │   │   │       ├── cicd.sh
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       ├── tsconfig.json
    │   │   │       ├── program/
    │   │   │       │   ├── Cargo.toml
    │   │   │       │   └── src/
    │   │   │       │       └── lib.rs
    │   │   │       └── tests/
    │   │   │           └── test.ts
    │   │   ├── permanent-delegate/
    │   │   │   └── anchor/
    │   │   │       ├── Anchor.toml
    │   │   │       ├── Cargo.toml
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       ├── tsconfig.json
    │   │   │       ├── .gitignore
    │   │   │       ├── .prettierignore
    │   │   │       ├── migrations/
    │   │   │       │   └── deploy.ts
    │   │   │       ├── programs/
    │   │   │       │   └── permanent-delegate/
    │   │   │       │       ├── Cargo.toml
    │   │   │       │       ├── Xargo.toml
    │   │   │       │       └── src/
    │   │   │       │           └── lib.rs
    │   │   │       └── tests/
    │   │   │           └── permanent-delegate.ts
    │   │   ├── transfer-fee/
    │   │   │   ├── anchor/
    │   │   │   │   ├── Anchor.toml
    │   │   │   │   ├── Cargo.toml
    │   │   │   │   ├── package.json
    │   │   │   │   ├── pnpm-lock.yaml
    │   │   │   │   ├── tsconfig.json
    │   │   │   │   ├── .gitignore
    │   │   │   │   ├── .prettierignore
    │   │   │   │   ├── migrations/
    │   │   │   │   │   └── deploy.ts
    │   │   │   │   ├── programs/
    │   │   │   │   │   └── transfer-fee/
    │   │   │   │   │       ├── Cargo.toml
    │   │   │   │   │       ├── Xargo.toml
    │   │   │   │   │       └── src/
    │   │   │   │   │           ├── lib.rs
    │   │   │   │   │           └── instructions/
    │   │   │   │   │               ├── harvest.rs
    │   │   │   │   │               ├── initialize.rs
    │   │   │   │   │               ├── mod.rs
    │   │   │   │   │               ├── transfer.rs
    │   │   │   │   │               ├── update_fee.rs
    │   │   │   │   │               └── withdraw.rs
    │   │   │   │   └── tests/
    │   │   │   │       └── transfer-fee.ts
    │   │   │   └── native/
    │   │   │       ├── cicd.sh
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       ├── tsconfig.json
    │   │   │       ├── program/
    │   │   │       │   ├── Cargo.toml
    │   │   │       │   └── src/
    │   │   │       │       └── lib.rs
    │   │   │       └── tests/
    │   │   │           └── test.ts
    │   │   └── transfer-hook/
    │   │       ├── account-data-as-seed/
    │   │       │   └── anchor/
    │   │       │       ├── readme.md
    │   │       │       ├── Anchor.toml
    │   │       │       ├── Cargo.toml
    │   │       │       ├── package.json
    │   │       │       ├── pnpm-lock.yaml
    │   │       │       ├── tsconfig.json
    │   │       │       ├── .gitignore
    │   │       │       ├── .prettierignore
    │   │       │       ├── .prettierrc
    │   │       │       ├── migrations/
    │   │       │       │   └── deploy.ts
    │   │       │       ├── programs/
    │   │       │       │   └── transfer-hook/
    │   │       │       │       ├── Cargo.toml
    │   │       │       │       ├── Xargo.toml
    │   │       │       │       └── src/
    │   │       │       │           └── lib.rs
    │   │       │       └── tests/
    │   │       │           └── transfer-hook.ts
    │   │       ├── counter/
    │   │       │   └── anchor/
    │   │       │       ├── Anchor.toml
    │   │       │       ├── Cargo.toml
    │   │       │       ├── package.json
    │   │       │       ├── pnpm-lock.yaml
    │   │       │       ├── tsconfig.json
    │   │       │       ├── .gitignore
    │   │       │       ├── .prettierignore
    │   │       │       ├── migrations/
    │   │       │       │   └── deploy.ts
    │   │       │       ├── programs/
    │   │       │       │   └── transfer-hook/
    │   │       │       │       ├── Cargo.toml
    │   │       │       │       ├── Xargo.toml
    │   │       │       │       └── src/
    │   │       │       │           └── lib.rs
    │   │       │       └── tests/
    │   │       │           └── transfer-hook.ts
    │   │       ├── hello-world/
    │   │       │   └── anchor/
    │   │       │       ├── Anchor.toml
    │   │       │       ├── Cargo.toml
    │   │       │       ├── package.json
    │   │       │       ├── pnpm-lock.yaml
    │   │       │       ├── tsconfig.json
    │   │       │       ├── .gitignore
    │   │       │       ├── .prettierignore
    │   │       │       ├── migrations/
    │   │       │       │   └── deploy.ts
    │   │       │       ├── programs/
    │   │       │       │   └── transfer-hook/
    │   │       │       │       ├── Cargo.toml
    │   │       │       │       ├── Xargo.toml
    │   │       │       │       └── src/
    │   │       │       │           └── lib.rs
    │   │       │       └── tests/
    │   │       │           └── transfer-hook.ts
    │   │       ├── transfer-cost/
    │   │       │   └── anchor/
    │   │       │       ├── Anchor.toml
    │   │       │       ├── Cargo.toml
    │   │       │       ├── package.json
    │   │       │       ├── pnpm-lock.yaml
    │   │       │       ├── tsconfig.json
    │   │       │       ├── .gitignore
    │   │       │       ├── .prettierignore
    │   │       │       ├── migrations/
    │   │       │       │   └── deploy.ts
    │   │       │       ├── programs/
    │   │       │       │   └── transfer-hook/
    │   │       │       │       ├── Cargo.toml
    │   │       │       │       ├── Xargo.toml
    │   │       │       │       └── src/
    │   │       │       │           └── lib.rs
    │   │       │       └── tests/
    │   │       │           └── transfer-hook.ts
    │   │       ├── transfer-switch/
    │   │       │   └── anchor/
    │   │       │       ├── Anchor.toml
    │   │       │       ├── Cargo.toml
    │   │       │       ├── package.json
    │   │       │       ├── pnpm-lock.yaml
    │   │       │       ├── tsconfig.json
    │   │       │       ├── .gitignore
    │   │       │       ├── programs/
    │   │       │       │   └── transfer-switch/
    │   │       │       │       ├── Cargo.toml
    │   │       │       │       ├── Xargo.toml
    │   │       │       │       └── src/
    │   │       │       │           ├── error.rs
    │   │       │       │           ├── lib.rs
    │   │       │       │           ├── state.rs
    │   │       │       │           └── instructions/
    │   │       │       │               ├── configure_admin.rs
    │   │       │       │               ├── initialise_extra_account_metas_list.rs
    │   │       │       │               ├── mod.rs
    │   │       │       │               ├── switch.rs
    │   │       │       │               └── transfer_hook.rs
    │   │       │       └── tests/
    │   │       │           └── transfer-switch.ts
    │   │       └── whitelist/
    │   │           └── anchor/
    │   │               ├── Anchor.toml
    │   │               ├── Cargo.toml
    │   │               ├── package.json
    │   │               ├── pnpm-lock.yaml
    │   │               ├── tsconfig.json
    │   │               ├── .gitignore
    │   │               ├── .prettierignore
    │   │               ├── migrations/
    │   │               │   └── deploy.ts
    │   │               ├── programs/
    │   │               │   └── transfer-hook/
    │   │               │       ├── Cargo.toml
    │   │               │       ├── Xargo.toml
    │   │               │       └── src/
    │   │               │           └── lib.rs
    │   │               └── tests/
    │   │                   └── transfer-hook.ts
    │   ├── token-fundraiser/
    │   │   └── anchor/
    │   │       ├── readme.MD
    │   │       ├── Anchor.toml
    │   │       ├── Cargo.lock
    │   │       ├── Cargo.toml
    │   │       ├── package.json
    │   │       ├── pnpm-lock.yaml
    │   │       ├── tsconfig.json
    │   │       ├── programs/
    │   │       │   └── fundraiser/
    │   │       │       ├── Cargo.toml
    │   │       │       ├── Xargo.toml
    │   │       │       └── src/
    │   │       │           ├── constants.rs
    │   │       │           ├── error.rs
    │   │       │           ├── lib.rs
    │   │       │           ├── instructions/
    │   │       │           │   ├── checker.rs
    │   │       │           │   ├── contribute.rs
    │   │       │           │   ├── initialize.rs
    │   │       │           │   ├── mod.rs
    │   │       │           │   └── refund.rs
    │   │       │           └── state/
    │   │       │               ├── contributor.rs
    │   │       │               ├── fundraiser.rs
    │   │       │               └── mod.rs
    │   │       └── tests/
    │   │           ├── bankrun.test.ts
    │   │           └── fundraiser.ts
    │   ├── token-swap/
    │   │   ├── README.md
    │   │   ├── anchor/
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── tsconfig.json
    │   │   │   ├── programs/
    │   │   │   │   └── token-swap/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           ├── constants.rs
    │   │   │   │           ├── errors.rs
    │   │   │   │           ├── lib.rs
    │   │   │   │           ├── state.rs
    │   │   │   │           └── instructions/
    │   │   │   │               ├── create_amm.rs
    │   │   │   │               ├── create_pool.rs
    │   │   │   │               ├── deposit_liquidity.rs
    │   │   │   │               ├── mod.rs
    │   │   │   │               ├── swap_exact_tokens_for_tokens.rs
    │   │   │   │               └── withdraw_liquidity.rs
    │   │   │   └── tests/
    │   │   │       ├── create-amm.ts
    │   │   │       ├── create-pool.ts
    │   │   │       ├── deposit-liquidity.ts
    │   │   │       ├── swap.ts
    │   │   │       ├── utils.ts
    │   │   │       └── withdraw-liquidity.ts
    │   │   ├── poseidon/
    │   │   │   └── token_swap/
    │   │   │       ├── Anchor.toml
    │   │   │       ├── Cargo.toml
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       ├── tsconfig.json
    │   │   │       ├── .gitignore
    │   │   │       ├── .prettierignore
    │   │   │       ├── migrations/
    │   │   │       │   └── deploy.ts
    │   │   │       ├── programs/
    │   │   │       │   └── token_swap/
    │   │   │       │       ├── Cargo.toml
    │   │   │       │       ├── Xargo.toml
    │   │   │       │       └── src/
    │   │   │       │           └── lib.rs
    │   │   │       ├── tests/
    │   │   │       │   ├── create-amm.ts
    │   │   │       │   ├── create-pool.ts
    │   │   │       │   ├── deposit-liquidity.ts
    │   │   │       │   ├── token_swap.ts
    │   │   │       │   ├── utils.ts
    │   │   │       │   └── withdraw-liquidity.ts
    │   │   │       └── ts-programs/
    │   │   │           ├── package.json
    │   │   │           ├── pnpm-lock.yaml
    │   │   │           └── src/
    │   │   │               └── token_swap.ts
    │   │   └── steel/
    │   │       ├── README.md
    │   │       ├── Cargo.toml
    │   │       ├── package.json
    │   │       ├── pnpm-lock.yaml
    │   │       ├── tsconfig.json
    │   │       ├── api/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       ├── consts.rs
    │   │       │       ├── error.rs
    │   │       │       ├── instruction.rs
    │   │       │       ├── lib.rs
    │   │       │       ├── sdk.rs
    │   │       │       └── state/
    │   │       │           ├── amm.rs
    │   │       │           ├── mod.rs
    │   │       │           └── pool.rs
    │   │       ├── program/
    │   │       │   ├── Cargo.toml
    │   │       │   ├── src/
    │   │       │   │   ├── create_amm.rs
    │   │       │   │   ├── create_pool.rs
    │   │       │   │   ├── deposit_liquidity.rs
    │   │       │   │   ├── lib.rs
    │   │       │   │   ├── swap.rs
    │   │       │   │   └── withdraw_liquidity.rs
    │   │       │   └── tests/
    │   │       │       └── test.rs
    │   │       └── tests/
    │   │           ├── create_pool_and_swap.test.ts
    │   │           ├── create_pool_and_withdraw_all_liquid.test.ts
    │   │           └── utils.ts
    │   ├── transfer-tokens/
    │   │   ├── README.md
    │   │   ├── anchor/
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── pnpm-lock.yaml
    │   │   │   ├── prepare.mjs
    │   │   │   ├── tsconfig.json
    │   │   │   ├── programs/
    │   │   │   │   └── transfer-tokens/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           ├── lib.rs
    │   │   │   │           └── instructions/
    │   │   │   │               ├── create.rs
    │   │   │   │               ├── mint.rs
    │   │   │   │               ├── mod.rs
    │   │   │   │               └── transfer.rs
    │   │   │   └── tests/
    │   │   │       ├── bankrun.test.ts
    │   │   │       └── test.ts
    │   │   ├── native/
    │   │   │   ├── cicd.sh
    │   │   │   ├── package.json
    │   │   │   ├── tsconfig.json
    │   │   │   ├── program/
    │   │   │   │   ├── Cargo.toml
    │   │   │   │   └── src/
    │   │   │   │       ├── lib.rs
    │   │   │   │       ├── processor.rs
    │   │   │   │       └── instructions/
    │   │   │   │           ├── create.rs
    │   │   │   │           ├── mint_nft.rs
    │   │   │   │           ├── mint_spl.rs
    │   │   │   │           ├── mod.rs
    │   │   │   │           └── transfer.rs
    │   │   │   └── tests/
    │   │   │       ├── instructions.ts
    │   │   │       └── test.ts
    │   │   ├── poseidon/
    │   │   │   └── transfer-tokens-program/
    │   │   │       ├── Anchor.toml
    │   │   │       ├── Cargo.toml
    │   │   │       ├── package.json
    │   │   │       ├── pnpm-lock.yaml
    │   │   │       ├── tsconfig.json
    │   │   │       ├── .gitignore
    │   │   │       ├── .prettierignore
    │   │   │       ├── migrations/
    │   │   │       │   └── deploy.ts
    │   │   │       ├── programs/
    │   │   │       │   └── transfer-tokens-program/
    │   │   │       │       ├── Cargo.toml
    │   │   │       │       ├── Xargo.toml
    │   │   │       │       └── src/
    │   │   │       │           └── lib.rs
    │   │   │       ├── tests/
    │   │   │       │   ├── bankrun.test.ts
    │   │   │       │   └── transfer-tokens-program.ts
    │   │   │       └── ts-programs/
    │   │   │           ├── package.json
    │   │   │           ├── pnpm-lock.yaml
    │   │   │           └── src/
    │   │   │               └── transferTokensProgram.ts
    │   │   ├── seahorse/
    │   │   │   ├── README.md
    │   │   │   ├── Anchor.toml
    │   │   │   ├── Cargo.toml
    │   │   │   ├── package.json
    │   │   │   ├── tsconfig.json
    │   │   │   ├── .gitignore
    │   │   │   ├── .prettierignore
    │   │   │   ├── migrations/
    │   │   │   │   └── deploy.ts
    │   │   │   ├── programs/
    │   │   │   │   └── seahorse/
    │   │   │   │       ├── Cargo.toml
    │   │   │   │       ├── Xargo.toml
    │   │   │   │       └── src/
    │   │   │   │           ├── lib.rs
    │   │   │   │           └── dot/
    │   │   │   │               ├── mod.rs
    │   │   │   │               └── program.rs
    │   │   │   ├── programs_py/
    │   │   │   │   ├── seahorse.py
    │   │   │   │   └── seahorse/
    │   │   │   │       ├── __init__.py
    │   │   │   │       └── prelude.py
    │   │   │   └── tests/
    │   │   │       ├── pyproject.toml
    │   │   │       └── test.py
    │   │   └── steel/
    │   │       ├── README.md
    │   │       ├── Cargo.toml
    │   │       ├── cicd.sh
    │   │       ├── package.json
    │   │       ├── pnpm-lock.yaml
    │   │       ├── prepare.mjs
    │   │       ├── tsconfig.json
    │   │       ├── .gitignore
    │   │       ├── api/
    │   │       │   ├── Cargo.toml
    │   │       │   └── src/
    │   │       │       ├── consts.rs
    │   │       │       ├── instruction.rs
    │   │       │       ├── lib.rs
    │   │       │       ├── sdk.rs
    │   │       │       └── utils.rs
    │   │       ├── program/
    │   │       │   ├── Cargo.toml
    │   │       │   ├── src/
    │   │       │   │   ├── create.rs
    │   │       │   │   ├── lib.rs
    │   │       │   │   ├── mint.rs
    │   │       │   │   └── transfer.rs
    │   │       │   └── tests/
    │   │       │       └── test.rs
    │   │       └── tests/
    │   │           ├── instructions.ts
    │   │           └── tests.ts
    │   └── .assets/
    │       ├── nft.json
    │       └── spl-token.json
    ├── tools/
    │   ├── clockwork/
    │   │   └── README.md
    │   └── shank-and-solita/
    │       └── native/
    │           ├── README.md
    │           ├── package.json
    │           ├── .solitarc.js
    │           ├── program/
    │           │   ├── Cargo.toml
    │           │   ├── idl/
    │           │   │   └── car_rental_service.json
    │           │   └── src/
    │           │       ├── lib.rs
    │           │       ├── instructions/
    │           │       │   ├── add_car.rs
    │           │       │   ├── book_rental.rs
    │           │       │   ├── mod.rs
    │           │       │   ├── pick_up_car.rs
    │           │       │   └── return_car.rs
    │           │       └── state/
    │           │           └── mod.rs
    │           ├── tests/
    │           │   ├── test.ts
    │           │   ├── tsconfig.test.json
    │           │   └── generated/
    │           │       ├── index.ts
    │           │       ├── accounts/
    │           │       │   ├── Car.ts
    │           │       │   ├── RentalOrder.ts
    │           │       │   └── index.ts
    │           │       ├── instructions/
    │           │       │   ├── AddCar.ts
    │           │       │   ├── BookRental.ts
    │           │       │   ├── PickUpCar.ts
    │           │       │   ├── ReturnCar.ts
    │           │       │   └── index.ts
    │           │       └── types/
    │           │           ├── AddCarArgs.ts
    │           │           ├── BookRentalArgs.ts
    │           │           ├── RentalOrderStatus.ts
    │           │           └── index.ts
    │           └── .crates/
    │               ├── .crates.toml
    │               ├── .crates2.json
    │               └── bin/
    │                   └── shank
    ├── .github/
    │   ├── dependabot.yml
    │   ├── .ghaignore
    │   └── workflows/
    │       ├── anchor.yml
    │       ├── biome.yml
    │       ├── poseidon.yml
    │       ├── rust.yml
    │       ├── seahorse.yml
    │       ├── solana-native.yml
    │       └── steel.yml
    └── .husky/
        └── pre-commit

================================================
File: basics/account-data/anchor/Anchor.toml
================================================
[features]
seeds = false
skip-lint = false

[programs.localnet]
anchor_program_example = "GpVcgWdgVErgLqsn8VYUch6EqDerMgNqoLSmGyKrd6MR"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/account-data/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/account-data/anchor/package.json
================================================
{
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/web3.js": "^1.95.2"
  },
  "devDependencies": {
    "anchor-bankrun": "^0.4.0",
    "solana-bankrun": "^0.3.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/account-data/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/account-data/anchor/programs/anchor-program-example/Cargo.toml
================================================
[package]
name = "account-data-anchor-program-example"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "anchor_program_example"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.1"


================================================
File: basics/account-data/anchor/programs/anchor-program-example/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/account-data/anchor/programs/anchor-program-example/src/constants.rs
================================================
pub const ANCHOR_DESCRIMINATOR_SIZE: usize = 8;


================================================
File: basics/account-data/anchor/programs/anchor-program-example/src/lib.rs
================================================
#![allow(clippy::result_large_err)]
use anchor_lang::prelude::*;
use instructions::*;

pub mod constants;
pub mod instructions;
pub mod state;

declare_id!("GpVcgWdgVErgLqsn8VYUch6EqDerMgNqoLSmGyKrd6MR");

#[program]
pub mod anchor_program_example {
    use super::*;

    pub fn create_address_info(
        ctx: Context<CreateAddressInfo>,
        name: String,
        house_number: u8,
        street: String,
        city: String,
    ) -> Result<()> {
        create::create_address_info(ctx, name, house_number, street, city)
    }
}


================================================
File: basics/account-data/anchor/programs/anchor-program-example/src/instructions/create.rs
================================================
use crate::{constants::ANCHOR_DESCRIMINATOR_SIZE, state::AddressInfo};
use anchor_lang::prelude::*;

#[derive(Accounts)]
pub struct CreateAddressInfo<'info> {
    #[account(mut)]
    payer: Signer<'info>,

    #[account(
        init,
        payer = payer,
        space = ANCHOR_DESCRIMINATOR_SIZE + AddressInfo::INIT_SPACE,
    )]
    address_info: Account<'info, AddressInfo>,
    system_program: Program<'info, System>,
}

pub fn create_address_info(
    ctx: Context<CreateAddressInfo>,
    name: String,
    house_number: u8,
    street: String,
    city: String,
) -> Result<()> {
    *ctx.accounts.address_info = AddressInfo {
        name,
        house_number,
        street,
        city,
    };
    Ok(())
}


================================================
File: basics/account-data/anchor/programs/anchor-program-example/src/instructions/mod.rs
================================================
pub mod create;
pub use create::*;


================================================
File: basics/account-data/anchor/programs/anchor-program-example/src/state/address_info.rs
================================================
use anchor_lang::prelude::*;

#[account]
#[derive(InitSpace)] // automatically calculate the space required for the struct
pub struct AddressInfo {
    #[max_len(50)] // set a max length for the string
    pub name: String, // 4 bytes + 50 bytes
    pub house_number: u8, // 1 byte
    #[max_len(50)]
    pub street: String, // 4 bytes + 50 bytes
    #[max_len(50)]
    pub city: String, // 4 bytes + 50 bytes
}


================================================
File: basics/account-data/anchor/programs/anchor-program-example/src/state/mod.rs
================================================
pub mod address_info;

pub use address_info::*;


================================================
File: basics/account-data/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml --bpf-out-dir=./program/target/so
solana program deploy ./program/target/so/program.so


================================================
File: basics/account-data/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/program.so"
  },
  "dependencies": {
    "@solana/web3.js": "^1.47.3",
    "fs": "^0.0.1-security"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/account-data/native/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/account-data/native/program/Cargo.toml
================================================
[package]
name = "account-data-program"
version = "0.1.0"
edition = "2021"

[dependencies]
solana-program = "=1.18.17"
borsh = "0.9.3"
borsh-derive = "0.9.1"

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: basics/account-data/native/program/src/lib.rs
================================================
use solana_program::entrypoint;

use processor::process_instruction;

pub mod instructions;
pub mod processor;
pub mod state;

entrypoint!(process_instruction);


================================================
File: basics/account-data/native/program/src/processor.rs
================================================
use borsh::BorshDeserialize;
use solana_program::{
    account_info::AccountInfo, entrypoint::ProgramResult, program_error::ProgramError,
    pubkey::Pubkey,
};

use crate::instructions;
use crate::state::AddressInfo;

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    if let Ok(address_info) = AddressInfo::try_from_slice(instruction_data) {
        return instructions::create::create_address_info(program_id, accounts, address_info);
    };

    Err(ProgramError::InvalidInstructionData)
}


================================================
File: basics/account-data/native/program/src/instructions/mod.rs
================================================
pub mod create;

pub use create::*;


================================================
File: basics/account-data/native/program/src/state/address_info.rs
================================================
use borsh::{BorshDeserialize, BorshSerialize};

#[derive(BorshDeserialize, BorshSerialize, Debug)]
pub struct AddressInfo {
    pub name: String,
    pub house_number: u8,
    pub street: String,
    pub city: String,
}

impl AddressInfo {
    pub fn new(name: String, house_number: u8, street: String, city: String) -> Self {
        AddressInfo {
            name,
            house_number,
            street,
            city,
        }
    }
}


================================================
File: basics/account-data/native/program/src/state/mod.rs
================================================
pub mod address_info;

pub use address_info::*;


================================================
File: basics/account-data/poseidon/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
account_data = "CFiSZ4w8WcG7U8Axq3Lx5zpbyLiMMBde6HGKtZvRCn6U"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "yarn run ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/account-data/poseidon/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/account-data/poseidon/package.json
================================================
{
  "license": "ISC",
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.1"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "anchor-bankrun": "^0.5.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "solana-bankrun": "^0.4.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/account-data/poseidon/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/account-data/poseidon/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: basics/account-data/poseidon/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: basics/account-data/poseidon/programs/account-data/Cargo.toml
================================================
[package]
name = "account-data"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "account_data"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.1"


================================================
File: basics/account-data/poseidon/programs/account-data/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/account-data/poseidon/ts-programs/package.json
================================================
{
  "name": "ts-programs",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@solanaturbine/poseidon": "^0.0.10"
  }
}


================================================
File: basics/account-data/poseidon/ts-programs/pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@solanaturbine/poseidon':
        specifier: ^0.0.10
        version: 0.0.10

packages:

  '@solanaturbine/poseidon@0.0.10':
    resolution: {integrity: sha512-4C8niySNUp+qArCrtZ9WZszfwntynSzJUq8go7QSh63xUv2s5ACHfwLs73ajaH95NGmEcgpl6raENv0u0GeCqg==}

snapshots:

  '@solanaturbine/poseidon@0.0.10': {}


================================================
File: basics/account-data/poseidon/ts-programs/src/accountData.ts
================================================
import { Account, String as PoseidonString, Pubkey, type Result, Signer, u8 } from '@solanaturbine/poseidon';

export default class AccountData {
  static PROGRAM_ID = new Pubkey('CFiSZ4w8WcG7U8Axq3Lx5zpbyLiMMBde6HGKtZvRCn6U');

  createAddressInfo(
    owner: Signer,
    addressInfo: AddressInfo,
    name: PoseidonString<50>,
    houseNumber: u8,
    street: PoseidonString<50>,
    city: PoseidonString<50>,
  ): Result {
    addressInfo.derive(['address_info', owner.key]).init(owner);
    addressInfo.name = name;
    addressInfo.houseNumber = houseNumber;
    addressInfo.street = street;
    addressInfo.city = city;
  }
}

export interface AddressInfo extends Account {
  name: PoseidonString<50>;
  houseNumber: u8;
  street: PoseidonString<50>;
  city: PoseidonString<50>;
}


================================================
File: basics/account-data/steel/README.md
================================================
# Account Data Program Example in Steel Framewrok

Creates an account with data.

## Build

```sh

cargo build-sbf

```

## Tests

Run the tests using following command:

```sh

# Node tests
pnpm build-and-test # This will build and test the program

#or 
pnpm test # If you have already built the program test the program

```


================================================
File: basics/account-data/steel/Cargo.toml
================================================
[workspace]
resolver = "2"
members = ["api", "program"]

[workspace.package]
version = "0.1.0"
edition = "2021"
license = "Apache-2.0"
homepage = ""
documentation = ""
respository = ""
readme = "./README.md"
keywords = ["solana"]

[workspace.dependencies]
account-data-api = { path = "./api", version = "0.1.0" }
bytemuck = "1.14"
num_enum = "0.7"
solana-program = "1.18"
steel = "1.3"
thiserror = "1.0"

================================================
File: basics/account-data/steel/package.json
================================================
{
  "name": "account-data-program",
  "version": "1.0.0",
  "description": "",
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/*.test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/account_data_program.so"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@solana/web3.js": "^1.95.4"
  },
  "devDependencies": {
    "@types/chai": "^4.3.7",
    "@types/mocha": "10.0.9",
    "@types/node": "^22.7.4",
    "borsh": "^2.0.0",
    "chai": "^4.3.7",
    "mocha": "10.7.3",
    "solana-bankrun": "0.4.0",
    "ts-mocha": "^10.0.0",
    "typescript": "5.6.3"
  }
}


================================================
File: basics/account-data/steel/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai", "node"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/account-data/steel/api/Cargo.toml
================================================
[package]
name = "account-data-api"
version = "0.1.0"
edition = "2021"

[dependencies]
bytemuck.workspace = true
num_enum.workspace = true
solana-program.workspace = true
steel.workspace = true
thiserror.workspace = true


================================================
File: basics/account-data/steel/api/src/consts.rs
================================================
/// Seed of the address_info account PDA.
pub const ADDRESS_INFO_SEED: &[u8] = b"address_info";


================================================
File: basics/account-data/steel/api/src/instruction.rs
================================================
use crate::state::AddressInfoData;
use steel::*;

/// Instruction types for the address info program
#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, TryFromPrimitive)]
pub enum AddressInfoInstruction {
    CreateAddressInfo = 0,
}

/// Instruction data for creating address info
#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct CreateAddressInfo {
    pub data: AddressInfoData,
}

// Link instruction type with its data structure
instruction!(AddressInfoInstruction, CreateAddressInfo);


================================================
File: basics/account-data/steel/api/src/lib.rs
================================================
pub mod consts;
pub mod instruction;
pub mod sdk;
pub mod state;

pub mod prelude {
    pub use crate::consts::*;
    pub use crate::instruction::*;
    pub use crate::sdk::*;
    pub use crate::state::*;
}

use steel::*;

// Set your Program ID
declare_id!("Dw6Yq7TZSHdaqB2nKjsxuDrdp5xYCuZaVKFZb5vp5Y4Y");


================================================
File: basics/account-data/steel/api/src/sdk.rs
================================================
use crate::prelude::*;
use steel::*;

pub fn create_address_info(signer: Pubkey, data: AddressInfoData) -> Instruction {
    Instruction {
        program_id: crate::ID,
        accounts: vec![
            AccountMeta::new(signer, true),
            AccountMeta::new(account_pda().0, false),
            AccountMeta::new_readonly(system_program::ID, false),
        ],
        data: CreateAddressInfo { data }.to_bytes(),
    }
}


================================================
File: basics/account-data/steel/program/Cargo.toml
================================================
[package]
name = "account-data-program"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]

[dependencies]
account-data-api.workspace = true
solana-program.workspace = true
steel.workspace = true

[dev-dependencies]
bs64 = "0.1.2"
rand = "0.8.5"
solana-program-test = "1.18"
solana-sdk = "1.18"
tokio = { version = "1.35", features = ["full"] }


================================================
File: basics/account-data/steel/program/src/error.rs
================================================
use steel::*;
use thiserror::Error;

/// Custom error types for the address info program
#[repr(u32)]
#[derive(Debug, Error, Clone, Copy, PartialEq, Eq, IntoPrimitive)]
pub enum AddressInfoError {
    #[error("Required account is missing")]
    MissingRequiredAccount = 0,

    #[error("Account owner is invalid")]
    InvalidAccountOwner = 1,

    #[error("Invalid instruction data")]
    InvalidInstructionData = 2,
    
    #[error("Address info account already exists")]
    AddressInfoAccountAlreadyExists = 3,
}

error!(AddressInfoError);

================================================
File: basics/account-data/steel/program/src/lib.rs
================================================
mod create_address_info;

use account_data_api::prelude::*;
use create_address_info::*;
use solana_program::msg;
use steel::*;

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    data: &[u8],
) -> ProgramResult {
    // Validate program ID
    if program_id != &account_data_api::ID {
        return Err(ProgramError::IncorrectProgramId);
    }

    // Parse and validate instruction data
    let (instruction, instruction_data) =
        parse_instruction::<AddressInfoInstruction>(&account_data_api::ID, program_id, data)?;

    // Route instruction to appropriate processor
    match instruction {
        AddressInfoInstruction::CreateAddressInfo => {
            msg!("Instruction: CreateAddressInfo");
            process_create_address_info(accounts, instruction_data)?
        }
    }

    Ok(())
}

entrypoint!(process_instruction);


================================================
File: basics/checking-accounts/README.md
================================================
# Checking Accounts

Solana Programs should perform checks on instructions to ensure security and that required invariants
are not being violated.

These checks vary and depend on the exact task of the Solana Program.

In this example we see some of the common checks a Solana Program can perform:

- checking the program ID from the instruction is the program ID of your program
- checking that the order and number of accounts are correct
- checking the initialization state of an account
- etc.

================================================
File: basics/checking-accounts/anchor/Anchor.toml
================================================
[features]
seeds = false
[programs.localnet]
anchor_program_example = "ECWPhR3rJbaPfyNFgphnjxSEexbTArc7vxD8fnW6tgKw"

[registry]
url = "https://anchor.projectserum.com"

[provider]
cluster = "localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/checking-accounts/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/checking-accounts/anchor/package.json
================================================
{
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/web3.js": "^1.95.2"
  },
  "devDependencies": {
    "anchor-bankrun": "^0.4.0",
    "solana-bankrun": "^0.3.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/checking-accounts/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/checking-accounts/anchor/programs/anchor-program-example/Cargo.toml
================================================
[package]
name = "checking-accounts-anchor-program-example"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "anchor_program_example"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.0"


================================================
File: basics/checking-accounts/anchor/programs/anchor-program-example/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/checking-accounts/anchor/programs/anchor-program-example/src/lib.rs
================================================
#![allow(clippy::result_large_err)]

use anchor_lang::prelude::*;

declare_id!("ECWPhR3rJbaPfyNFgphnjxSEexbTArc7vxD8fnW6tgKw");

#[program]
pub mod anchor_program_example {
    use super::*;

    pub fn check_accounts(_ctx: Context<CheckingAccounts>) -> Result<()> {
        Ok(())
    }
}

// Account validation in Anchor is done using the types and constraints specified in the #[derive(Accounts)] structs
// This is a simple example and does not include all possible constraints and types
#[derive(Accounts)]
pub struct CheckingAccounts<'info> {
    payer: Signer<'info>, // checks account is signer

    /// CHECK: No checks performed, example of an unchecked account
    #[account(mut)]
    account_to_create: UncheckedAccount<'info>,
    /// CHECK: Perform owner check using constraint
    #[account(
        mut,
        owner = id()
    )]
    account_to_change: UncheckedAccount<'info>,
    system_program: Program<'info, System>, // checks account is executable, and is the system program
}


================================================
File: basics/checking-accounts/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml --bpf-out-dir=./program/target/so
solana program deploy ./program/target/so/program.so


================================================
File: basics/checking-accounts/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/program.so"
  },
  "dependencies": {
    "@solana/web3.js": "^1.47.3"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5",
    "solana-bankrun": "^0.3.0"
  }
}


================================================
File: basics/checking-accounts/native/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/checking-accounts/native/program/Cargo.toml
================================================
[package]
name = "checking-accounts-program"
version = "0.1.0"
edition = "2021"

[dependencies]
solana-program = "=1.18.17"

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: basics/checking-accounts/poseidon/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
checking_accounts = "8MWRHcfRvyUJpou8nD5oG7DmZ2Bmg99qBP8q5fZ5xJpg"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/checking-accounts/poseidon/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/checking-accounts/poseidon/package.json
================================================
{
  "license": "ISC",  
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.1"
  },
  "devDependencies": {
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "typescript": "^4.3.5",
    "prettier": "^2.6.2"
  }
}


================================================
File: basics/checking-accounts/poseidon/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/checking-accounts/poseidon/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn
app
migrations

================================================
File: basics/checking-accounts/poseidon/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: basics/checking-accounts/poseidon/programs/checking-accounts/Cargo.toml
================================================
[package]
name = "checking-accounts"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "checking_accounts"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.1"


================================================
File: basics/checking-accounts/poseidon/programs/checking-accounts/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/checking-accounts/poseidon/ts-programs/package.json
================================================
{
  "name": "ts-programs",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@solanaturbine/poseidon": "^0.0.5"
  }
}


================================================
File: basics/checking-accounts/steel/README.md
================================================
# Steel

**Steel** is a ...
        
## API
- [`Consts`](api/src/consts.rs) – Program constants.
- [`Error`](api/src/error.rs) – Custom program errors.
- [`Event`](api/src/event.rs) – Custom program events.
- [`Instruction`](api/src/instruction.rs) – Declared instructions.

## Instructions
- [`Hello`](program/src/hello.rs) – Hello ...

## State
- [`User`](api/src/state/user.rs) – User ...

## Tests

To run the test suit, use the Solana toolchain:
```
cargo test-sbf         
```


================================================
File: basics/checking-accounts/steel/Cargo.toml
================================================
[workspace]
resolver = "2"
members = ["api", "program"]

[workspace.package]
version = "0.1.0"
edition = "2021"
license = "Apache-2.0"
homepage = ""
documentation = ""
respository = ""
readme = "./README.md"
keywords = ["solana"]

[workspace.dependencies]
steel-api = { path = "./api", version = "0.1.0" }
bytemuck = "1.14"
num_enum = "0.7"
solana-program = "1.18"
steel = "1.3"
thiserror = "1.0"


================================================
File: basics/checking-accounts/steel/.gitignore
================================================
target
test-ledger


================================================
File: basics/checking-accounts/steel/api/Cargo.toml
================================================
[package]
name = "steel-api"
version = "0.1.0"
edition = "2021"

[dependencies]
bytemuck.workspace = true
num_enum.workspace = true
solana-program.workspace = true
steel.workspace = true
thiserror.workspace = true


================================================
File: basics/checking-accounts/steel/api/src/consts.rs
================================================
/// Seed of the account_to_change account PDA.
pub const ACCOUNT_TO_CHANGE: &[u8] = b"account_to_change";


================================================
File: basics/checking-accounts/steel/api/src/instruction.rs
================================================
use steel::*;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, TryFromPrimitive)]
pub enum SteelInstruction {
    CheckAccounts = 0,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct CheckAccounts {}

instruction!(SteelInstruction, CheckAccounts);


================================================
File: basics/checking-accounts/steel/api/src/lib.rs
================================================
pub mod consts;
pub mod instruction;
pub mod sdk;
pub mod state;

pub mod prelude {
    pub use crate::consts::*;
    pub use crate::instruction::*;
    pub use crate::sdk::*;
    pub use crate::state::*;
}

use steel::*;

// TODO Set program id
declare_id!("z7msBPQHDJjTvdQRoEcKyENgXDhSRYeHieN1ZMTqo35");


================================================
File: basics/checking-accounts/steel/api/src/sdk.rs
================================================
use steel::*;

use crate::prelude::*;

pub fn check_accounts(
    signer: Pubkey,
    account_to_create: Pubkey,
    account_to_change: Pubkey,
) -> Instruction {
    Instruction {
        program_id: crate::ID,
        accounts: vec![
            AccountMeta::new(signer, true),
            AccountMeta::new(account_to_create, false),
            AccountMeta::new(account_to_change, false),
            AccountMeta::new_readonly(system_program::ID, false),
        ],
        data: CheckAccounts {}.to_bytes(),
    }
}


================================================
File: basics/checking-accounts/steel/api/src/state/account_to_change.rs
================================================
use steel::*;

use super::SteelAccount;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq, Pod, Zeroable)]
pub struct AccountToChange {}

account!(SteelAccount, AccountToChange);


================================================
File: basics/checking-accounts/steel/api/src/state/mod.rs
================================================
mod account_to_change;

pub use account_to_change::*;

use steel::*;

use crate::consts::*;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, IntoPrimitive, TryFromPrimitive)]
pub enum SteelAccount {
    AccountToChange = 0,
}

/// Fetch PDA of the account_to_change account.
pub fn account_to_change_pda() -> (Pubkey, u8) {
    Pubkey::find_program_address(&[ACCOUNT_TO_CHANGE], &crate::id())
}


================================================
File: basics/checking-accounts/steel/program/Cargo.toml
================================================
[package]
name = "steel-program"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]

[dependencies]
steel-api.workspace = true
solana-program.workspace = true
steel.workspace = true

[dev-dependencies]
base64 = "0.21"
rand = "0.8.5"
solana-program-test = "1.18"
solana-sdk = "1.18"
tokio = { version = "1.35", features = ["full"] }


================================================
File: basics/checking-accounts/steel/program/src/lib.rs
================================================
mod check_accounts;

use check_accounts::*;

use steel::*;
use steel_api::prelude::*;

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    data: &[u8],
) -> ProgramResult {
    let (ix, data) = parse_instruction(&steel_api::ID, program_id, data)?;

    match ix {
        SteelInstruction::CheckAccounts => process_check_accounts(accounts, data)?,
    }

    Ok(())
}

entrypoint!(process_instruction);


================================================
File: basics/close-account/anchor/Anchor.toml
================================================
[features]
seeds = false
skip-lint = false

[programs.localnet]
close_account_program = "99TQtoDdQ5NS2v5Ppha93aqEmv3vV9VZVfHTP5rGST3c"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/close-account/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/close-account/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/web3.js": "^1.95.2"
  },
  "devDependencies": {
    "anchor-bankrun": "^0.4.0",
    "solana-bankrun": "^0.3.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/close-account/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/close-account/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: basics/close-account/anchor/programs/close-account/Cargo.toml
================================================
[package]
name = "close-account-program"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "close_account_program"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.0"


================================================
File: basics/close-account/anchor/programs/close-account/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/close-account/anchor/programs/close-account/src/lib.rs
================================================
#![allow(clippy::result_large_err)]

use anchor_lang::prelude::*;
mod instructions;
mod state;
use instructions::*;

declare_id!("99TQtoDdQ5NS2v5Ppha93aqEmv3vV9VZVfHTP5rGST3c");

#[program]
pub mod close_account_program {
    use super::*;

    pub fn create_user(ctx: Context<CreateUserContext>, name: String) -> Result<()> {
        create_user::create_user(ctx, name)
    }

    pub fn close_user(ctx: Context<CloseUserContext>) -> Result<()> {
        close_user::close_user(ctx)
    }
}


================================================
File: basics/close-account/anchor/programs/close-account/src/instructions/close_user.rs
================================================
use crate::state::*;
use anchor_lang::prelude::*;

#[derive(Accounts)]
pub struct CloseUserContext<'info> {
    #[account(mut)]
    pub user: Signer<'info>,

    #[account(
        mut,
        seeds = [
            b"USER",
            user.key().as_ref(),
        ],
        bump = user_account.bump,
        close = user, // close account and return lamports to user
    )]
    pub user_account: Account<'info, UserState>,
}

pub fn close_user(_ctx: Context<CloseUserContext>) -> Result<()> {
    Ok(())
}


================================================
File: basics/close-account/anchor/programs/close-account/src/instructions/create_user.rs
================================================
use crate::state::*;
use anchor_lang::prelude::*;

#[derive(Accounts)]
pub struct CreateUserContext<'info> {
    #[account(mut)]
    pub user: Signer<'info>,

    #[account(
        init,
        payer = user,
        space = UserState::INIT_SPACE,
        seeds = [
            b"USER",
            user.key().as_ref(),
        ],
        bump
    )]
    pub user_account: Account<'info, UserState>,
    pub system_program: Program<'info, System>,
}

pub fn create_user(ctx: Context<CreateUserContext>, name: String) -> Result<()> {
    *ctx.accounts.user_account = UserState {
        bump: ctx.bumps.user_account,
        user: ctx.accounts.user.key(),
        name,
    };
    Ok(())
}


================================================
File: basics/close-account/anchor/programs/close-account/src/instructions/mod.rs
================================================
pub mod close_user;
pub mod create_user;

pub use close_user::*;
pub use create_user::*;


================================================
File: basics/close-account/anchor/programs/close-account/src/state/mod.rs
================================================
pub mod user_state;
pub use user_state::*;


================================================
File: basics/close-account/anchor/programs/close-account/src/state/user_state.rs
================================================
use anchor_lang::prelude::*;

#[account]
#[derive(InitSpace)] // automatically calculate the space required for the struct
pub struct UserState {
    pub bump: u8,     // 1 byte
    pub user: Pubkey, // 32 bytes
    #[max_len(50)] // set a max length for the string
    pub name: String, // 4 bytes + 50 bytes
}


================================================
File: basics/close-account/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml --bpf-out-dir=./program/target/so
solana program deploy ./program/target/so/program.so


================================================
File: basics/close-account/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tests/tsconfig.test.json -t 1000000 ./tests/close-account.test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/program.so"
  },
  "dependencies": {
    "@solana/web3.js": "^1.35"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/close-account/native/program/Cargo.toml
================================================
[package]
name = "close-account-native-program"
version = "0.1.0"
edition = "2021"

[dependencies]
borsh = "0.9.3"
borsh-derive = "0.9.1"
solana-program = "=1.18.17"

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: basics/close-account/native/program/src/lib.rs
================================================
pub mod instructions;
pub mod processor;
pub mod state;

use {crate::processor::process_instruction, solana_program::entrypoint};

entrypoint!(process_instruction);


================================================
File: basics/close-account/native/program/src/processor.rs
================================================
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{account_info::AccountInfo, entrypoint::ProgramResult, pubkey::Pubkey};

use crate::instructions::{close_user::close_user, create_user::create_user};
use crate::state::user::User;

#[derive(BorshSerialize, BorshDeserialize)]
pub enum MyInstruction {
    CreateUser(User),
    CloseUser,
}

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    input: &[u8],
) -> ProgramResult {
    let instruction = MyInstruction::try_from_slice(input)?;
    match instruction {
        MyInstruction::CreateUser(data) => create_user(program_id, accounts, data),
        MyInstruction::CloseUser => close_user(accounts),
    }
}


================================================
File: basics/close-account/native/program/src/instructions/close_user.rs
================================================
use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint::ProgramResult,
    rent::Rent,
    sysvar::Sysvar,
};

pub fn close_user(accounts: &[AccountInfo]) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    let target_account = next_account_info(accounts_iter)?;
    let payer = next_account_info(accounts_iter)?;
    let system_program = next_account_info(accounts_iter)?;

    let account_span = 0usize;
    let lamports_required = (Rent::get()?).minimum_balance(account_span);

    let diff = target_account.lamports() - lamports_required;

    // Send the rent back to the payer
    **target_account.lamports.borrow_mut() -= diff;
    **payer.lamports.borrow_mut() += diff;

    // Realloc the account to zero
    target_account.realloc(account_span, true)?;

    // Assign the account to the System Program
    target_account.assign(system_program.key);

    Ok(())
}


================================================
File: basics/close-account/native/program/src/instructions/mod.rs
================================================
pub mod close_user;
pub mod create_user;


================================================
File: basics/close-account/native/program/src/state/mod.rs
================================================
pub mod user;


================================================
File: basics/close-account/native/program/src/state/user.rs
================================================
use borsh::{BorshDeserialize, BorshSerialize};

#[derive(BorshDeserialize, BorshSerialize)]
pub struct User {
    pub name: String,
}

impl User {
    pub const SEED_PREFIX: &'static str = "USER";
}


================================================
File: basics/close-account/native/tests/tsconfig.test.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/close-account/native/ts/index.ts
================================================
export * from './instructions';
export * from './state';


================================================
File: basics/close-account/native/ts/instructions/index.ts
================================================
export * from './create';
export * from './close';

export enum MyInstruction {
  CreateUser = 0,
  CloseUser = 1,
}


================================================
File: basics/close-account/native/ts/state/index.ts
================================================
import { Buffer } from 'node:buffer';
import * as borsh from 'borsh';

export class User {
  name: string;

  constructor(props: {
    name: string;
  }) {
    this.name = props.name;
  }

  toBase58() {
    return borsh.serialize(UserSchema, this).toString();
  }

  toBuffer() {
    return Buffer.from(borsh.serialize(UserSchema, this));
  }

  static fromBuffer(buffer: Buffer) {
    return borsh.deserialize(UserSchema, User, buffer);
  }
}

export const UserSchema = new Map([
  [
    User,
    {
      kind: 'struct',
      fields: [['name', 'string']],
    },
  ],
]);


================================================
File: basics/close-account/poseidon/README.md
================================================
# Destroy an Account 
> **_NOTE_:_** If you haven't installed poseidon yet, follow the installation steps [here](https://turbin3.github.io/poseidon/installation.html)
- We're writing our TypeScript program code in [/ts-programs](./ts-programs/)
- Once TypeScript program is completed, generate a program id and replace the `PROGRAM_ID` with the actual one. To generate a program id, run:
```
anchor keys list
# You'll get something similar, but it will definitely be different
close-account: At2EEHZ4zq2roeR5Cba6dryYEsmsHz7MKt9tjUCpCng1
```
- To convert your TypeScript Solana program to Anchor program, run
```
poseidon -i ./ts-programs/closeAccount.ts -o programs/close-account/src/lib.rs
```

================================================
File: basics/close-account/poseidon/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
close_account = "4So9Jbx672BRL9RvfB8Sux2NMVX5QJRnhmdWyij3kkFg"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/close-account/poseidon/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/close-account/poseidon/package.json
================================================
{
  "license": "ISC",
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.1"
  },
  "devDependencies": {
    "@biomejs/biome": "^1.9.4",
    "@types/bn.js": "^5.1.6",
    "@types/chai": "^4.3.20",
    "@types/mocha": "^9.0.0",
    "chai": "^4.5.0",
    "mocha": "^9.0.3",
    "prettier": "^2.8.8",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/close-account/poseidon/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/close-account/poseidon/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: basics/close-account/poseidon/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: basics/close-account/poseidon/programs/close-account/Cargo.toml
================================================
[package]
name = "close-account"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "close_account"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.1"


================================================
File: basics/close-account/poseidon/programs/close-account/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/close-account/poseidon/programs/close-account/src/lib.rs
================================================
use anchor_lang::prelude::*;
declare_id!("4So9Jbx672BRL9RvfB8Sux2NMVX5QJRnhmdWyij3kkFg");
#[program]
pub mod close_account {
    use super::*;
    pub fn initalize(ctx: Context<InitalizeContext>, data: u8) -> Result<()> {
        ctx.accounts.state.some_data = data;
        Ok(())
    }
    pub fn close(ctx: Context<CloseContext>) -> Result<()> {
        Ok(())
    }
}
#[derive(Accounts)]
pub struct InitalizeContext<'info> {
    #[account(mut)]
    pub user: Signer<'info>,
    #[account(init, payer = user, space = 9, seeds = [b"account"], bump)]
    pub state: Account<'info, AccountState>,
    pub system_program: Program<'info, System>,
}
#[derive(Accounts)]
pub struct CloseContext<'info> {
    #[account(mut)]
    pub user: Signer<'info>,
    #[account(mut, seeds = [b"account"], bump, close = user)]
    pub state: Account<'info, AccountState>,
    pub system_program: Program<'info, System>,
}
#[account]
pub struct AccountState {
    pub some_data: u8,
}


================================================
File: basics/close-account/poseidon/ts-programs/closeAccounts.ts
================================================
import { Account, Pubkey, Result, Signer, u8 } from '@solanaturbine/poseidon';

export default class CloseAccount {
  static PROGRAM_ID = new Pubkey('4So9Jbx672BRL9RvfB8Sux2NMVX5QJRnhmdWyij3kkFg');

  initalize(state: AccountState, user: Signer, data: u8): Result {
    state.derive(['account']).init();
    state.someData = data;
  }
  close(state: AccountState, user: Signer): Result {
    state.derive(['account']).close(user);
  }
}

export interface AccountState extends Account {
  someData: u8;
}


================================================
File: basics/close-account/poseidon/ts-programs/package.json
================================================
{
  "name": "ts-programs",
  "version": "1.0.0",
  "main": "index.js",
  "license": "MIT",
  "dependencies": {
    "@solanaturbine/poseidon": "^0.0.4"
  }
}


================================================
File: basics/close-account/poseidon/ts-programs/pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@solanaturbine/poseidon':
        specifier: ^0.0.4
        version: 0.0.4

packages:

  '@solanaturbine/poseidon@0.0.4':
    resolution: {integrity: sha512-VNQRtqobzBT+Wkh8fdPb0WVt12aIlgRJuGDxptclkphXi5w+VHUfMPcBshWSFPZg1nheXYgJABwvffYcyirw1g==}

snapshots:

  '@solanaturbine/poseidon@0.0.4': {}


================================================
File: basics/close-account/steel/README.md
================================================
# CloseAccount

**CloseAccount** is a ...
        
## API
- [`Consts`](api/src/consts.rs) – Program constants.
- [`Error`](api/src/error.rs) – Custom program errors.
- [`Event`](api/src/event.rs) – Custom program events.
- [`Instruction`](api/src/instruction.rs) – Declared instructions.

## Instructions
- [`Hello`](program/src/hello.rs) – Hello ...

## State
- [`User`](api/src/state/user.rs) – User ...

## Tests

To run the test suit, use the Solana toolchain:
```
cargo test-sbf         
```


================================================
File: basics/close-account/steel/Cargo.toml
================================================
[workspace]
members = ["api", "program"]
resolver = "2"

[workspace.package]
version = "0.1.0"
edition = "2021"
license = "Apache-2.0"
homepage = "https://github.com/solana-developers/program-examples"
documentation = "https://github.com/solana-developers/program-examples"
respository = "https://github.com/solana-developers/program-examples"
readme = "./README.md"
keywords = ["solana"]

[workspace.dependencies]
close-account-api = { path = "./api", version = "0.1.0" }
bytemuck = "1.14"
num_enum = "0.7"
solana-program = "1.18"
steel = "2.1.0"
thiserror = "1.0"


================================================
File: basics/close-account/steel/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml --bpf-out-dir=./program/target/so
solana program deploy ./program/target/so/program.so


================================================
File: basics/close-account/steel/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tests/tsconfig.test.json -t 1000000 ./tests/close-account.test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./target/so",
    "deploy": "solana program deploy ./target/so/close_account_program.so"
  },
  "dependencies": {
    "@coral-xyz/borsh": "^0.30.1",
    "@solana/web3.js": "^1.35"
  },
  "devDependencies": {
    "solana-bankrun": "^0.4.0",
    "typescript": "^5.6.3",
    "ts-mocha": "^10.0.0"
  },
  "packageManager": "pnpm@9.9.0+sha512.60c18acd138bff695d339be6ad13f7e936eea6745660d4cc4a776d5247c540d0edee1a563695c183a66eb917ef88f2b4feb1fc25f32a7adcadc7aaf3438e99c1"
}


================================================
File: basics/close-account/steel/.gitignore
================================================
target
test-ledger


================================================
File: basics/close-account/steel/api/Cargo.toml
================================================
[package]
name = "close-account-api"
version = "0.1.0"
edition = "2021"

[dependencies]
bytemuck.workspace = true
jzon = "0.12.5"
num_enum.workspace = true
solana-program.workspace = true
steel.workspace = true
thiserror.workspace = true


================================================
File: basics/close-account/steel/api/src/error.rs
================================================
use steel::*;

/// A [Result] type representing `Result<T, CloseAccountError>`
pub type CloseAccountResult<T> = Result<T, CloseAccountError>;

/// Error handling enum for this create
#[derive(Debug, Error, Clone, Copy, PartialEq, Eq, IntoPrimitive)]
#[repr(u32)]
pub enum CloseAccountError {
    /// A name can only be 64 bytes in length when converted to bytes
    #[error("Invalid Name Length. The maximum length of the string is 64 bytes.")]
    MaxNameLengthExceeded = 0,
    /// Only UTF-8 String types are supported
    #[error("Only UTF-8 String encoding is supported")]
    OnlyUtf8IsSupported = 1,
}

error!(CloseAccountError);


================================================
File: basics/close-account/steel/api/src/instruction.rs
================================================
use steel::*;

/// Used in generating the discriminats for instructions
#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, TryFromPrimitive)]
pub enum MyInstruction {
    /// Create account discriminant represented by `0`
    CreateAccount = 0,
    /// Close account discriminant represented by `1`
    CloseAccount = 1,
}

/// Create account struct with the name
/// as an array of 64 bytes
#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct CreateAccount(pub [u8; 64]);

/// UsedClose Account
#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct CloseAccount;

instruction!(MyInstruction, CreateAccount);
instruction!(MyInstruction, CloseAccount);


================================================
File: basics/close-account/steel/api/src/lib.rs
================================================
#![forbid(unsafe_code)]

pub mod error;
pub mod instruction;
pub mod sdk;
pub mod state;

pub mod prelude {
    pub use crate::error::*;
    pub use crate::instruction::*;
    pub use crate::sdk::*;
    pub use crate::state::*;
}

use steel::*;

// Set program id
declare_id!("z7msBPQHDJjTvdQRoEcKyENgXDhSRYeHieN1ZMTqo35");


================================================
File: basics/close-account/steel/api/src/sdk.rs
================================================
use steel::*;

use crate::prelude::*;

/// Create an PDA and store a String in it
pub fn create_account(signer: Pubkey, user: CreateAccount) -> Instruction {
    Instruction {
        program_id: crate::ID,
        accounts: vec![
            AccountMeta::new(signer, true),
            AccountMeta::new(User::pda(signer).0, false),
            AccountMeta::new_readonly(system_program::ID, false),
        ],
        data: user.to_bytes(),
    }
}

/// Creates an instruction to close the account,
/// in our case the PDA. The PDA address is derived from
/// the `payer` public key
pub fn close_account(signer: Pubkey) -> Instruction {
    Instruction {
        program_id: crate::ID,
        accounts: vec![
            AccountMeta::new(signer, true),
            AccountMeta::new(User::pda(signer).0, false),
            AccountMeta::new_readonly(system_program::ID, false),
        ],
        data: CloseAccount.to_bytes(),
    }
}


================================================
File: basics/close-account/steel/api/src/state/mod.rs
================================================
mod user;
pub use user::*;


================================================
File: basics/close-account/steel/program/Cargo.toml
================================================
[package]
name = "close-account-program"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]

[dependencies]
close-account-api.workspace = true
solana-program.workspace = true
steel.workspace = true

[dev-dependencies]
bs64 = "0.1.2"
rand = "0.8.5"
solana-program-test = "1.18"
solana-sdk = "1.18"
tokio = { version = "1.35", features = ["full"] }


================================================
File: basics/close-account/steel/program/src/close_user.rs
================================================
use solana_program::{account_info::AccountInfo, entrypoint::ProgramResult};
use steel::{ProgramError, *};

pub fn close_user(accounts: &[AccountInfo]) -> ProgramResult {
    let [payer, target_account, _] = accounts else {
        return Err(ProgramError::NotEnoughAccountKeys);
    };

    payer.is_signer()?;

    steel::close_account(target_account, payer)
}


================================================
File: basics/close-account/steel/program/src/lib.rs
================================================
use close_account_api::prelude::*;
use steel::*;

mod create_user;
pub(crate) use create_user::*;

mod close_user;
pub(crate) use close_user::*;

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    data: &[u8],
) -> ProgramResult {
    let (ix, data) = parse_instruction(&close_account_api::ID, program_id, data)?;

    match ix {
        MyInstruction::CreateAccount => create_user(accounts, data)?,
        MyInstruction::CloseAccount => close_user(accounts)?,
    }

    Ok(())
}

entrypoint!(process_instruction);


================================================
File: basics/close-account/steel/tests/tsconfig.test.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/close-account/steel/ts/index.ts
================================================
export * from './instructions';


================================================
File: basics/close-account/steel/ts/instructions/index.ts
================================================
export * from './create';
export * from './close';

import * as borsh from '@coral-xyz/borsh';

export enum MyInstruction {
  CreateUser = 0,
  CloseUser = 1,
}

export const closeAccountSchema = borsh.rustEnum([borsh.struct([borsh.array(borsh.u8(), 64, 'name')], 'CreateUser'), borsh.struct([], 'CloseUser')]);


================================================
File: basics/counter/README.md
================================================
# Counter

This example program allows anyone to create a counter and increment it.

Any counter can be incremented by any key.

## Note: Seahorse

Seahorse currently does not allow the program to initialize anchor 
accounts unless they are PDAs. 

Seahorse example only allows users to increment the counter that corresponds to their public key.




================================================
File: basics/counter/anchor/README.md
================================================
# Anchor Counter

Anchor enforces init constraints that enforces good programming paradigms.

This means this program has an additional initialization instruction for `Counter`s that the Solana native program does not.

================================================
File: basics/counter/anchor/Anchor.toml
================================================
[features]
seeds = false
skip-lint = false

[programs.localnet]
counter_anchor = "BmDHboaj1kBUoinJKKSRqKfMeRKJqQqEbUj1VgzeQe4A"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/counter/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/counter/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/web3.js": "^1.95.2"
  },
  "devDependencies": {
    "anchor-bankrun": "^0.4.0",
    "solana-bankrun": "^0.3.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/counter/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/counter/anchor/.gitignore
================================================

.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger


================================================
File: basics/counter/anchor/.prettierignore
================================================

.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: basics/counter/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: basics/counter/anchor/programs/counter_anchor/Cargo.toml
================================================
[package]
name = "counter_anchor"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "counter_anchor"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang =  "0.30.0"


================================================
File: basics/counter/anchor/programs/counter_anchor/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/counter/anchor/programs/counter_anchor/src/lib.rs
================================================
#![allow(clippy::result_large_err)]

use anchor_lang::prelude::*;

declare_id!("BmDHboaj1kBUoinJKKSRqKfMeRKJqQqEbUj1VgzeQe4A");

#[program]
pub mod counter_anchor {
    use super::*;

    pub fn initialize_counter(_ctx: Context<InitializeCounter>) -> Result<()> {
        Ok(())
    }

    pub fn increment(ctx: Context<Increment>) -> Result<()> {
        ctx.accounts.counter.count = ctx.accounts.counter.count.checked_add(1).unwrap();
        Ok(())
    }
}

#[derive(Accounts)]
pub struct InitializeCounter<'info> {
    #[account(mut)]
    pub payer: Signer<'info>,

    #[account(
        init,
        space = 8 + Counter::INIT_SPACE,
        payer = payer
    )]
    pub counter: Account<'info, Counter>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct Increment<'info> {
    #[account(mut)]
    pub counter: Account<'info, Counter>,
}

#[account]
#[derive(InitSpace)]
pub struct Counter {
    count: u64,
}


================================================
File: basics/counter/mpl-stack/README.md
================================================
# Counter: MPL Stack

This example program is written using Solana native using MPL stack.


## Setup

1. Build the program with `cargo build-sbf`
2. Compile the idl with `shank build`
3. Build the typescript SDK with `yarn solita`
 - Temporarily, we have to modify line 58 in ts/generated/accounts/Counter.ts
 to `const accountInfo = await connection.getAccountInfo(address, { commitment: "confirmed" });` in order to allow the tests to pass. In the future versions of Solita, this will be fixed.
4. Run tests with `yarn test`


================================================
File: basics/counter/mpl-stack/Cargo.toml
================================================
[package]
name = "counter-mpl-stack"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]

[features]
no-entrypoint = []
cpi = ["no-entrypoint"]
default = []

[dependencies]
borsh = "0.9"
shank = "0.0.8"
solana-program = "=1.18.17"


================================================
File: basics/counter/mpl-stack/jest.config.js
================================================
module.exports = {
  preset: 'ts-jest/presets/default',
  testEnvironment: 'node',
  testTimeout: 100000,
  resolver: 'ts-jest-resolver',
};


================================================
File: basics/counter/mpl-stack/package.json
================================================
{
  "name": "counter-mpl-stack",
  "version": "0.1.0",
  "description": "Counter program written using MPL tooling",
  "main": "index.js",
  "author": "ngundotra",
  "license": "Apache-2.0",
  "private": false,
  "scripts": {
    "start-validator": "solana-test-validator --reset --quiet --bpf-program Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS ./target/deploy/counter_solana_native.so",
    "run-tests": "jest tests --detectOpenHandles",
    "test": "start-server-and-test start-validator http://localhost:8899/health run-tests"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.1",
    "@types/jest": "^29.0.0",
    "chai": "^4.3.6",
    "jest": "^29.0.2",
    "start-server-and-test": "^1.14.0",
    "ts-jest": "^28.0.8",
    "ts-jest-resolver": "^2.0.0",
    "ts-node": "^10.9.1",
    "typescript": "^4.8.2"
  },
  "dependencies": {
    "@metaplex-foundation/beet": "^0.6.1",
    "@metaplex-foundation/solita": "^0.15.2",
    "@solana/web3.js": "^1.56.2"
  }
}


================================================
File: basics/counter/mpl-stack/.solitarc.js
================================================
// @ts-check
const path = require('node:path');
const programDir = path.join(__dirname);
const idlDir = path.join(__dirname, 'idl');
const sdkDir = path.join(__dirname, 'ts', 'generated');
const binaryInstallDir = path.join(__dirname, 'target', 'solita');

module.exports = {
  idlGenerator: 'shank',
  programName: 'counter_mpl_stack',
  programId: 'Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS',
  idlDir,
  sdkDir,
  binaryInstallDir,
  programDir,
};


================================================
File: basics/counter/mpl-stack/idl/counter_mpl_stack.json
================================================
{
  "version": "0.1.0",
  "name": "counter_mpl_stack",
  "instructions": [
    {
      "name": "Increment",
      "accounts": [
        {
          "name": "counter",
          "isMut": true,
          "isSigner": false,
          "desc": "Counter account to increment"
        }
      ],
      "args": [],
      "discriminant": {
        "type": "u8",
        "value": 0
      }
    }
  ],
  "accounts": [
    {
      "name": "Counter",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "count",
            "type": "u64"
          }
        ]
      }
    }
  ],
  "metadata": {
    "origin": "shank",
    "address": "Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS",
    "binaryVersion": "0.0.8",
    "libVersion": "0.0.8"
  }
}


================================================
File: basics/counter/mpl-stack/idl/counter_solana_native.json
================================================
{
  "version": "0.1.0",
  "name": "counter_solana_native",
  "instructions": [
    {
      "name": "Increment",
      "accounts": [],
      "args": [],
      "discriminant": {
        "type": "u8",
        "value": 0
      }
    }
  ],
  "accounts": [
    {
      "name": "Counter",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "count",
            "type": "u64"
          }
        ]
      }
    }
  ],
  "metadata": {
    "origin": "shank",
    "address": "Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS"
  }
}


================================================
File: basics/counter/mpl-stack/src/state.rs
================================================
use borsh::{BorshDeserialize, BorshSerialize};
use shank::ShankAccount;

#[derive(ShankAccount, BorshSerialize, BorshDeserialize, Debug, Clone)]
pub struct Counter {
    pub count: u64,
}


================================================
File: basics/counter/mpl-stack/ts/index.ts
================================================
export * from './generated';


================================================
File: basics/counter/mpl-stack/ts/generated/index.ts
================================================
import { PublicKey } from '@solana/web3.js';
export * from './accounts';
export * from './instructions';

/**
 * Program address
 *
 * @category constants
 * @category generated
 */
export const PROGRAM_ADDRESS = 'Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS';

/**
 * Program public key
 *
 * @category constants
 * @category generated
 */
export const PROGRAM_ID = new PublicKey(PROGRAM_ADDRESS);


================================================
File: basics/counter/mpl-stack/ts/generated/accounts/index.ts
================================================
export * from './Counter';

import { Counter } from './Counter';

export const accountProviders = { Counter };


================================================
File: basics/counter/mpl-stack/ts/generated/instructions/index.ts
================================================
export * from './Increment';


================================================
File: basics/counter/native/README.md
================================================
# Counter: Solana Native

This example program is written in Solana using only the Solana toolsuite.

## Setup

1. Build the program with `cargo build-sbf`
2. Run tests + local validator with `yarn test`

## Debugging

1. Start test validator with `yarn start-validator`
2. Start listening to program logs with `solana config set -ul && solana logs`
3. Run tests with `yarn run-tests`


================================================
File: basics/counter/native/package.json
================================================
{
  "name": "counter-solana-native",
  "version": "0.1.0",
  "description": "Counter program written using only Solana tooling",
  "main": "index.js",
  "author": "ngundotra",
  "license": "Apache-2.0",
  "private": false,
  "scripts": {
    "test": "pnpm ts-mocha -p ./tests/tsconfig.test.json -t 1000000 ./tests/counter.test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/program.so"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  },
  "dependencies": {
    "@solana/web3.js": "^1.91.4"
  }
}


================================================
File: basics/counter/native/program/Cargo.toml
================================================
[package]
name = "counter-solana-native"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]

[features]
no-entrypoint = []
cpi = ["no-entrypoint"]
default = []

[dependencies]
borsh = "0.9.3"
solana-program = "=1.18.17"


================================================
File: basics/counter/native/program/src/state.rs
================================================
use borsh::{BorshDeserialize, BorshSerialize};

#[derive(BorshSerialize, BorshDeserialize, Debug, Clone)]
pub struct Counter {
    pub count: u64,
}


================================================
File: basics/counter/native/tests/tsconfig.test.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/counter/native/ts/index.ts
================================================
import { PublicKey } from '@solana/web3.js';
export * from './instructions';
export * from './accounts';

export const PROGRAM_ID = new PublicKey('Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS');


================================================
File: basics/counter/native/ts/accounts/counter.ts
================================================
import BN from 'bn.js';

export type Counter = {
  count: BN;
};

export const COUNTER_ACCOUNT_SIZE = 8;

export function deserializeCounterAccount(data: Buffer): Counter {
  if (data.byteLength !== 8) {
    throw Error('Need exactly 8 bytes to deserialize counter');
  }

  return {
    count: new BN(data, 'le'),
  };
}


================================================
File: basics/counter/native/ts/accounts/index.ts
================================================
export * from './counter';


================================================
File: basics/counter/native/ts/instructions/createIncrementInstruction.ts
================================================
import { type PublicKey, TransactionInstruction } from '@solana/web3.js';
import { PROGRAM_ID } from '../';

export type IncrementInstructionAccounts = {
  counter: PublicKey;
};

export function createIncrementInstruction(accounts: IncrementInstructionAccounts): TransactionInstruction {
  return new TransactionInstruction({
    programId: PROGRAM_ID,
    keys: [
      {
        pubkey: accounts.counter,
        isSigner: false,
        isWritable: true,
      },
    ],
    data: Buffer.from([0x0]),
  });
}


================================================
File: basics/counter/native/ts/instructions/index.ts
================================================
export * from './createIncrementInstruction';


================================================
File: basics/counter/poseidon/counter-program/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
counter_program = "DMATyR7jooijeJ2aJYWiyYPf3eoUouumaaLw1JbG3TYF"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/counter/poseidon/counter-program/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/counter/poseidon/counter-program/package.json
================================================
{
  "license": "ISC",
  "scripts": {
    "test": "pnpm ts-mocha -p ./tests/tsconfig.test.json -t 1000000 ./tests/counter-program.test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./programs/counter-program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./programs/counter-program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/program.so",
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.1",
    "anchor-bankrun": "^0.5.0",
    "solana-bankrun": "^0.4.0"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/counter/poseidon/counter-program/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/counter/poseidon/counter-program/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: basics/counter/poseidon/counter-program/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: basics/counter/poseidon/counter-program/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require("@coral-xyz/anchor");

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: basics/counter/poseidon/counter-program/programs/counter-program/Cargo.toml
================================================
[package]
name = "counter-program"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "counter_program"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.1"


================================================
File: basics/counter/poseidon/counter-program/programs/counter-program/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/counter/poseidon/counter-program/programs/counter-program/src/lib.rs
================================================
use anchor_lang::prelude::*;
declare_id!("DMATyR7jooijeJ2aJYWiyYPf3eoUouumaaLw1JbG3TYF");
#[program]
pub mod counter_program {
    use super::*;
    pub fn initialize(ctx: Context<InitializeContext>) -> Result<()> {
        ctx.accounts.state.count = 0;
        Ok(())
    }
    pub fn increment(ctx: Context<IncrementContext>) -> Result<()> {
        ctx.accounts.state.count = ctx.accounts.state.count + 1;
        Ok(())
    }
}
#[derive(Accounts)]
pub struct InitializeContext<'info> {
    #[account(mut)]
    pub user: Signer<'info>,
    #[account(init, payer = user, space = 17, seeds = [b"count"], bump)]
    pub state: Account<'info, CounterState>,
    pub system_program: Program<'info, System>,
}
#[derive(Accounts)]
pub struct IncrementContext<'info> {
    #[account(mut, seeds = [b"count"], bump)]
    pub state: Account<'info, CounterState>,
    pub system_program: Program<'info, System>,
}
#[account]
pub struct CounterState {
    pub count: u64,
    pub bump: u8,
}


================================================
File: basics/counter/poseidon/counter-program/tests/tsconfig.test.json
================================================
{
    "compilerOptions": {
      "types": ["mocha", "chai"],
      "typeRoots": ["./node_modules/@types"],
      "lib": ["es2015"],
      "module": "commonjs",
      "target": "es6",
      "esModuleInterop": true
    }
  }
  

================================================
File: basics/counter/poseidon/counter-program/ts-programs/package.json
================================================
{
  "name": "ts-programs",
  "version": "1.0.0",
  "main": "index.js",
  "license": "MIT",
  "dependencies": {
    "@solanaturbine/poseidon": "^0.0.4"
  }
}


================================================
File: basics/counter/poseidon/counter-program/ts-programs/pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@solanaturbine/poseidon':
        specifier: ^0.0.4
        version: 0.0.4

packages:

  '@solanaturbine/poseidon@0.0.4':
    resolution: {integrity: sha512-VNQRtqobzBT+Wkh8fdPb0WVt12aIlgRJuGDxptclkphXi5w+VHUfMPcBshWSFPZg1nheXYgJABwvffYcyirw1g==}

snapshots:

  '@solanaturbine/poseidon@0.0.4': {}


================================================
File: basics/counter/seahorse/README.md
================================================
# counter_seahorse

This project was created by Seahorse 0.1.6.

To get started, just add your code to **programs_py/counter_seahorse.py** and run `seahorse build`.


================================================
File: basics/counter/seahorse/Anchor.toml
================================================
[features]
seeds = true
skip-lint = false
[programs.localnet]
counter_seahorse = "Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/counter/seahorse/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/counter/seahorse/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0"
  },
  "devDependencies": {
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "typescript": "^4.3.5",
    "prettier": "^2.6.2"
  }
}


================================================
File: basics/counter/seahorse/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/counter/seahorse/.gitignore
================================================

.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger


================================================
File: basics/counter/seahorse/.prettierignore
================================================

.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: basics/counter/seahorse/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: basics/counter/seahorse/programs/counter_seahorse/Cargo.toml
================================================
[package]
name = "counter_seahorse"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "counter_seahorse"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.25.0"
anchor-spl = "0.25.0"


================================================
File: basics/counter/seahorse/programs/counter_seahorse/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/counter/seahorse/programs_py/counter_seahorse.py
================================================
# counter_seahorse
# Built with Seahorse v0.1.6

from seahorse.prelude import *

declare_id('Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS')


class Counter(Account):
    count: u64


@instruction
def initialize_counter(counter: Empty[Counter], payer: Signer, seed: u8):
    counter.init(
        payer=payer,
        seeds=[seed]
    )


@instruction
def increment(counter: Counter):
    counter.count += 1


================================================
File: basics/counter/steel/README.md
================================================
# Counter

See the [Counter's README](../README.md) for more information.

## Building
 
```sh
cargo build-sbf

```
## Tests

This project includes both:
- Rust tests: [`program/tests`](/program/tests) directory.
- Node.js tests using [Bankrun](https://kevinheavey.github.io/solana-bankrun/): [`tests`](/tests) directory.

```sh
# rust tests
cargo test-sbf 

# node tests
pnpm build-and-test # this will also build the program
#or 
pnpm test # if you have already built the program
```


================================================
File: basics/counter/steel/Cargo.toml
================================================
[workspace]
resolver = "2"
members = ["api", "program"]

[workspace.package]
version = "0.1.0"
edition = "2021"
license = "Apache-2.0"
homepage = ""
documentation = ""
respository = ""
readme = "./README.md"
keywords = ["solana"]

[workspace.dependencies]
counter-api = { path = "./api", version = "0.1.0" }
bytemuck = "1.14"
num_enum = "0.7"
solana-program = "1.18"
steel = "2.1.0"
thiserror = "1.0"


================================================
File: basics/counter/steel/package.json
================================================
{
  "name": "counter-program",
  "version": "1.0.0",
  "description": "Counter program for Solana made with the Steel framework",
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/*.test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/counter_program.so"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@solana/web3.js": "^1.95.4"
  },
  "devDependencies": {
    "@types/chai": "^4.3.7",
    "@types/mocha": "10.0.9",
    "@types/node": "^22.7.4",
    "borsh": "^2.0.0",
    "chai": "^4.3.7",
    "mocha": "10.7.3",
    "solana-bankrun": "0.4.0",
    "ts-mocha": "^10.0.0",
    "typescript": "5.6.3"
  }
}


================================================
File: basics/counter/steel/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai", "node"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/counter/steel/.gitignore
================================================
target
test-ledger


================================================
File: basics/counter/steel/api/Cargo.toml
================================================
[package]
name = "counter-api"
version = "0.1.0"
edition = "2021"

[dependencies]
bytemuck.workspace = true
num_enum.workspace = true
solana-program.workspace = true
steel.workspace = true
thiserror.workspace = true


================================================
File: basics/counter/steel/api/src/consts.rs
================================================
/// Seed of the counter account PDA.
pub const COUNTER_SEED: &[u8] = b"counter";


================================================
File: basics/counter/steel/api/src/instruction.rs
================================================
use steel::*;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, TryFromPrimitive)]
pub enum CounterInstruction {
    Initialize = 0,
    Increment = 1,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct Initialize {}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct Increment {
    pub amount: [u8; 8],
}

instruction!(CounterInstruction, Initialize);
instruction!(CounterInstruction, Increment);


================================================
File: basics/counter/steel/api/src/lib.rs
================================================
pub mod consts;
pub mod instruction;
pub mod sdk;
pub mod state;

pub mod prelude {
    pub use crate::consts::*;
    pub use crate::instruction::*;
    pub use crate::sdk::*;
    pub use crate::state::*;
}

use steel::*;

// TODO Set program id
declare_id!("z7msBPQHDJjTvdQRoEcKyENgXDhSRYeHieN1ZMTqo35");


================================================
File: basics/counter/steel/api/src/sdk.rs
================================================
use steel::*;

use crate::prelude::*;

pub fn initialize(signer: Pubkey) -> Instruction {
    Instruction {
        program_id: crate::ID,
        accounts: vec![
            AccountMeta::new(signer, true),
            AccountMeta::new(counter_pda().0, false),
            AccountMeta::new_readonly(system_program::ID, false),
        ],
        data: Initialize {}.to_bytes(),
    }
}

pub fn increment(signer: Pubkey, amount: u64) -> Instruction {
    Instruction {
        program_id: crate::ID,
        accounts: vec![
            AccountMeta::new(signer, true),
            AccountMeta::new(counter_pda().0, false),
        ],
        data: Increment {
            amount: amount.to_le_bytes(),
        }
        .to_bytes(),
    }
}


================================================
File: basics/counter/steel/api/src/state.rs
================================================
use steel::*;

use crate::consts::COUNTER_SEED;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, IntoPrimitive, TryFromPrimitive)]
pub enum CounterAccount {
    Counter = 0,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq, Pod, Zeroable)]
pub struct Counter {
    pub value: u64,
}

account!(CounterAccount, Counter);

/// Fetch PDA of the counter account.
pub fn counter_pda() -> (Pubkey, u8) {
    Pubkey::find_program_address(&[COUNTER_SEED], &crate::id())
}


================================================
File: basics/counter/steel/program/Cargo.toml
================================================
[package]
name = "counter-program"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]

[dependencies]
counter-api.workspace = true
solana-program.workspace = true
steel.workspace = true

[dev-dependencies]
bs64 = "0.1.2"
rand = "0.8.5"
solana-program-test = "1.18"
solana-sdk = "1.18"
tokio = { version = "1.35", features = ["full"] }


================================================
File: basics/counter/steel/program/src/increment.rs
================================================
use counter_api::prelude::*;
use steel::*;

use solana_program::msg;

pub fn process_increment(accounts: &[AccountInfo<'_>], data: &[u8]) -> ProgramResult {
    msg!("Processing Increment instruction");

    // Parse args.
    let args = Increment::try_from_bytes(data)?;
    let amount = u64::from_le_bytes(args.amount);
    msg!("Parsed amount: {}", amount);

    // Load accounts.
    let [signer_info, counter_info] = accounts else {
        return Err(ProgramError::NotEnoughAccountKeys);
    };
    signer_info.is_signer()?;
    let counter = counter_info
        .as_account_mut::<Counter>(&counter_api::ID)?
        .assert_mut(|c| c.value < 100)?;

    // Update state
    counter.value += amount;

    msg!("Final amount: {}", counter.value);
    Ok(())
}


================================================
File: basics/counter/steel/program/src/initialize.rs
================================================
use counter_api::prelude::*;
use steel::*;

pub fn process_initialize(accounts: &[AccountInfo<'_>], _data: &[u8]) -> ProgramResult {
    // Load accounts.
    let [signer_info, counter_info, system_program] = accounts else {
        return Err(ProgramError::NotEnoughAccountKeys);
    };

    signer_info.is_signer()?;
    counter_info
        .is_empty()?
        .is_writable()?
        .has_seeds(&[COUNTER_SEED], &counter_api::ID)?;
    system_program.is_program(&system_program::ID)?;

    // Initialize counter.
    create_account::<Counter>(
        counter_info,
        system_program,
        signer_info,
        &counter_api::ID,
        &[COUNTER_SEED],
    )?;

    let counter = counter_info.as_account_mut::<Counter>(&counter_api::ID)?;
    counter.value = 0;

    Ok(())
}


================================================
File: basics/counter/steel/program/src/lib.rs
================================================
mod increment;
mod initialize;

use increment::*;
use initialize::*;

use counter_api::prelude::*;
use steel::*;

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    data: &[u8],
) -> ProgramResult {
    let (ix, data) = parse_instruction(&counter_api::ID, program_id, data)?;

    match ix {
        CounterInstruction::Initialize => process_initialize(accounts, data)?,
        CounterInstruction::Increment => process_increment(accounts, data)?,
    }

    Ok(())
}

entrypoint!(process_instruction);


================================================
File: basics/create-account/anchor/Anchor.toml
================================================
[features]
seeds = false
skip-lint = false

[programs.localnet]
create_system_account = "ARVNCsYKDQsCLHbwUTJLpFXVrJdjhWZStyzvxmKe2xHi"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/create-account/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/create-account/anchor/package.json
================================================
{
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/web3.js": "^1.95.2"
  },
  "devDependencies": {
    "anchor-bankrun": "^0.4.0",
    "solana-bankrun": "^0.3.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.4.1",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/create-account/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/create-account/anchor/programs/create-system-account/Cargo.toml
================================================
[package]
name = "create-system-account"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "create_system_account"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.0"


================================================
File: basics/create-account/anchor/programs/create-system-account/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/create-account/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml --bpf-out-dir=./program/target/so
solana program deploy ./program/target/so/program.so


================================================
File: basics/create-account/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/program.so"
  },
  "dependencies": {
    "@solana/web3.js": "^1.47.3"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/create-account/native/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/create-account/native/program/Cargo.toml
================================================
[package]
name = "create-account-program"
version = "0.1.0"
edition = "2021"

[dependencies]
solana-program = "=1.18.17"

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: basics/create-account/poseidon/create_system_account/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
create_system_account = "2Gs21s6ovwaHddKdPZvGpowpVJJBohdy3DrjoX77rqiY"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm run ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/create-account/poseidon/create_system_account/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/create-account/poseidon/create_system_account/package.json
================================================
{
  "license": "ISC",
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check",
    "ts-mocha": "ts-mocha --project tsconfig.json"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.1",
    "@solana/web3.js": "^1.95.4",
    "anchor-bankrun": "^0.5.0",
    "solana-bankrun": "^0.4.0"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/create-account/poseidon/create_system_account/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/create-account/poseidon/create_system_account/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: basics/create-account/poseidon/create_system_account/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: basics/create-account/poseidon/create_system_account/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: basics/create-account/poseidon/create_system_account/programs/create_system_account/Cargo.toml
================================================
[package]
name = "create_system_account"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "create_system_account"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.1"


================================================
File: basics/create-account/poseidon/create_system_account/programs/create_system_account/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/create-account/poseidon/create_system_account/programs/create_system_account/src/lib.rs
================================================
use anchor_lang::prelude::*;
declare_id!("2Gs21s6ovwaHddKdPZvGpowpVJJBohdy3DrjoX77rqiY");
#[program]
pub mod create_system_account_program {
    use super::*;
    pub fn create_system_account(
        ctx: Context<CreateSystemAccountContext>,
    ) -> Result<()> {
        ctx.accounts.account.owner = ctx.accounts.owner.key();
        ctx.accounts.account.account_bump = ctx.bumps.account;
        Ok(())
    }
}
#[derive(Accounts)]
pub struct CreateSystemAccountContext<'info> {
    #[account(mut)]
    pub owner: Signer<'info>,
    #[account(init, payer = owner, space = 41, seeds = [b"account"], bump)]
    pub account: Account<'info, AccountState>,
    pub system_program: Program<'info, System>,
}
#[account]
pub struct AccountState {
    pub owner: Pubkey,
    pub account_bump: u8,
}


================================================
File: basics/create-account/poseidon/create_system_account/ts-programs/package.json
================================================
{
  "name": "ts-programs",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@solanaturbine/poseidon": "^0.0.4"
  }
}


================================================
File: basics/create-account/poseidon/create_system_account/ts-programs/pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@solanaturbine/poseidon':
        specifier: ^0.0.4
        version: 0.0.4

packages:

  '@solanaturbine/poseidon@0.0.4':
    resolution: {integrity: sha512-VNQRtqobzBT+Wkh8fdPb0WVt12aIlgRJuGDxptclkphXi5w+VHUfMPcBshWSFPZg1nheXYgJABwvffYcyirw1g==}

snapshots:

  '@solanaturbine/poseidon@0.0.4': {}


================================================
File: basics/create-account/poseidon/create_system_account/ts-programs/src/create_system_account.ts
================================================
import { Account, Pubkey, Result, Signer, u8 } from '@solanaturbine/poseidon';

export default class CreateSystemAccountProgram {
  static PROGRAM_ID = new Pubkey('2Gs21s6ovwaHddKdPZvGpowpVJJBohdy3DrjoX77rqiY');

  //Create a new system account
  createSystemAccount(account: AccountState, owner: Signer): Result {
    //We use derive to define the account and chain the `.init()` at the end for creating the account
    account.derive(['account']).init();
    //Set owner of the account
    account.owner = owner.key;

    // Store bump for the account
    account.accountBump = account.getBump();
  }
}

export interface AccountState extends Account {
  owner: Pubkey; // Owner of the account
  accountBump: u8; // Bump for the derived account
}


================================================
File: basics/create-account/steel/README.md
================================================
# Steel: Create account

This "create-account" program is written using **Steel**, a framework for writing onchain programs.
        
## API
- [`Error`](api/src/error.rs) - Custom defined errors.
- [`Consts`](api/src/consts.rs) – Program constants.
- [`Instruction`](api/src/instruction.rs) – Declared instructions.

## Instructions
- [`Initialize`](program/src/initialize.rs) – Initialize the account creation.

## State
- [`New Account`](api/src/state.rs) – Link account and the struct that stores unique user ID.

## Get started

Compile your program:
```sh
pnpm build
```

Run unit and integration tests:
```sh
pnpm test
```

Do both together:
```sh
pnpm build-and-test
```


================================================
File: basics/create-account/steel/Cargo.toml
================================================
[workspace]
resolver = "2"
members = ["api", "program"]

[workspace.package]
version = "0.1.0"
edition = "2021"
license = "Apache-2.0"
homepage = ""
documentation = ""
repository = ""
readme = "./README.md"
keywords = ["solana"]

[workspace.dependencies]
create-account-api = { path = "./api", version = "0.1.0" }
bytemuck = "1.14"
num_enum = "0.7"
solana-program = "1.18"
steel = "2.0"
thiserror = "1.0"


================================================
File: basics/create-account/steel/cicd.sh
================================================
#!/bin/bash

# Buld and deploy this program with ease using a single command
# Run this script with "bash cicd.sh" or "./cicd.sh"
# Note: Try running "chmod +x cicd.sh" if you face any issues.

# Check if cargo is installed
if ! command -v cargo &> /dev/null
then
    echo "Cargo could not be found. Please install Rust."
    exit 1
fi

# Check if solana CLI is installed
if ! command -v solana &> /dev/null
then
    echo "Solana CLI could not be found. Please install Solana."
    exit 1
fi


# Build
cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so

# Deploy
solana program deploy ./program/target/so/create_account_program.so


================================================
File: basics/create-account/steel/package.json
================================================
{
  "name": "create-account-program",
  "version": "1.0.0",
  "type": "module",
  "description": "Create an account using the steel framework for Solana",
  "main": "index.js",
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/*.test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/create_account_program.so"
  },
  "keywords": ["solana"],
  "author": "",
  "license": "MIT",
  "dependencies": {
    "@solana/web3.js": "^1.95.4"
  },
  "devDependencies": {
    "@types/chai": "^4.3.20",
    "@types/mocha": "^10.0.9",
    "@types/node": "^22.8.1",
    "chai": "^4.5.0",
    "mocha": "^10.7.3",
    "solana-bankrun": "^0.4.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^5.6.3"
  }
}


================================================
File: basics/create-account/steel/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai", "node"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "moduleResolution": "node",
    "esModuleInterop": true,
    "strict": true,
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "."
  }
}


================================================
File: basics/create-account/steel/.gitignore
================================================
target
test-ledger
node_modules


================================================
File: basics/create-account/steel/api/Cargo.toml
================================================
[package]
name = "create-account-api"
description = "API for interacting with the create account program"
version.workspace = true
edition.workspace = true
license.workspace = true
homepage.workspace = true
documentation.workspace = true
repository.workspace = true
readme.workspace = true
keywords.workspace = true

[dependencies]
bytemuck.workspace = true
num_enum.workspace = true
solana-program.workspace = true
steel.workspace = true
thiserror.workspace = true


================================================
File: basics/create-account/steel/api/src/error.rs
================================================
use steel::*;

/// Declare custom error enum
#[derive(Debug, Error, Clone, Copy, PartialEq, Eq, IntoPrimitive)]
#[repr(u32)]
pub enum CreateAccountError {
    /// Discriminator for error is set to '0'
    #[error("There was an error while creating your account")]
    AccountCreation = 0,
}

error!(CreateAccountError);


================================================
File: basics/create-account/steel/api/src/instruction.rs
================================================
use steel::*;

/// Declare the Instructions enum for create account
#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, TryFromPrimitive)]
pub enum CreateAccountInstruction {
    /// Initialize account discriminator set to '0'
    InitializeAccount = 0,
}

/// Empty initialize account struct since
/// no data input is needed
#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct InitializeAccount {}

// Link Instructions enum to variant
instruction!(CreateAccountInstruction, InitializeAccount);


================================================
File: basics/create-account/steel/api/src/lib.rs
================================================
pub mod error;
pub mod instruction;
pub mod sdk;
pub mod state;

pub mod prelude {
    pub use crate::error::*;
    pub use crate::instruction::*;
    pub use crate::sdk::*;
    pub use crate::state::*;
}

use steel::*;

declare_id!("12rpZ18eGj7BeKvSFRZ45cni97HctTbKziBnW3MsH3NG");


================================================
File: basics/create-account/steel/api/src/sdk.rs
================================================
use steel::*;

use crate::prelude::*;

pub fn initialize_account(signer: Pubkey, new_account_key: Pubkey) -> Instruction {
    Instruction {
        program_id: crate::ID,
        accounts: vec![
            AccountMeta::new(signer, true),
            AccountMeta::new(new_account_key, false),
            AccountMeta::new_readonly(system_program::ID, false),
        ],
        data: InitializeAccount {}.to_bytes(),
    }
}


================================================
File: basics/create-account/steel/api/src/state.rs
================================================
use steel::*;

/// This enum is used to get a discriminator
/// for the new account.
#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, IntoPrimitive, TryFromPrimitive)]
pub enum CreateAccountDiscriminator {
    NewAccount = 0,
}

/// This empty struct represents the system account
/// It contains no data and is used to create a new account
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq, Pod, Zeroable)]
pub struct NewAccount {}

account!(CreateAccountDiscriminator, NewAccount);


================================================
File: basics/create-account/steel/program/Cargo.toml
================================================
[package]
name = "create-account-program"
description = ""
version.workspace = true
edition.workspace = true
license.workspace = true
homepage.workspace = true
documentation.workspace = true
repository.workspace = true
readme.workspace = true
keywords.workspace = true

[lib]
crate-type = ["cdylib", "lib"]

[dependencies]
create-account-api.workspace = true
solana-program.workspace = true
steel.workspace = true


================================================
File: basics/create-account/steel/program/src/lib.rs
================================================
mod initialize;

use create_account_api::prelude::*;
use initialize::*;
use steel::*;

/// Process the input before sending it over
/// to our main program to use.
pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    data: &[u8],
) -> ProgramResult {
    let (ix, _data) = parse_instruction(&create_account_api::ID, program_id, data)?;

    match ix {
        CreateAccountInstruction::InitializeAccount => process_initialize(accounts)?,
    }

    Ok(())
}

// Declare entrypoint for our program
entrypoint!(process_instruction);


================================================
File: basics/cross-program-invocation/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
hand = "Bi5N7SUQhpGknVcqPTzdFFVueQoxoUu8YTLz75J6fT8A"
lever = "E64FVeubGC4NPNF2UBJYX4AkrVowf74fRJD9q6YhwstN"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/cross-program-invocation/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/cross-program-invocation/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/web3.js": "^1.95.2"
  },
  "devDependencies": {
    "anchor-bankrun": "^0.4.0",
    "solana-bankrun": "^0.3.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "typescript": "^4.3.5",
    "prettier": "^2.6.2"
  }
}


================================================
File: basics/cross-program-invocation/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/cross-program-invocation/anchor/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: basics/cross-program-invocation/anchor/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: basics/cross-program-invocation/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: basics/cross-program-invocation/anchor/programs/hand/Cargo.toml
================================================
[package]
name = "hand"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "hand"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.0"


================================================
File: basics/cross-program-invocation/anchor/programs/hand/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/cross-program-invocation/anchor/programs/hand/src/lib.rs
================================================
use anchor_lang::prelude::*;

declare_id!("Bi5N7SUQhpGknVcqPTzdFFVueQoxoUu8YTLz75J6fT8A");

// automatically generate module using program idl found in ./idls
declare_program!(lever);
use lever::accounts::PowerStatus;
use lever::cpi::accounts::SwitchPower;
use lever::cpi::switch_power;
use lever::program::Lever;

#[program]
pub mod hand {
    use super::*;

    pub fn pull_lever(ctx: Context<PullLever>, name: String) -> Result<()> {
        let cpi_ctx = CpiContext::new(
            ctx.accounts.lever_program.to_account_info(),
            SwitchPower {
                power: ctx.accounts.power.to_account_info(),
            },
        );
        switch_power(cpi_ctx, name)?;
        Ok(())
    }
}

#[derive(Accounts)]
pub struct PullLever<'info> {
    #[account(mut)]
    pub power: Account<'info, PowerStatus>,
    pub lever_program: Program<'info, Lever>,
}


================================================
File: basics/cross-program-invocation/anchor/programs/lever/Cargo.toml
================================================
[package]
name = "lever"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "lever"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.0"


================================================
File: basics/cross-program-invocation/anchor/programs/lever/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/cross-program-invocation/native/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"


================================================
File: basics/cross-program-invocation/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --bpf-out-dir=./target/so
echo "Hand:"
solana program deploy ./target/so/hand.so | grep "Program Id:"
echo "Lever:"
solana program deploy ./target/so/lever.so | grep "Program Id:"


================================================
File: basics/cross-program-invocation/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/test.ts",
    "build-and-test": "cargo build-sbf --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/program.so"
  },
  "dependencies": {
    "@solana/web3.js": "^1.47.3",
    "borsh": "^0.7.0",
    "buffer": "^6.0.3",
    "fs": "^0.0.1-security"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/cross-program-invocation/native/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/cross-program-invocation/native/programs/hand/Cargo.toml
================================================
[package]
name = "cross-program-invocatio-native-hand"
version = "0.1.0"
edition = "2021"

[features]
no-entrypoint = []
cpi = ["no-entrypoint"]

[dependencies]
borsh = "0.10"
borsh-derive = "0.10"
solana-program = "=1.18.17"
cross-program-invocatio-native-lever = { path = "../lever", features = ["cpi"] }

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: basics/cross-program-invocation/native/programs/hand/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/cross-program-invocation/native/programs/lever/Cargo.toml
================================================
[package]
name = "cross-program-invocatio-native-lever"
version = "0.1.0"
edition = "2021"

[features]
no-entrypoint = []
cpi = ["no-entrypoint"]

[dependencies]
borsh = "0.10"
borsh-derive = "0.10"
solana-program = "=1.18.17"

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: basics/cross-program-invocation/native/programs/lever/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/cross-program-invocation/steel/README.md
================================================
##  Cross Program Invocation steel example

### Programs

- [Hand](./hand/README.md)
- [Lever](./lever/README.md)


================================================
File: basics/cross-program-invocation/steel/hand/README.md
================================================
# Hand

**Hand** is a ...

## API
- [`Instruction`](api/src/instruction.rs) – Declared instructions.

## Instructions
- [`PullLever`](program/src/pull_lever.rs) – Pull Lever ...

## Get started

Compile your program:
```sh
steel build
```

Run unit and integration tests:
```sh
steel test
```


================================================
File: basics/cross-program-invocation/steel/hand/Cargo.toml
================================================
[workspace]
resolver = "2"
members = ["api", "program"]

[workspace.package]
version = "0.1.0"
edition = "2021"
license = "Apache-2.0"
homepage = ""
documentation = ""
repository = ""
readme = "./README.md"
keywords = ["solana"]

[workspace.dependencies]
hand-api = { path = "./api", version = "0.1.0" }
lever-api = { path = "../lever/api", version = "0.1.0" }
lever-program = { path = "../lever/program", version = "0.1.0", features = [
    "cpi",
] }
bytemuck = "1.14"
num_enum = "0.7"
solana-program = "1.18"
steel = "2.0"
thiserror = "1.0"


================================================
File: basics/cross-program-invocation/steel/hand/.gitignore
================================================
target
test-ledger


================================================
File: basics/cross-program-invocation/steel/hand/api/Cargo.toml
================================================
[package]
name = "hand-api"
description = "API for interacting with the Hand program"
version.workspace = true
edition.workspace = true
license.workspace = true
homepage.workspace = true
documentation.workspace = true
repository.workspace = true
readme.workspace = true
keywords.workspace = true

[dependencies]
bytemuck.workspace = true
num_enum.workspace = true
solana-program.workspace = true
steel.workspace = true
thiserror.workspace = true
lever-api.workspace = true


================================================
File: basics/cross-program-invocation/steel/hand/api/src/instruction.rs
================================================
use steel::*;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, TryFromPrimitive)]
pub enum HandInstruction {
    PullLever = 0,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct PullLever {
    pub name: [u8; 32],
}

instruction!(HandInstruction, PullLever);


================================================
File: basics/cross-program-invocation/steel/hand/api/src/lib.rs
================================================
pub mod instruction;
pub mod sdk;

pub mod prelude {
    pub use crate::instruction::*;
    pub use crate::sdk::*;
}

use steel::*;

// TODO Set program id
declare_id!("Bi5N7SUQhpGknVcqPTzdFFVueQoxoUu8YTLz75J6fT8A");


================================================
File: basics/cross-program-invocation/steel/hand/api/src/sdk.rs
================================================
use lever_api::prelude::*;
use steel::*;

use crate::prelude::*;

pub fn pull_lever(power_account: Pubkey, name: &str) -> Instruction {
    // pub fn pull_lever(power_account: Pubkey, lever_program: Pubkey, name: &str) -> Instruction {
    Instruction {
        program_id: crate::ID,
        accounts: vec![
            AccountMeta::new(power_account, false),
            // AccountMeta::new(lever_program, false),
            AccountMeta::new_readonly(lever_api::ID, false),
        ],
        data: PullLever {
            name: str_to_bytes(name),
        }
        .to_bytes(),
    }
}


================================================
File: basics/cross-program-invocation/steel/hand/program/Cargo.toml
================================================
[package]
name = "hand-program"
description = ""
version.workspace = true
edition.workspace = true
license.workspace = true
homepage.workspace = true
documentation.workspace = true
repository.workspace = true
readme.workspace = true
keywords.workspace = true

[lib]
crate-type = ["cdylib", "lib"]

[dependencies]
hand-api.workspace = true
lever-api.workspace = true
lever-program.workspace = true
solana-program.workspace = true
steel.workspace = true

[dev-dependencies]
base64 = "0.21"
rand = "0.8.5"
solana-program-test = "1.18"
solana-sdk = "1.18"
tokio = { version = "1.35", features = ["full"] }


================================================
File: basics/cross-program-invocation/steel/hand/program/src/lib.rs
================================================
mod pull_lever;

use pull_lever::*;

use hand_api::prelude::*;
use steel::*;

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    data: &[u8],
) -> ProgramResult {
    let (ix, data) = parse_instruction(&hand_api::ID, program_id, data)?;

    match ix {
        HandInstruction::PullLever => process_pull_lever(accounts, data)?,
    }

    Ok(())
}

entrypoint!(process_instruction);


================================================
File: basics/cross-program-invocation/steel/hand/program/src/pull_lever.rs
================================================
use hand_api::prelude::*;
use lever_api::prelude::*;
use steel::*;

pub fn process_pull_lever(accounts: &[AccountInfo<'_>], data: &[u8]) -> ProgramResult {
    // Parse args.
    let args = PullLever::try_from_bytes(data)?;
    let name = bytes_to_str(&args.name);

    // Load accounts.
    let [power_info, lever_program] = accounts else {
        return Err(ProgramError::NotEnoughAccountKeys);
    };

    power_info.is_writable()?;

    let ix = switch_power(*power_info.key, &name);

    solana_program::program::invoke(&ix, &[power_info.clone(), lever_program.clone()])?;

    Ok(())
}


================================================
File: basics/cross-program-invocation/steel/lever/README.md
================================================
# Lever

**Lever** is a ...

## API
- [`Consts`](api/src/consts.rs) – Program constants.
- [`Error`](api/src/error.rs) – Custom program errors.
- [`Event`](api/src/event.rs) – Custom program events.
- [`Instruction`](api/src/instruction.rs) – Declared instructions.

## Instructions
- [`SwitchPower`](program/src/switch_power.rs) – Switch Power ...
- [`Initialize`](program/src/initialize.rs) – Initialize ...

## State
- [`PowerStatus`](api/src/state/power_status.rs) – Power status ...

## Get started

Compile your program:
```sh
steel build
```

Run unit and integration tests:
```sh
steel test
```


================================================
File: basics/cross-program-invocation/steel/lever/Cargo.toml
================================================
[workspace]
resolver = "2"
members = ["api", "program"]

[workspace.package]
version = "0.1.0"
edition = "2021"
license = "Apache-2.0"
homepage = ""
documentation = ""
repository = ""
readme = "./README.md"
keywords = ["solana"]

[workspace.dependencies]
lever-api = { path = "./api", version = "0.1.0" }
bytemuck = "1.14"
num_enum = "0.7"
solana-program = "1.18"
steel = "2.0"
thiserror = "1.0"


================================================
File: basics/cross-program-invocation/steel/lever/.gitignore
================================================
target
test-ledger


================================================
File: basics/cross-program-invocation/steel/lever/api/Cargo.toml
================================================
[package]
name = "lever-api"
description = "API for interacting with the Lever program"
version.workspace = true
edition.workspace = true
license.workspace = true
homepage.workspace = true
documentation.workspace = true
repository.workspace = true
readme.workspace = true
keywords.workspace = true

[dependencies]
bytemuck.workspace = true
num_enum.workspace = true
solana-program.workspace = true
steel.workspace = true
thiserror.workspace = true


================================================
File: basics/cross-program-invocation/steel/lever/api/src/consts.rs
================================================
/// Seed of the counter account PDA.
pub const COUNTER: &[u8] = b"counter";


================================================
File: basics/cross-program-invocation/steel/lever/api/src/error.rs
================================================
use steel::*;

#[derive(Debug, Error, Clone, Copy, PartialEq, Eq, IntoPrimitive)]
#[repr(u32)]
pub enum LeverError {
    #[error("This is a dummy error")]
    Dummy = 0,
}

error!(LeverError);


================================================
File: basics/cross-program-invocation/steel/lever/api/src/instruction.rs
================================================
use steel::*;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, TryFromPrimitive)]
pub enum LeverInstruction {
    Initialize = 0,
    SetPowerStatus = 1,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct Initialize {}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct SetPowerStatus {
    pub name: [u8; 32],
}

instruction!(LeverInstruction, Initialize);
instruction!(LeverInstruction, SetPowerStatus);


================================================
File: basics/cross-program-invocation/steel/lever/api/src/lib.rs
================================================
pub mod consts;
pub mod error;
pub mod instruction;
pub mod sdk;
pub mod state;
pub mod utils;

pub mod prelude {
    pub use crate::consts::*;
    pub use crate::error::*;
    pub use crate::instruction::*;
    pub use crate::sdk::*;
    pub use crate::state::*;
    pub use crate::utils::*;
}

use steel::*;

// TODO Set program id
declare_id!("E64FVeubGC4NPNF2UBJYX4AkrVowf74fRJD9q6YhwstN");


================================================
File: basics/cross-program-invocation/steel/lever/api/src/sdk.rs
================================================
use steel::*;

use crate::prelude::*;

pub fn initialize(user: Pubkey, power_account: Pubkey) -> Instruction {
    Instruction {
        program_id: crate::ID,
        accounts: vec![
            AccountMeta::new(user, true),
            AccountMeta::new(power_account, true),
            AccountMeta::new_readonly(system_program::ID, false),
        ],
        data: Initialize {}.to_bytes(),
    }
}

pub fn switch_power(power_account: Pubkey, name: &str) -> Instruction {
    Instruction {
        program_id: crate::ID,
        accounts: vec![AccountMeta::new(power_account, false)],
        data: SetPowerStatus {
            name: str_to_bytes(name),
        }
        .to_bytes(),
    }
}


================================================
File: basics/cross-program-invocation/steel/lever/api/src/utils.rs
================================================
pub fn str_to_bytes(name: &str) -> [u8; 32] {
    let mut name_bytes = [0u8; 32];
    name_bytes[..name.len()].copy_from_slice(name.as_bytes());
    name_bytes
}

pub fn bytes_to_str(bytes: &[u8; 32]) -> String {
    // Find the first occurrence of 0 (null terminator) or take all bytes if no null found
    let length = bytes.iter().position(|&x| x == 0).unwrap_or(bytes.len());

    // Convert the slice up to the null terminator (or full length) to a string
    String::from_utf8_lossy(&bytes[..length]).into_owned()
}


================================================
File: basics/cross-program-invocation/steel/lever/api/src/state/mod.rs
================================================
mod power_status;

pub use power_status::*;

use steel::*;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, IntoPrimitive, TryFromPrimitive)]
pub enum LeverAccount {
    PowerStatus = 0,
}

// /// Fetch PDA of the counter account.
// pub fn counter_pda() -> (Pubkey, u8) {
//     Pubkey::find_program_address(&[COUNTER], &crate::id())
// }


================================================
File: basics/cross-program-invocation/steel/lever/api/src/state/power_status.rs
================================================
use steel::*;

use super::LeverAccount;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq, Pod, Zeroable)]
pub struct PowerStatus {
    pub is_on: u8,
}

account!(LeverAccount, PowerStatus);


================================================
File: basics/cross-program-invocation/steel/lever/program/Cargo.toml
================================================
[package]
name = "lever-program"
description = ""
version.workspace = true
edition.workspace = true
license.workspace = true
homepage.workspace = true
documentation.workspace = true
repository.workspace = true
readme.workspace = true
keywords.workspace = true

[lib]
crate-type = ["cdylib", "lib"]

[features]
no-entrypoint = []
cpi = ["no-entrypoint"]

[dependencies]
lever-api.workspace = true
solana-program.workspace = true
steel.workspace = true

[dev-dependencies]
base64 = "0.21"
rand = "0.8.5"
solana-program-test = "1.18"
solana-sdk = "1.18"
tokio = { version = "1.35", features = ["full"] }


================================================
File: basics/cross-program-invocation/steel/lever/program/src/initialize.rs
================================================
use lever_api::prelude::*;
use steel::*;

pub fn process_initialize(accounts: &[AccountInfo<'_>], _data: &[u8]) -> ProgramResult {
    // Load accounts.
    let [signer_info, power_info, system_program] = accounts else {
        return Err(ProgramError::NotEnoughAccountKeys);
    };
    signer_info.is_signer()?;
    power_info.is_empty()?.is_writable()?;
    system_program.is_program(&system_program::ID)?;

    // Initialize power.
    create_account::<PowerStatus>(power_info, system_program, signer_info, &lever_api::ID, &[])?;

    Ok(())
}


================================================
File: basics/cross-program-invocation/steel/lever/program/src/lib.rs
================================================
mod initialize;
mod switch_power;

use initialize::*;
use switch_power::*;

use lever_api::prelude::*;
use steel::*;

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    data: &[u8],
) -> ProgramResult {
    let (ix, data) = parse_instruction(&lever_api::ID, program_id, data)?;

    match ix {
        LeverInstruction::Initialize => process_initialize(accounts, data)?,
        LeverInstruction::SetPowerStatus => process_switch_power(accounts, data)?,
    }

    Ok(())
}

entrypoint!(process_instruction);


================================================
File: basics/cross-program-invocation/steel/lever/program/src/switch_power.rs
================================================
use lever_api::prelude::*;
use solana_program::msg;
use steel::*;

pub fn process_switch_power(accounts: &[AccountInfo<'_>], data: &[u8]) -> ProgramResult {
    // Parse args.
    let args = SetPowerStatus::try_from_bytes(data)?;
    let name = bytes_to_str(&args.name);

    // Load accounts.
    let [power_info] = accounts else {
        return Err(ProgramError::NotEnoughAccountKeys);
    };

    power_info.is_writable()?;

    let power = power_info
        .as_account_mut::<PowerStatus>(&lever_api::ID)?
        .assert_mut(|c| c.is_on <= 1)?;

    match power.is_on {
        0 => power.is_on = 1,
        1 => power.is_on = 0,
        _ => panic!("Invalid boolean value"),
    }

    msg!("{} is pulling the power switch!", &name);

    match power.is_on {
        1 => msg!("The power is now on."),
        0 => msg!("The power is now off!"),
        _ => panic!("Invalid boolean value"),
    };

    Ok(())
}


================================================
File: basics/favorites/anchor/README.md
================================================
# Favorites

This is a basic Anchor app using PDAs to store data for a user, and Anchor's account checks to ensure each user is only allowed to modify their own data.

It's used by the [https://github.com/solana-developers/professional-education](Solana Professional Education) course.

## Usage

`anchor test`, `anchor deploy` etc.


================================================
File: basics/favorites/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
favorites = "ww9C83noARSQVBnqmCUmaVdbJjmiwcV9j2LkXYMoUCV"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.test.ts"


================================================
File: basics/favorites/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1

[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/favorites/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana-developers/helpers": "^2.0.0",
    "@solana/web3.js": "^1.95.2"
  },
  "license": "MIT",
  "devDependencies": {
    "anchor-bankrun": "^0.4.0",
    "solana-bankrun": "^0.3.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/favorites/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/favorites/anchor/.gitignore
================================================

.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn
.env


================================================
File: basics/favorites/anchor/.prettierignore
================================================

.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: basics/favorites/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: basics/favorites/anchor/programs/favorites/Cargo.toml
================================================
[package]
name = "favorites"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "favorites"

[features]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
cpi = ["no-entrypoint"]
default = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = {version = "0.30.1", features = ["init-if-needed"]}
solana-program = "=2.0.3"


================================================
File: basics/favorites/anchor/programs/favorites/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/favorites/anchor/tests/system-errors.ts
================================================
// From https://github.com/solana-labs/solana/blob/a94920a4eadf1008fc292e47e041c1b3b0d949df/sdk/program/src/system_instruction.rs
export const systemProgramErrors = [
  'an account with the same address already exists',

  'account does not have enough SOL to perform the operation',

  'cannot assign account to this program id',

  'cannot allocate account data of this length',

  'length of requested seed is too long',

  'provided address does not match addressed derived from seed',

  'advancing stored nonce requires a populated RecentBlockhashes sysvar',

  'stored nonce is still in recent_blockhashes',

  'specified nonce does not match stored nonce',
];


================================================
File: basics/favorites/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml --bpf-out-dir=./program/target/so
solana program deploy ./program/target/so/program.so


================================================
File: basics/favorites/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/program.so"
  },
  "dependencies": {
    "@solana/web3.js": "^1.47.3",
    "borsh": "^2.0.0"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "@types/node": "^22.8.1",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/favorites/native/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai", "node"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/favorites/native/program/Cargo.toml
================================================
[package]
name = "favorites-native"
version = "0.1.0"
edition = "2021"

[dependencies]
borsh = "0.9.3"
solana-program = "2.0.14"
borsh-derive = "0.9.1"

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: basics/favorites/native/program/src/lib.rs
================================================
use solana_program::entrypoint;

pub mod state;
pub mod instructions;
pub mod processor;

use processor::process_instruction;

entrypoint!(process_instruction);





================================================
File: basics/favorites/native/program/src/processor.rs
================================================
use solana_program::{
    account_info::AccountInfo, 
    entrypoint::ProgramResult, 
    pubkey::Pubkey,
};

use crate::instructions::{create_pda::*, get_pda::*};
use crate::state::Favorites;
use borsh::{BorshDeserialize, BorshSerialize};

#[derive(BorshDeserialize, BorshSerialize)]
pub enum FavoritesInstruction {
    CreatePda(Favorites),
    GetPda,
}

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    let instruction = FavoritesInstruction::try_from_slice(instruction_data)?;

    match instruction {
        FavoritesInstruction::CreatePda(data) => create_pda(program_id, accounts, data),
        FavoritesInstruction::GetPda => get_pda(program_id,accounts),
    }?;

    Ok(())
}


================================================
File: basics/favorites/native/program/src/state.rs
================================================
use borsh::{BorshDeserialize, BorshSerialize};

#[derive(BorshDeserialize, BorshSerialize, Debug)]
pub struct Favorites {
    pub number: u64,
    pub color: String,
    pub hobbies: Vec<String>
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct GetFavorites {
}



================================================
File: basics/favorites/native/program/src/instructions/mod.rs
================================================
pub mod create_pda;
pub mod get_pda;

use create_pda::*;
use get_pda::*;

================================================
File: basics/favorites/poseidon/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
favorites_program = "BreVFi2U3pUegY96xP5JMviUuxL5x6bRnnbsztb262vQ"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/favorites/poseidon/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/favorites/poseidon/package.json
================================================
{
  "license": "ISC",
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.1"
  },
  "devDependencies": {
    "@solana/web3.js": "^1.95.4",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "anchor-bankrun": "^0.5.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "solana-bankrun": "^0.4.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  },
  "packageManager": "pnpm@9.12.2+sha512.22721b3a11f81661ae1ec68ce1a7b879425a1ca5b991c975b074ac220b187ce56c708fe5db69f4c962c989452eee76c82877f4ee80f474cebd61ee13461b6228"
}


================================================
File: basics/favorites/poseidon/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/favorites/poseidon/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: basics/favorites/poseidon/programs/favorites-program/Cargo.toml
================================================
[package]
name = "favorites-program"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "favorites_program"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.1"


================================================
File: basics/favorites/poseidon/programs/favorites-program/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/favorites/poseidon/ts-programs/package.json
================================================
{
  "name": "ts-programs",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@solanaturbine/poseidon": "0.0.11"
  }
}


================================================
File: basics/favorites/poseidon/ts-programs/pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@solanaturbine/poseidon':
        specifier: 0.0.11
        version: 0.0.11

packages:

  '@solanaturbine/poseidon@0.0.11':
    resolution: {integrity: sha512-633lfrVIfZ+KNgsa2VCHC5x3KITryO5K+uVTHpuP4bhoNi4smINsFD8uwDCaVAt4uTY0WJO/GuYqFJ+kXMN7pA==}

snapshots:

  '@solanaturbine/poseidon@0.0.11': {}


================================================
File: basics/favorites/poseidon/ts-programs/src/favoritesProgram.ts
================================================
import { Account, Pubkey, Result, Signer, Str, Vec, u8, u64 } from '@solanaturbine/poseidon';

export default class FavoritesProgram {
  static PROGRAM_ID = new Pubkey('BreVFi2U3pUegY96xP5JMviUuxL5x6bRnnbsztb262vQ');

  setFavorites(favorites: Favorites, payer: Signer, number: u64, color: Str<7>, hobbies: Vec<Str<7>, 5>): Result {
    favorites.derive(['favorites', payer.key]).init(payer);
    favorites.number = number;
    favorites.color = color;
    favorites.hobbies = hobbies;
    favorites.bump = favorites.getBump();
  }
}

export interface Favorites extends Account {
  number: u64;
  color: Str<7>;
  hobbies: Vec<Str<7>, 5>;
  bump: u8;
}


================================================
File: basics/favorites/steel/README.md
================================================
# Steel

**Steel** is a ...
        
## API
- [`Consts`](api/src/consts.rs) – Program constants.
- [`Error`](api/src/error.rs) – Custom program errors.
- [`Event`](api/src/event.rs) – Custom program events.
- [`Instruction`](api/src/instruction.rs) – Declared instructions.

## Instructions
- [`Hello`](program/src/hello.rs) – Hello ...

## State
- [`User`](api/src/state/user.rs) – User ...

## Tests

To run the test suit, use the Solana toolchain:
```
cargo test-sbf         
```


================================================
File: basics/favorites/steel/Cargo.toml
================================================
[workspace]
resolver = "2"
members = ["api", "program"]

[workspace.package]
version = "0.1.0"
edition = "2021"
license = "Apache-2.0"
homepage = ""
documentation = ""
respository = ""
readme = "./README.md"
keywords = ["solana"]

[workspace.dependencies]
steel-api = { path = "./api", version = "0.1.0" }
bytemuck = "1.14"
num_enum = "0.7"
solana-program = "1.18"
steel = "1.3"
thiserror = "1.0"


================================================
File: basics/favorites/steel/.gitignore
================================================
target
test-ledger


================================================
File: basics/favorites/steel/api/Cargo.toml
================================================
[package]
name = "steel-api"
version = "0.1.0"
edition = "2021"

[dependencies]
bytemuck.workspace = true
num_enum.workspace = true
solana-program.workspace = true
steel.workspace = true
thiserror.workspace = true


================================================
File: basics/favorites/steel/api/src/consts.rs
================================================
/// Seed of the favorites account PDA.
pub const FAVORITES: &[u8] = b"favorites";


================================================
File: basics/favorites/steel/api/src/error.rs
================================================
use steel::*;

#[derive(Debug, Error, Clone, Copy, PartialEq, Eq, IntoPrimitive)]
#[repr(u32)]
pub enum SteelError {
    #[error("This is a dummy error")]
    Dummy = 0,
}

error!(SteelError);


================================================
File: basics/favorites/steel/api/src/instruction.rs
================================================
use steel::*;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, TryFromPrimitive)]
pub enum SteelInstruction {
    SetFavorites = 0,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct SetFavorites {
    pub number: [u8; 8],

    pub color: [u8; 32],

    pub hobbies: [[u8; 32]; 3],
}

instruction!(SteelInstruction, SetFavorites);


================================================
File: basics/favorites/steel/api/src/lib.rs
================================================
pub mod consts;
pub mod error;
pub mod instruction;
pub mod sdk;
pub mod state;
pub mod utils;

pub mod prelude {
    pub use crate::consts::*;
    pub use crate::error::*;
    pub use crate::instruction::*;
    pub use crate::sdk::*;
    pub use crate::state::*;
    pub use crate::utils::*;
}

use steel::*;

// TODO Set program id
declare_id!("z7msBPQHDJjTvdQRoEcKyENgXDhSRYeHieN1ZMTqo35");


================================================
File: basics/favorites/steel/api/src/sdk.rs
================================================
use steel::*;

use crate::prelude::*;

pub fn set_favorites(signer: Pubkey, number: u64, color: &str, hobbies: Vec<&str>) -> Instruction {
    let color_bytes: [u8; 32] = string_to_bytes32_padded(color).unwrap();

    let hobbies_bytes = strings_to_bytes32_array_padded(hobbies).unwrap();

    Instruction {
        program_id: crate::ID,
        accounts: vec![
            AccountMeta::new(signer, true),
            AccountMeta::new(favorites_pda().0, false),
            AccountMeta::new_readonly(system_program::ID, false),
        ],
        data: SetFavorites {
            number: number.to_le_bytes(),
            color: color_bytes,
            hobbies: hobbies_bytes,
        }
        .to_bytes(),
    }
}


================================================
File: basics/favorites/steel/api/src/state/favorites.rs
================================================
use steel::*;

use super::SteelAccount;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq, Pod, Zeroable)]
pub struct Favorites {
    pub number: u64,

    pub color: [u8; 32],

    pub hobbies: [[u8; 32]; 3],
}

account!(SteelAccount, Favorites);


================================================
File: basics/favorites/steel/api/src/state/mod.rs
================================================
mod favorites;

pub use favorites::*;

use steel::*;

use crate::consts::*;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, IntoPrimitive, TryFromPrimitive)]
pub enum SteelAccount {
    Favorites = 0,
}

/// Fetch PDA of the favorites account.
pub fn favorites_pda() -> (Pubkey, u8) {
    Pubkey::find_program_address(&[FAVORITES], &crate::id())
}


================================================
File: basics/favorites/steel/program/Cargo.toml
================================================
[package]
name = "steel-program"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]

[dependencies]
steel-api.workspace = true
solana-program.workspace = true
steel.workspace = true

[dev-dependencies]
base64 = "0.21"
rand = "0.8.5"
solana-program-test = "1.18"
solana-sdk = "1.18"
tokio = { version = "1.35", features = ["full"] }


================================================
File: basics/favorites/steel/program/src/lib.rs
================================================
mod set_favorites;

pub use set_favorites::*;

use steel::*;
use steel_api::prelude::*;

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    data: &[u8],
) -> ProgramResult {
    let (ix, data) = parse_instruction(&steel_api::ID, program_id, data)?;

    match ix {
        SteelInstruction::SetFavorites => process_set_favorites(accounts, data)?,
    }

    Ok(())
}

entrypoint!(process_instruction);


================================================
File: basics/hello-solana/anchor/Anchor.toml
================================================
[features]
seeds = false
skip-lint = false

[programs.localnet]
hello_solana = "2phbC62wekpw95XuBk4i1KX4uA8zBUWmYbiTMhicSuBV"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/hello-solana/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/hello-solana/anchor/package.json
================================================
{
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/web3.js": "^1.95.2"
  },
  "devDependencies": {
    "anchor-bankrun": "^0.4.0",
    "solana-bankrun": "^0.3.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/hello-solana/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/hello-solana/anchor/programs/hello-solana/Cargo.toml
================================================
[package]
name = "hello-solana-anchor"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "hello_solana"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.0"


================================================
File: basics/hello-solana/anchor/programs/hello-solana/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/hello-solana/anchor/programs/hello-solana/src/lib.rs
================================================
#![allow(clippy::result_large_err)]

use anchor_lang::prelude::*;

declare_id!("2phbC62wekpw95XuBk4i1KX4uA8zBUWmYbiTMhicSuBV");

#[program]
pub mod hello_solana {
    use super::*;

    pub fn hello(_ctx: Context<Hello>) -> Result<()> {
        msg!("Hello, Solana!");

        msg!("Our program's Program ID: {}", &id());

        Ok(())
    }
}

#[derive(Accounts)]
pub struct Hello {}


================================================
File: basics/hello-solana/anchor/tests/bankrun.test.ts
================================================
import { describe, it } from 'node:test';
import * as anchor from '@coral-xyz/anchor';
import { PublicKey } from '@solana/web3.js';
import { BankrunProvider } from 'anchor-bankrun';
import { startAnchor } from 'solana-bankrun';
import { HelloSolana } from '../target/types/hello_solana';

const IDL = require('../target/idl/hello_solana.json');
const PROGRAM_ID = new PublicKey(IDL.address);

describe('hello-solana', async () => {
  // Configure the Anchor provider & load the program IDL for anchor-bankrun
  // The IDL gives you a typescript module
  const context = await startAnchor('', [{ name: 'hello_solana', programId: PROGRAM_ID }], []);
  const provider = new BankrunProvider(context);

  const program = new anchor.Program<HelloSolana>(IDL, provider);

  it('Say hello!', async () => {
    // Just run Anchor's IDL method to build a transaction!
    //
    await program.methods.hello().accounts({}).rpc();
  });
});


================================================
File: basics/hello-solana/anchor/tests/test.ts
================================================
import * as anchor from '@coral-xyz/anchor';
import { HelloSolana } from '../target/types/hello_solana';

describe('hello-solana', () => {
  // Configure the Anchor provider & load the program IDL
  // The IDL gives you a typescript module
  //
  const provider = anchor.AnchorProvider.env();
  anchor.setProvider(provider);
  const program = anchor.workspace.HelloSolana as anchor.Program<HelloSolana>;

  it('Say hello!', async () => {
    // Just run Anchor's IDL method to build a transaction!
    //
    await program.methods.hello().accounts({}).rpc();
  });
});


================================================
File: basics/hello-solana/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml --bpf-out-dir=./program/target/so
solana program deploy ./program/target/so/program.so


================================================
File: basics/hello-solana/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/index.test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/hello_solana_program.so"
  },
  "dependencies": {
    "@solana/web3.js": "^1.47.3"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/hello-solana/native/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/hello-solana/native/program/Cargo.toml
================================================
[package]
name = "hello-solana-program"
version = "0.1.0"
edition = "2021"

[dependencies]
solana-program = "=1.18.17"

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: basics/hello-solana/native/program/src/lib.rs
================================================
use solana_program::{
    account_info::AccountInfo, entrypoint, entrypoint::ProgramResult, msg, pubkey::Pubkey,
};

// Tells Solana that the entrypoint to this program
//  is the "process_instruction" function.
//
entrypoint!(process_instruction);

// Our entrypoint's parameters have to match the
//  anatomy of a transaction instruction (see README).
//
fn process_instruction(
    program_id: &Pubkey,
    _accounts: &[AccountInfo],
    _instruction_data: &[u8],
) -> ProgramResult {
    msg!("Hello, Solana!");

    msg!("Our program's Program ID: {}", &program_id);

    Ok(())
}


================================================
File: basics/hello-solana/poseidon/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
hello_solana = "84mLf5VZKf58tQ1VkUtsthxuR8fSeDLv8ZKemANC53oF"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/hello-solana/poseidon/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/hello-solana/poseidon/package.json
================================================
{
  "license": "ISC",
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.1"
  },
  "devDependencies": {
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "typescript": "^4.3.5",
    "prettier": "^2.6.2"
  }
}


================================================
File: basics/hello-solana/poseidon/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/hello-solana/poseidon/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: basics/hello-solana/poseidon/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: basics/hello-solana/poseidon/hello-solana/Anchor.toml
================================================
[toolchain]

[features]
seeds = false
skip-lint = false

[programs.localnet]
hello_solana = "BHJvP5fFucNNQNTpN8gfq7xTNEhaHxea2e38ab4AzLKr"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "/Users/apple/.config/solana/id.json"

[scripts]
test = "pnpm run ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/hello-solana/poseidon/hello-solana/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/hello-solana/poseidon/hello-solana/package.json
================================================
{
    "scripts": {
        "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
        "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
    },
    "dependencies": {
        "@coral-xyz/anchor": "^0.29.0",
        "@solanaturbine/poseidon": "^0.0.4",
        "anchor-bankrun": "^0.5.0",
        "solana-bankrun": "^0.4.0"
    },
    "devDependencies": {
        "@types/bn.js": "^5.1.0",
        "@types/chai": "^4.3.0",
        "@types/mocha": "^9.0.0",
        "chai": "^4.3.4",
        "mocha": "^9.0.3",
        "prettier": "^2.6.2",
        "ts-mocha": "^10.0.0",
        "typescript": "^4.3.5"
    }
}


================================================
File: basics/hello-solana/poseidon/hello-solana/tsconfig.json
================================================
{
            "compilerOptions": {
              "types": ["mocha", "chai"],
              "typeRoots": ["./node_modules/@types"],
              "lib": ["es2015"],
              "module": "commonjs",
              "target": "es6",
              "esModuleInterop": true
            }
          }
          

================================================
File: basics/hello-solana/poseidon/hello-solana/.gitignore
================================================

.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: basics/hello-solana/poseidon/hello-solana/.prettierignore
================================================

.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: basics/hello-solana/poseidon/hello-solana/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require("@coral-xyz/anchor");

module.exports = async function (provider) {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: basics/hello-solana/poseidon/hello-solana/programs/hello-solana/Cargo.toml
================================================
[package]
name = "hello-solana"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "hello_solana"

[features]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
cpi = ["no-entrypoint"]
default = []

[dependencies]
anchor-lang = "0.29.0"


================================================
File: basics/hello-solana/poseidon/hello-solana/programs/hello-solana/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/hello-solana/poseidon/hello-solana/programs/hello-solana/src/lib.rs
================================================
use anchor_lang::prelude::*;

declare_id!("2phbC62wekpw95XuBk4i1KX4uA8zBUWmYbiTMhicSuBV");

#[program]
pub mod hello_solana_program {
    use super::*;
    pub fn hello(_ctx: Context<HelloContext>) -> Result<()> {
        Ok(())
    }
}
#[derive(Accounts)]
pub struct HelloContext {}


================================================
File: basics/hello-solana/poseidon/hello-solana/tests/test.ts
================================================
import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { assert } from "chai";
import { HelloSolanaProgram } from "../target/types/hello_solana_program"; // Assuming this path

describe("hello_solana_program", () => {
  // Configure the client to use the local cluster.
  const provider = anchor.AnchorProvider.env();
  anchor.setProvider(provider);

  const program = anchor.workspace
    .HelloSolanaProgram as Program<HelloSolanaProgram>;

  it("Executes 'hello' successfully", async () => {
    const tx = await program.methods.hello().rpc();

    // Chai assert to ensure no error occurred and transaction completed successfully
    assert.isOk(tx, "Transaction should complete without errors");
  });
});


================================================
File: basics/hello-solana/poseidon/hello-solana/ts-programs/src/hello-solana.ts
================================================
import { Pubkey, Result } from "@solanaturbine/poseidon";

export default class HelloSolanaProgram {
  static PROGRAM_ID = new Pubkey(
    "2phbC62wekpw95XuBk4i1KX4uA8zBUWmYbiTMhicSuBV"
  );

  hello(): Result {
    console.log("Hello, Solana!");

    console.log(`Our program's Program ID: ${HelloSolanaProgram.PROGRAM_ID}`);
  }
}


================================================
File: basics/hello-solana/poseidon/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: basics/hello-solana/poseidon/programs/hello-solana/Cargo.toml
================================================
[package]
name = "hello-solana"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "hello_solana"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.1"


================================================
File: basics/hello-solana/poseidon/programs/hello-solana/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/hello-solana/poseidon/programs/hello-solana/src/lib.rs
================================================
use anchor_lang::prelude::*;
declare_id!("84mLf5VZKf58tQ1VkUtsthxuR8fSeDLv8ZKemANC53oF");
#[program]
pub mod hello_solana {
    use super::*;
    pub fn initialize(ctx: Context<InitializeContext>) -> Result<()> {
        Ok(())
    }
}
#[derive(Accounts)]
pub struct InitializeContext {}


================================================
File: basics/hello-solana/poseidon/tests/hello-solana.ts
================================================
import * as anchor from '@coral-xyz/anchor';
import { Program } from '@coral-xyz/anchor';
import { HelloSolana } from '../target/types/hello_solana';

describe('hello-solana', () => {
  // Configure the client to use the local cluster.
  anchor.setProvider(anchor.AnchorProvider.env());

  const program = anchor.workspace.HelloSolana as Program<HelloSolana>;

  it('Is initialized!', async () => {
    // Add your test here.
    const tx = await program.methods.initialize().rpc();
    console.log('Your transaction signature', tx);
  });
});


================================================
File: basics/hello-solana/poseidon/ts-programs/package.json
================================================
{
  "name": "ts-programs",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@solanaturbine/poseidon": "^0.0.10"
  }
}


================================================
File: basics/hello-solana/poseidon/ts-programs/src/helloSolana.ts
================================================
import { Pubkey, type Result } from '@solanaturbine/poseidon';

export default class HelloSolana {
  static PROGRAM_ID = new Pubkey('84mLf5VZKf58tQ1VkUtsthxuR8fSeDLv8ZKemANC53oF');

  initialize(): Result {
    // Write your program here
  }
}


================================================
File: basics/hello-solana/seahorse/hello_solana/README.md
================================================
# hello_solana

This project was created by Seahorse 0.1.5.

To get started, just add your code to **programs_py/hello_solana.py** and run `seahorse build`.


================================================
File: basics/hello-solana/seahorse/hello_solana/Anchor.toml
================================================
[features]
seeds = true
[programs.localnet]
hello_solana = "Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS"

[registry]
url = "https://anchor.projectserum.com"

[provider]
cluster = "localnet"
wallet = "/home/thefunnyintrovert/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/hello-solana/seahorse/hello_solana/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"


================================================
File: basics/hello-solana/seahorse/hello_solana/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/hello-solana/seahorse/hello_solana/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/hello-solana/seahorse/hello_solana/.gitignore
================================================

../../../../.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger


================================================
File: basics/hello-solana/seahorse/hello_solana/.prettierignore
================================================

.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: basics/hello-solana/seahorse/hello_solana/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: basics/hello-solana/seahorse/hello_solana/programs/hello_solana/Cargo.toml
================================================
[package]
name = "hello_solana"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "hello_solana"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[profile.release]
overflow-checks = true

[dependencies]
anchor-lang = "0.24.2"
anchor-spl = "0.24.2"


================================================
File: basics/hello-solana/seahorse/hello_solana/programs/hello_solana/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/hello-solana/seahorse/hello_solana/programs_py/hello_solana.py
================================================
from seahorse.prelude import *

declare_id('Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS')

class Counter(Account):
    authority: Pubkey
    value: u8


@instruction
def initialize(
    authority: Signer, 
    counter: Empty[Counter]
):
    # Initialize the counter and set the authority
    counter = counter.init(
        payer = authority,
        seeds = ['new_delhi_hh', authority]
    )

    counter.authority = authority.key()
    counter.value = 0
    
    print("Hello, Solana from Seahorse!")


@instruction
def increment(
    authority: Signer, 
    counter: Counter
):
    counter.value += 1

================================================
File: basics/hello-solana/seahorse/hello_solana/tests/hello_solana.ts
================================================
import * as anchor from '@coral-xyz/anchor';
import type { HelloSolana } from '../target/types/hello_solana';

describe('hello_solana', () => {
  // Configure the client to use the local cluster.
  const provider = anchor.AnchorProvider.env();
  anchor.setProvider(provider);
  const program = anchor.workspace.HelloSolana as anchor.Program<HelloSolana>;
  const payer = provider.wallet as anchor.Wallet;

  it('Say hello!', async () => {
    // Just run Anchor's IDL method to build a transaction
    // and sign it via a signer.
    await program.methods
      .hello()
      .accounts({
        signer: provider.wallet.publicKey,
      })
      .signers([payer.payer])
      .rpc();
  });
});


================================================
File: basics/hello-solana/steel/Cargo.toml
================================================
[workspace]
resolver = "2"
members = ["program"]

[workspace.package]
version = "0.1.0"
edition = "2021"
license = "Apache-2.0"
homepage = ""
documentation = ""
repository = ""
readme = "./README.md"
keywords = ["solana"]

[workspace.dependencies]
bytemuck = "1.14"
num_enum = "0.7"
solana-program = "=2.0.13"
steel = "=2.1.1"
thiserror = "1.0"
solana-sdk = "1.18"


================================================
File: basics/hello-solana/steel/package.json
================================================
{
  "name": "steel-hello-solana",
  "version": "1.0.0",
  "description": "hello world with steel framework for solana",
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/index.test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/hello_solana_program.so"
  },
  "keywords": [],
  "author": "Ayush Chauhan",
  "license": "ISC",
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "@types/node": "^22.7.4",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  },
  "dependencies": {
    "@solana/web3.js": "^1.95.3"
  }
}


================================================
File: basics/hello-solana/steel/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai", "node"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/hello-solana/steel/program/Cargo.toml
================================================
[package]
name = "steel-hello-solana"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]

[dependencies]
solana-program = "=2.0.13"
steel = "=2.1.1"


================================================
File: basics/hello-solana/steel/program/src/lib.rs
================================================
use solana_program::msg;
use steel::*;

entrypoint!(process_instruction);

fn process_instruction(
    program_id: &Pubkey,
    _accounts: &[AccountInfo],
    _instruction_data: &[u8],
) -> ProgramResult {
    msg!("Hello, Solana!");

    msg!("Our program's Program ID: {}", &program_id);

    Ok(())
}


================================================
File: basics/pda-rent-payer/README.md
================================================
# PDA Rent-Payer

This examples demonstrates how to use a PDA to pay the rent for the creation of a new account.   
   
The key here is accounts on Solana are automatically created under ownership of the System Program when you transfer lamports to them. So, you can just transfer lamports from your PDA to the new account's public key!

================================================
File: basics/pda-rent-payer/anchor/Anchor.toml
================================================
[features]
seeds = false
[programs.localnet]
pda_rent_payer = "7Hm9nsYVuBZ9rf8z9AMUHreZRv8Q4vLhqwdVTCawRZtA"

[registry]
url = "https://anchor.projectserum.com"

[provider]
cluster = "localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/pda-rent-payer/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/pda-rent-payer/anchor/package.json
================================================
{
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/web3.js": "^1.95.2"
  },
  "devDependencies": {
    "anchor-bankrun": "^0.4.0",
    "solana-bankrun": "^0.3.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/pda-rent-payer/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/pda-rent-payer/anchor/programs/anchor-program-example/Cargo.toml
================================================
[package]
name = "pda-rent-payer"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "pda_rent_payer"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.0"


================================================
File: basics/pda-rent-payer/anchor/programs/anchor-program-example/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/pda-rent-payer/anchor/programs/anchor-program-example/src/lib.rs
================================================
#![allow(clippy::result_large_err)]
use anchor_lang::prelude::*;
use instructions::*;
pub mod instructions;

declare_id!("7Hm9nsYVuBZ9rf8z9AMUHreZRv8Q4vLhqwdVTCawRZtA");

#[program]
pub mod pda_rent_payer {
    use super::*;

    pub fn init_rent_vault(ctx: Context<InitRentVault>, fund_lamports: u64) -> Result<()> {
        init_rent_vault::init_rent_vault(ctx, fund_lamports)
    }

    pub fn create_new_account(ctx: Context<CreateNewAccount>) -> Result<()> {
        create_new_account::create_new_account(ctx)
    }
}


================================================
File: basics/pda-rent-payer/anchor/programs/anchor-program-example/src/instructions/init_rent_vault.rs
================================================
use anchor_lang::prelude::*;
use anchor_lang::system_program::{transfer, Transfer};

#[derive(Accounts)]
pub struct InitRentVault<'info> {
    #[account(mut)]
    payer: Signer<'info>,

    #[account(
        mut,
        seeds = [
            b"rent_vault",
        ],
        bump,
    )]
    rent_vault: SystemAccount<'info>,
    system_program: Program<'info, System>,
}

// When lamports are transferred to a new address (without and existing account),
// An account owned by the system program is created by default
pub fn init_rent_vault(ctx: Context<InitRentVault>, fund_lamports: u64) -> Result<()> {
    transfer(
        CpiContext::new(
            ctx.accounts.system_program.to_account_info(),
            Transfer {
                from: ctx.accounts.payer.to_account_info(),
                to: ctx.accounts.rent_vault.to_account_info(),
            },
        ),
        fund_lamports,
    )?;
    Ok(())
}


================================================
File: basics/pda-rent-payer/anchor/programs/anchor-program-example/src/instructions/mod.rs
================================================
pub mod create_new_account;
pub mod init_rent_vault;

pub use create_new_account::*;
pub use init_rent_vault::*;


================================================
File: basics/pda-rent-payer/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml --bpf-out-dir=./program/target/so
solana program deploy ./program/target/so/program.so


================================================
File: basics/pda-rent-payer/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/program.so"
  },
  "dependencies": {
    "@solana/web3.js": "^1.47.3"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/pda-rent-payer/native/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/pda-rent-payer/native/program/Cargo.toml
================================================
[package]
name = "pda-rent-payer-program"
version = "0.1.0"
edition = "2021"

[dependencies]
solana-program = "=1.18.17"
borsh = "0.9.3"
borsh-derive = "0.9.1"

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: basics/pda-rent-payer/native/program/src/lib.rs
================================================
use solana_program::entrypoint;

use processor::process_instruction;

pub mod instructions;
pub mod processor;
pub mod state;

entrypoint!(process_instruction);


================================================
File: basics/pda-rent-payer/native/program/src/processor.rs
================================================
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{account_info::AccountInfo, entrypoint::ProgramResult, pubkey::Pubkey};

use crate::instructions::{
    create_new_account::create_new_account,
    init_rent_vault::{init_rent_vault, InitRentVaultArgs},
};

#[derive(BorshSerialize, BorshDeserialize)]
pub enum MyInstruction {
    InitRentVault(InitRentVaultArgs),
    CreateNewAccount,
}

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    input: &[u8],
) -> ProgramResult {
    let instruction = MyInstruction::try_from_slice(input)?;
    match instruction {
        MyInstruction::InitRentVault(args) => init_rent_vault(program_id, accounts, args),
        MyInstruction::CreateNewAccount => create_new_account(program_id, accounts),
    }
}


================================================
File: basics/pda-rent-payer/native/program/src/instructions/create_new_account.rs
================================================
use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint::ProgramResult,
    pubkey::Pubkey,
    rent::Rent,
    sysvar::Sysvar,
};

use crate::state::RentVault;

pub fn create_new_account(program_id: &Pubkey, accounts: &[AccountInfo]) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    let new_account = next_account_info(accounts_iter)?;
    let rent_vault = next_account_info(accounts_iter)?;
    let _system_program = next_account_info(accounts_iter)?;

    let (rent_vault_pda, _rent_vault_bump) =
        Pubkey::find_program_address(&[RentVault::SEED_PREFIX.as_bytes()], program_id);
    assert!(rent_vault.key.eq(&rent_vault_pda));

    // Assuming this account has no inner data (size 0)
    //
    let lamports_required_for_rent = (Rent::get()?).minimum_balance(0);

    **rent_vault.lamports.borrow_mut() -= lamports_required_for_rent;
    **new_account.lamports.borrow_mut() += lamports_required_for_rent;

    Ok(())
}


================================================
File: basics/pda-rent-payer/native/program/src/instructions/mod.rs
================================================
pub mod create_new_account;
pub mod init_rent_vault;

pub use create_new_account::*;
pub use init_rent_vault::*;


================================================
File: basics/pda-rent-payer/native/program/src/state/mod.rs
================================================
use borsh::{BorshDeserialize, BorshSerialize};

#[derive(BorshDeserialize, BorshSerialize, Debug)]
pub struct RentVault {}

impl RentVault {
    pub const SEED_PREFIX: &'static str = "rent_vault";
}


================================================
File: basics/pda-rent-payer/poseidon/pda_rent_payer/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
pda_rent_payer = "BYj8GpV9hpv9PAVdwoWFCTMkysJkk5jstYjuCrw4pxem"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm run ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/pda-rent-payer/poseidon/pda_rent_payer/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/pda-rent-payer/poseidon/pda_rent_payer/package.json
================================================
{
  "license": "ISC",
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check",
    "ts-mocha": "ts-mocha --project tsconfig.json"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.1",
    "anchor-bankrun": "^0.5.0",
    "solana-bankrun": "^0.4.0"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/pda-rent-payer/poseidon/pda_rent_payer/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/pda-rent-payer/poseidon/pda_rent_payer/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: basics/pda-rent-payer/poseidon/pda_rent_payer/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: basics/pda-rent-payer/poseidon/pda_rent_payer/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: basics/pda-rent-payer/poseidon/pda_rent_payer/programs/pda_rent_payer/Cargo.toml
================================================
[package]
name = "pda_rent_payer"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "pda_rent_payer"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.1"


================================================
File: basics/pda-rent-payer/poseidon/pda_rent_payer/programs/pda_rent_payer/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/pda-rent-payer/poseidon/pda_rent_payer/ts-programs/package.json
================================================
{
  "name": "ts-programs",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@solanaturbine/poseidon": "^0.0.4"
  }
}


================================================
File: basics/pda-rent-payer/poseidon/pda_rent_payer/ts-programs/pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@solanaturbine/poseidon':
        specifier: ^0.0.4
        version: 0.0.4

packages:

  '@solanaturbine/poseidon@0.0.4':
    resolution: {integrity: sha512-VNQRtqobzBT+Wkh8fdPb0WVt12aIlgRJuGDxptclkphXi5w+VHUfMPcBshWSFPZg1nheXYgJABwvffYcyirw1g==}

snapshots:

  '@solanaturbine/poseidon@0.0.4': {}


================================================
File: basics/pda-rent-payer/steel/README.md
================================================
# PDA Rent Payer

**PDA Rent Payer** is a program that uses a PDA to pay the rent
for the creation of a system program by simply transferring lamports to it
        
## API
- [`Consts`](api/src/consts.rs) – Program constants.
- [`Error`](api/src/error.rs) – Custom program errors.
- [`Instruction`](api/src/instruction.rs) – Declared instructions.

## Instructions
- [`Add`](program/src/add.rs) – Add ...
- [`Initialize`](program/src/initialize.rs) – Initialize ...

## State
- [`Counter`](api/src/state/counter.rs) – Counter ...

## Get started

Compile your program:
```sh
steel build
```

Run unit and integration tests:
```sh
steel test
```


================================================
File: basics/pda-rent-payer/steel/Cargo.toml
================================================
[workspace]
resolver = "2"
members = ["api", "program"]

[workspace.package]
version = "0.1.0"
edition = "2021"
license = "Apache-2.0"
homepage = ""
documentation = ""
repository = ""
readme = "./README.md"
keywords = ["solana"]

[workspace.dependencies]
pda-rent-payer-api = { path = "./api", version = "0.1.0" }
borsh = "1.5"
bytemuck = "1.14"
num_enum = "0.7"
solana-program = "1.18"
steel = "2.1"
thiserror = "1.0"


================================================
File: basics/pda-rent-payer/steel/cicd.sh
================================================
#!/bin/bash

# Buld and deploy this program with ease using a single command
# Run this script with "bash cicd.sh" or "./cicd.sh"
# Note: Try running "chmod +x cicd.sh" if you face any issues.

# Check if cargo is installed
if ! command -v cargo &> /dev/null
then
    echo "Cargo could not be found. Please install Rust."
    exit 1
fi

# Check if solana CLI is installed
if ! command -v solana &> /dev/null
then
    echo "Solana CLI could not be found. Please install Solana."
    exit 1
fi


# Build
cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so

# Deploy
solana program deploy ./program/target/so/pda_rent_payer_program.so


================================================
File: basics/pda-rent-payer/steel/package.json
================================================
{
  "name": "pda-rent-payer-program",
  "version": "1.0.0",
  "type": "module",
  "description": "Use a PDA to pay the rent for the creation of a new account.",
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/*.test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/pda_rent_payer_program.so"
  },
  "keywords": ["solana"],
  "author": "",
  "license": "MIT",
  "dependencies": {
    "@solana/web3.js": "^1.95.4"
  },
  "devDependencies": {
    "@types/chai": "^4.3.20",
    "@types/mocha": "^10.0.9",
    "@types/node": "^22.8.5",
    "borsh": "^2.0.0",
    "chai": "^4.5.0",
    "mocha": "^10.8.2",
    "solana-bankrun": "^0.4.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^5.6.3"
  }
}


================================================
File: basics/pda-rent-payer/steel/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai", "node"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "moduleResolution": "node",
    "esModuleInterop": true,
    "strict": true,
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "."
  }
}


================================================
File: basics/pda-rent-payer/steel/.gitignore
================================================
target
test-ledger
node_modules


================================================
File: basics/pda-rent-payer/steel/api/Cargo.toml
================================================
[package]
name = "pda-rent-payer-api"
description = "API for interacting with the PDA rent payer program"
version.workspace = true
edition.workspace = true
license.workspace = true
homepage.workspace = true
documentation.workspace = true
repository.workspace = true
readme.workspace = true
keywords.workspace = true

[dependencies]
borsh.workspace = true
bytemuck.workspace = true
num_enum.workspace = true
solana-program.workspace = true
steel.workspace = true
thiserror.workspace = true


================================================
File: basics/pda-rent-payer/steel/api/src/consts.rs
================================================
// Seed of the rent vault account PDA.
pub const RENT_VAULT: &[u8] = b"rent_vault";

// Seed of the account PDA to be created.
// pub const NEW_ACCOUNT: &[u8] = b"new_account";


================================================
File: basics/pda-rent-payer/steel/api/src/error.rs
================================================
use steel::*;

#[derive(Debug, Error, Clone, Copy, PartialEq, Eq, IntoPrimitive)]
#[repr(u32)]
pub enum PdaRentPayerError {
    #[error("Rent vault account already initialized")]
    RentVaultInitialized = 0,
}

error!(PdaRentPayerError);


================================================
File: basics/pda-rent-payer/steel/api/src/instruction.rs
================================================
use borsh::{BorshDeserialize, BorshSerialize};
use steel::*;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, TryFromPrimitive)]
pub enum PdaRentPayerInstruction {
    InitializeRentVault = 0,
    CreateNewAccount = 1,
}

#[repr(C)]
#[derive(BorshSerialize, BorshDeserialize, Clone, Copy, Debug, Pod, Zeroable)]
pub struct InitializeRentVault {
    pub amount: u64,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct CreateNewAccount {}

instruction!(PdaRentPayerInstruction, InitializeRentVault);
instruction!(PdaRentPayerInstruction, CreateNewAccount);


================================================
File: basics/pda-rent-payer/steel/api/src/lib.rs
================================================
pub mod consts;
pub mod error;
pub mod instruction;
pub mod sdk;
pub mod state;

pub mod prelude {
    pub use crate::consts::*;
    pub use crate::error::*;
    pub use crate::instruction::*;
    pub use crate::sdk::*;
    pub use crate::state::*;
}

use steel::*;

// TODO Set program id
declare_id!("HK5TuboXztZv7anSa3GptyCZ5wMYiqbY8kNSVEtqWDuD");


================================================
File: basics/pda-rent-payer/steel/api/src/sdk.rs
================================================
use steel::*;

use crate::prelude::*;

pub fn init_rent_vault(signer_info: Pubkey, system_program: Pubkey, amount: u64) -> Instruction {
    Instruction {
        program_id: crate::ID,
        accounts: vec![
            AccountMeta::new(signer_info, true),
            AccountMeta::new(rent_vault_pda().0, false),
            AccountMeta::new_readonly(system_program, false),
        ],
        data: InitializeRentVault { amount }.to_bytes(),
    }
}

pub fn create_new_account(rent_vault: Pubkey, new_account: Pubkey) -> Instruction {
    Instruction {
        program_id: crate::ID,
        accounts: vec![
            AccountMeta::new(rent_vault, false),
            AccountMeta::new(new_account, true),
        ],
        data: CreateNewAccount {}.to_bytes(),
    }
}


================================================
File: basics/pda-rent-payer/steel/api/src/state/accounts.rs
================================================
use super::PdaRentPayerAccountDiscriminator;
use steel::*;

/// This empty struct represents the payer vault account
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq, Pod, Zeroable)]
pub struct RentVault {}

/// This empty struct represents the account
/// that the vault will pay for
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq, Pod, Zeroable)]
pub struct NewAccount {}

account!(PdaRentPayerAccountDiscriminator, RentVault);
account!(PdaRentPayerAccountDiscriminator, NewAccount);


================================================
File: basics/pda-rent-payer/steel/api/src/state/mod.rs
================================================
mod accounts;

use crate::consts::*;
pub use accounts::*;
use steel::*;

/// This enum represents the discriminator for the
/// accounts this program can interact with
#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, IntoPrimitive, TryFromPrimitive)]
pub enum PdaRentPayerAccountDiscriminator {
    RentVault = 0,
    NewAccount = 1,
}

/// Fetch PDA of the rent_vault account.
pub fn rent_vault_pda() -> (Pubkey, u8) {
    Pubkey::find_program_address(&[RENT_VAULT], &crate::id())
}


================================================
File: basics/pda-rent-payer/steel/program/Cargo.toml
================================================
[package]
name = "pda-rent-payer-program"
description = ""
version.workspace = true
edition.workspace = true
license.workspace = true
homepage.workspace = true
documentation.workspace = true
repository.workspace = true
readme.workspace = true
keywords.workspace = true

[lib]
crate-type = ["cdylib", "lib"]

[dependencies]
borsh.workspace = true
pda-rent-payer-api.workspace = true
solana-program.workspace = true
steel.workspace = true

[dev-dependencies]
base64 = "0.21"
rand = "0.8.5"
solana-program-test = "1.18"
solana-sdk = "1.18"


================================================
File: basics/pda-rent-payer/steel/program/src/lib.rs
================================================
mod create_new_account;
mod init_rent_vault;

use create_new_account::*;
use init_rent_vault::*;

use pda_rent_payer_api::prelude::*;
use steel::*;

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    data: &[u8],
) -> ProgramResult {
    // Parse instruction automatically detects which instruction is being called
    // based on the discriminator and returns the instruction and the data
    let (ix, data) = parse_instruction(&pda_rent_payer_api::ID, program_id, data)?;

    match ix {
        PdaRentPayerInstruction::InitializeRentVault => process_initialize_vault(accounts, data)?,
        PdaRentPayerInstruction::CreateNewAccount => process_create_account(accounts)?,
    }

    Ok(())
}

entrypoint!(process_instruction);


================================================
File: basics/processing-instructions/README.md
================================================
# Custom Instruction Data

Let's take a look at how to pass our own custom instruction data to a program. This data must be *serialized* to *Berkeley Packet Filter (BPF)* format - which is what the Solana runtime supports for serialized data.

BPF is exactly why we use `cargo build-sbf` to build Solana programs in Rust. For instructions sent over RPC it's no different. We'll use a library called `borsh` on both client and program side.

_____

**For native**, we need to add `borsh` and `borsh-derive` to `Cargo.toml` so we can mark a struct as serializable to/from **BPF format**.

**For Anchor**, you'll see that they've made it quite easy (as in, they do all of the serializing for you).


================================================
File: basics/processing-instructions/anchor/Anchor.toml
================================================
[features]
seeds = false
[programs.localnet]
processing_instructions = "DgoL5J44aspizyUs9fcnpGEUJjWTLJRCfx8eYtUMYczf"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/processing-instructions/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/processing-instructions/anchor/package.json
================================================
{
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/web3.js": "^1.95.2"
  },
  "devDependencies": {
    "anchor-bankrun": "^0.4.0",
    "solana-bankrun": "^0.3.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/processing-instructions/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/processing-instructions/anchor/programs/processing-instructions/Cargo.toml
================================================
[package]
name = "processing-instructions"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "processing_instructions"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.0"


================================================
File: basics/processing-instructions/anchor/programs/processing-instructions/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/processing-instructions/anchor/programs/processing-instructions/src/lib.rs
================================================
#![allow(clippy::result_large_err)]

use anchor_lang::prelude::*;

declare_id!("DgoL5J44aspizyUs9fcnpGEUJjWTLJRCfx8eYtUMYczf");

#[program]
pub mod processing_instructions {
    use super::*;

    // With Anchor, we just put instruction data in the function signature!
    //
    pub fn go_to_park(_ctx: Context<Park>, name: String, height: u32) -> Result<()> {
        msg!("Welcome to the park, {}!", name);
        if height > 5 {
            msg!("You are tall enough to ride this ride. Congratulations.");
        } else {
            msg!("You are NOT tall enough to ride this ride. Sorry mate.");
        };

        Ok(())
    }
}

#[derive(Accounts)]
pub struct Park {}


================================================
File: basics/processing-instructions/anchor/tests/bankrun.test.ts
================================================
import { describe, it } from 'node:test';
import * as anchor from '@coral-xyz/anchor';
import { PublicKey } from '@solana/web3.js';
import { BankrunProvider } from 'anchor-bankrun';
import { startAnchor } from 'solana-bankrun';
import type { ProcessingInstructions } from '../target/types/processing_instructions';

const IDL = require('../target/idl/processing_instructions.json');
const PROGRAM_ID = new PublicKey(IDL.address);

describe('custom-instruction-data', async () => {
  const context = await startAnchor('', [{ name: 'processing_instructions', programId: PROGRAM_ID }], []);
  const provider = new BankrunProvider(context);

  const payer = provider.wallet as anchor.Wallet;
  const program = new anchor.Program<ProcessingInstructions>(IDL, provider);

  it('Go to the park!', async () => {
    // Anchor makes it super simple.
    await program.methods.goToPark('Jimmy', 3).accounts({}).rpc();
    await program.methods.goToPark('Mary', 10).accounts({}).rpc();
  });
});


================================================
File: basics/processing-instructions/anchor/tests/test.ts
================================================
import * as anchor from '@coral-xyz/anchor';
import type { ProcessingInstructions } from '../target/types/processing_instructions';

describe('custom-instruction-data', () => {
  const provider = anchor.AnchorProvider.env();
  anchor.setProvider(provider);
  const program = anchor.workspace.ProcessingInstructions as anchor.Program<ProcessingInstructions>;

  it('Go to the park!', async () => {
    // Again, Anchor makes it super simple.
    //
    await program.methods.goToPark('Jimmy', 3).accounts({}).rpc();
    await program.methods.goToPark('Mary', 10).accounts({}).rpc();
  });
});


================================================
File: basics/processing-instructions/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml --bpf-out-dir=./program/target/so
solana program deploy ./program/target/so/program.so


================================================
File: basics/processing-instructions/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/program.so"
  },
  "dependencies": {
    "@solana/web3.js": "^1.47.3"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/processing-instructions/native/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/processing-instructions/native/program/Cargo.toml
================================================
[package]
name = "processing-instructions-program"
version = "0.1.0"
edition = "2021"

[dependencies]
borsh = "0.9.3"
borsh-derive = "0.9.1"
solana-program = "=1.18.17"

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: basics/processing-instructions/native/program/src/lib.rs
================================================
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    account_info::AccountInfo, entrypoint, entrypoint::ProgramResult, msg, pubkey::Pubkey,
};

entrypoint!(process_instruction);

fn process_instruction(
    _program_id: &Pubkey,
    _accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    // Attempt to serialize the BPF format to our struct
    //  using Borsh
    //
    let instruction_data_object = InstructionData::try_from_slice(instruction_data)?;

    msg!("Welcome to the park, {}!", instruction_data_object.name);
    if instruction_data_object.height > 5 {
        msg!("You are tall enough to ride this ride. Congratulations.");
    } else {
        msg!("You are NOT tall enough to ride this ride. Sorry mate.");
    };

    Ok(())
}

#[derive(BorshSerialize, BorshDeserialize, Debug)]
pub struct InstructionData {
    name: String,
    height: u32,
}


================================================
File: basics/processing-instructions/poseidon/processing-instructions-program/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
processing_instructions_program = "FUfFBrs2nHAud8gVESDMtYa7oa5aGa3DEngKKLGyV2hv"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/processing-instructions/poseidon/processing-instructions-program/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/processing-instructions/poseidon/processing-instructions-program/package.json
================================================
{
  "license": "ISC",
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.1",
    "@solana/web3.js": "^1.95.2"
  },
  "devDependencies": {
    "anchor-bankrun": "^0.4.0",
    "solana-bankrun": "^0.3.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.4.1",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/processing-instructions/poseidon/processing-instructions-program/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/processing-instructions/poseidon/processing-instructions-program/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: basics/processing-instructions/poseidon/processing-instructions-program/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: basics/processing-instructions/poseidon/processing-instructions-program/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: basics/processing-instructions/poseidon/processing-instructions-program/programs/processing-instructions-program/Cargo.toml
================================================
[package]
name = "processing-instructions-program"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "processing_instructions_program"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.1"


================================================
File: basics/processing-instructions/poseidon/processing-instructions-program/programs/processing-instructions-program/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/processing-instructions/poseidon/processing-instructions-program/ts-programs/package.json
================================================
{
  "name": "ts-programs",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@solanaturbine/poseidon": "^0.0.11"
  }
}


================================================
File: basics/processing-instructions/poseidon/processing-instructions-program/ts-programs/pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@solanaturbine/poseidon':
        specifier: ^0.0.11
        version: 0.0.11

packages:

  '@solanaturbine/poseidon@0.0.11':
    resolution: {integrity: sha512-633lfrVIfZ+KNgsa2VCHC5x3KITryO5K+uVTHpuP4bhoNi4smINsFD8uwDCaVAt4uTY0WJO/GuYqFJ+kXMN7pA==}

snapshots:

  '@solanaturbine/poseidon@0.0.11': {}


================================================
File: basics/processing-instructions/poseidon/processing-instructions-program/ts-programs/src/processingInstructionsProgram.ts
================================================
import { Account, Pubkey, type Result, Str, u32 } from '@solanaturbine/poseidon';

export default class ProcessingInstructionsProgram {
  static PROGRAM_ID = new Pubkey('FUfFBrs2nHAud8gVESDMtYa7oa5aGa3DEngKKLGyV2hv');

  go_to_park(height: u32, name: Str<25>): Result {
    // Display a welcome message
    console.log('Welcome to the park,', name);
    // Check if the height is above the threshold
    if (Number(height) > 5) {
      console.log('You are tall enough to ride this ride. Congratulations.');
    } else {
      console.log('You are NOT tall enough to ride this ride. Sorry mate.');
    }
  }
}


================================================
File: basics/processing-instructions/steel/README.md
================================================
# ProcessingInstructions

See the [Processing instructions's README](../README.md) for more information. In our case, we cannot use Borsh for serialization, as we're constrained by the `Steel` framework dependency on PODs (Plain Old Data).

## Building

```sh
cargo build-sbf

```
## Tests

This project includes both:
- Rust tests: [`program/tests`](/program/tests) directory.
- Node.js tests using [Bankrun](https://kevinheavey.github.io/solana-bankrun/): [`tests`](/tests) directory.

```sh
# rust tests
cargo test-sbf 

# node tests
pnpm build-and-test # this will also build the program
#or 
pnpm test # if you have already built the program
```


================================================
File: basics/processing-instructions/steel/Cargo.toml
================================================
[workspace]
resolver = "2"
members = ["api", "program"]

[workspace.package]
version = "0.1.0"
edition = "2021"
license = "Apache-2.0"
homepage = ""
documentation = ""
respository = ""
readme = "./README.md"
keywords = ["solana"]

[workspace.dependencies]
processing-instructions-api = { path = "./api", version = "0.1.0" }
bytemuck = "1.14"
num_enum = "0.7"
solana-program = "1.18"
steel = "2.1"
thiserror = "1.0"


================================================
File: basics/processing-instructions/steel/package.json
================================================
{
  "name": "processing-instructions",
  "version": "1.0.0",
  "description": "",
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/*.test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/processing_instructions_program.so"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@solana/web3.js": "^1.95.4"
  },
  "devDependencies": {
    "@types/chai": "^4.3.7",
    "@types/mocha": "10.0.9",
    "@types/node": "^22.7.4",
    "chai": "^4.3.7",
    "mocha": "10.7.3",
    "solana-bankrun": "0.4.0",
    "ts-mocha": "^10.0.0",
    "typescript": "5.6.3"
  }
}


================================================
File: basics/processing-instructions/steel/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai", "node"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/processing-instructions/steel/.gitignore
================================================
target
test-ledger


================================================
File: basics/processing-instructions/steel/api/Cargo.toml
================================================
[package]
name = "processing-instructions-api"
version = "0.1.0"
edition = "2021"

[dependencies]
bytemuck.workspace = true
num_enum.workspace = true
solana-program.workspace = true
steel.workspace = true
thiserror.workspace = true


================================================
File: basics/processing-instructions/steel/api/src/lib.rs
================================================
pub mod instruction;
pub mod sdk;

pub mod prelude {
    pub use crate::instruction::*;
    pub use crate::sdk::*;
}

use steel::*;

// TODO Set program id
declare_id!("z7msBPQHDJjTvdQRoEcKyENgXDhSRYeHieN1ZMTqo35");


================================================
File: basics/processing-instructions/steel/api/src/sdk.rs
================================================
use steel::*;

use crate::prelude::*;

pub fn go_to_the_park(signer: Pubkey, data: GoToTheParkData) -> Instruction {
    Instruction {
        program_id: crate::ID,
        accounts: vec![AccountMeta::new(signer, true)],
        data: GoToThePark { data }.to_bytes(),
    }
}


================================================
File: basics/processing-instructions/steel/program/Cargo.toml
================================================
[package]
name = "processing-instructions-program"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]

[dependencies]
processing-instructions-api.workspace = true
solana-program.workspace = true
steel.workspace = true

[dev-dependencies]
bs64 = "0.1.2"
rand = "0.8.5"
solana-program-test = "1.18"
solana-sdk = "1.18"
tokio = { version = "1.35", features = ["full"] }


================================================
File: basics/processing-instructions/steel/program/src/go_to_the_park.rs
================================================
use processing_instructions_api::prelude::*;
use steel::*;

use solana_program::msg;

pub fn process_go_to_the_park(accounts: &[AccountInfo<'_>], data: &[u8]) -> ProgramResult {
    msg!("Processing GoToThePark instruction");

    // Parse args.
    let args = GoToThePark::try_from_bytes(data)?;

    // Load accounts.
    let [signer_info] = accounts else {
        return Err(ProgramError::NotEnoughAccountKeys);
    };
    signer_info.is_signer()?;

    msg!("Welcome to the park, {}!", args.data.name());

    if args.data.height() > 5 {
        msg!("You are tall enough to ride this ride. Congratulations.");
    } else {
        msg!("You are NOT tall enough to ride this ride. Sorry mate.");
    };

    Ok(())
}


================================================
File: basics/processing-instructions/steel/program/src/lib.rs
================================================
mod go_to_the_park;

use go_to_the_park::*;
use processing_instructions_api::prelude::*;
use solana_program::msg;
use steel::*;

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    msg!("Processing instruction");

    let (ix, data) = parse_instruction(
        &processing_instructions_api::ID,
        program_id,
        instruction_data,
    )?;

    match ix {
        ProcessingInstructionsInstruction::GoToThePark => process_go_to_the_park(accounts, data)?,
    }

    Ok(())
}

entrypoint!(process_instruction);


================================================
File: basics/program-derived-addresses/anchor/Anchor.toml
================================================
[features]
seeds = false
[programs.localnet]
anchor_program_example = "oCCQRZyAbVxujyd8m57MPmDzZDmy2FoKW4ULS7KofCE"

[registry]
url = "https://anchor.projectserum.com"

[provider]
cluster = "localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/program-derived-addresses/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/program-derived-addresses/anchor/package.json
================================================
{
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/web3.js": "^1.95.2"
  },
  "devDependencies": {
    "anchor-bankrun": "^0.4.0",
    "solana-bankrun": "^0.3.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/program-derived-addresses/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/program-derived-addresses/anchor/programs/anchor-program-example/Cargo.toml
================================================
[package]
name = "anchor-program-example"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "anchor_program_example"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.0"


================================================
File: basics/program-derived-addresses/anchor/programs/anchor-program-example/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/program-derived-addresses/anchor/programs/anchor-program-example/src/lib.rs
================================================
#![allow(clippy::result_large_err)]

use anchor_lang::prelude::*;

use instructions::*;

pub mod instructions;
pub mod state;

declare_id!("oCCQRZyAbVxujyd8m57MPmDzZDmy2FoKW4ULS7KofCE");

#[program]
pub mod anchor_program_example {
    use super::*;

    pub fn create_page_visits(ctx: Context<CreatePageVisits>) -> Result<()> {
        create::create_page_visits(ctx)
    }

    pub fn increment_page_visits(ctx: Context<IncrementPageVisits>) -> Result<()> {
        increment::increment_page_visits(ctx)
    }
}


================================================
File: basics/program-derived-addresses/anchor/programs/anchor-program-example/src/instructions/create.rs
================================================
use crate::state::PageVisits;
use anchor_lang::prelude::*;

#[derive(Accounts)]
pub struct CreatePageVisits<'info> {
    #[account(mut)]
    payer: Signer<'info>,

    #[account(
        init,
        space = 8 + PageVisits::INIT_SPACE,
        payer = payer,
        seeds = [
            PageVisits::SEED_PREFIX,
            payer.key().as_ref(),
        ],
        bump,
    )]
    page_visits: Account<'info, PageVisits>,
    system_program: Program<'info, System>,
}

pub fn create_page_visits(ctx: Context<CreatePageVisits>) -> Result<()> {
    *ctx.accounts.page_visits = PageVisits {
        page_visits: 0,
        bump: ctx.bumps.page_visits,
    };

    Ok(())
}


================================================
File: basics/program-derived-addresses/anchor/programs/anchor-program-example/src/instructions/increment.rs
================================================
use crate::state::PageVisits;
use anchor_lang::prelude::*;

#[derive(Accounts)]
pub struct IncrementPageVisits<'info> {
    user: SystemAccount<'info>,
    #[account(
        mut,
        seeds = [
            PageVisits::SEED_PREFIX,
            user.key().as_ref(),
        ],
        bump = page_visits.bump,
    )]
    page_visits: Account<'info, PageVisits>,
}

pub fn increment_page_visits(ctx: Context<IncrementPageVisits>) -> Result<()> {
    let page_visits = &mut ctx.accounts.page_visits;
    page_visits.increment();
    Ok(())
}


================================================
File: basics/program-derived-addresses/anchor/programs/anchor-program-example/src/instructions/mod.rs
================================================
pub mod create;
pub mod increment;

pub use create::*;
pub use increment::*;


================================================
File: basics/program-derived-addresses/anchor/programs/anchor-program-example/src/state/mod.rs
================================================
pub mod page_visits;

pub use page_visits::*;


================================================
File: basics/program-derived-addresses/anchor/programs/anchor-program-example/src/state/page_visits.rs
================================================
use anchor_lang::prelude::*;

#[account]
#[derive(InitSpace)] // automatically calculate the space required for the struct
pub struct PageVisits {
    pub page_visits: u32,
    pub bump: u8,
}

impl PageVisits {
    pub const SEED_PREFIX: &'static [u8; 11] = b"page_visits";

    pub fn increment(&mut self) {
        self.page_visits = self.page_visits.checked_add(1).unwrap();
    }
}


================================================
File: basics/program-derived-addresses/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml --bpf-out-dir=./program/target/so
solana program deploy ./program/target/so/program.so


================================================
File: basics/program-derived-addresses/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/program.so"
  },
  "dependencies": {
    "@solana/web3.js": "^1.47.3",
    "fs": "^0.0.1-security"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/program-derived-addresses/native/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/program-derived-addresses/native/program/Cargo.toml
================================================
[package]
name = "program-derived-addresses-program"
version = "0.1.0"
edition = "2021"

[dependencies]
solana-program = "=1.18.17"
borsh = "0.9.3"
borsh-derive = "0.9.1"

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: basics/program-derived-addresses/native/program/src/lib.rs
================================================
use solana_program::entrypoint;

use processor::process_instruction;

pub mod instructions;
pub mod processor;
pub mod state;

entrypoint!(process_instruction);


================================================
File: basics/program-derived-addresses/native/program/src/processor.rs
================================================
use borsh::BorshDeserialize;
use solana_program::{
    account_info::AccountInfo, entrypoint::ProgramResult, program_error::ProgramError,
    pubkey::Pubkey,
};

use crate::instructions;
use crate::state::IncrementPageVisits;
use crate::state::PageVisits;

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    if let Ok(page_visits) = PageVisits::try_from_slice(instruction_data) {
        return instructions::create::create_page_visits(program_id, accounts, page_visits);
    };

    if IncrementPageVisits::try_from_slice(instruction_data).is_ok() {
        return instructions::increment::increment_page_visits(accounts);
    }

    Err(ProgramError::InvalidInstructionData)
}


================================================
File: basics/program-derived-addresses/native/program/src/instructions/increment.rs
================================================
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint::ProgramResult,
};

use crate::state::PageVisits;

pub fn increment_page_visits(accounts: &[AccountInfo]) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    let page_visits_account = next_account_info(accounts_iter)?;

    let page_visits = &mut PageVisits::try_from_slice(&page_visits_account.data.borrow())?;
    page_visits.increment();
    page_visits.serialize(&mut &mut page_visits_account.data.borrow_mut()[..])?;
    Ok(())
}


================================================
File: basics/program-derived-addresses/native/program/src/instructions/mod.rs
================================================
pub mod create;
pub mod increment;

pub use create::*;
pub use increment::*;


================================================
File: basics/program-derived-addresses/native/program/src/state/mod.rs
================================================
pub mod page_visits;

pub use page_visits::*;


================================================
File: basics/program-derived-addresses/native/program/src/state/page_visits.rs
================================================
use borsh::{BorshDeserialize, BorshSerialize};

#[derive(BorshDeserialize, BorshSerialize, Debug)]
pub struct IncrementPageVisits {}

#[derive(BorshDeserialize, BorshSerialize, Debug)]
pub struct PageVisits {
    pub page_visits: u32,
    pub bump: u8,
}

impl PageVisits {
    pub const ACCOUNT_SPACE: usize = 8 + 32;

    pub const SEED_PREFIX: &'static str = "page_visits";

    pub fn new(page_visits: u32, bump: u8) -> Self {
        PageVisits { page_visits, bump }
    }

    pub fn increment(&mut self) {
        self.page_visits += 1;
    }
}


================================================
File: basics/program-derived-addresses/poseidon/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
program_derived_addresses = "GBQw9SP64U2WYhRwwWCQswd4KPcK19cSSw7BvdxK9hyG"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/program-derived-addresses/poseidon/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/program-derived-addresses/poseidon/package.json
================================================
{
  "license": "ISC",
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.1"
  },
  "devDependencies": {
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "typescript": "^4.3.5",
    "prettier": "^2.6.2"
  }
}


================================================
File: basics/program-derived-addresses/poseidon/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/program-derived-addresses/poseidon/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn
app
migrations


================================================
File: basics/program-derived-addresses/poseidon/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: basics/program-derived-addresses/poseidon/programs/program-derived-addresses/Cargo.toml
================================================
[package]
name = "program-derived-addresses"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "program_derived_addresses"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.1"


================================================
File: basics/program-derived-addresses/poseidon/programs/program-derived-addresses/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/program-derived-addresses/poseidon/ts-programs/package.json
================================================
{
  "name": "ts-programs",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@solanaturbine/poseidon": "^0.0.8"
  }
}


================================================
File: basics/program-derived-addresses/steel/README.md
================================================
# Program Derived Addresses

This program demonstrates how to derive addresses. It will use a PDA to store a counter of visits and increment it.

## Building

```sh
cargo build-sbf

```
## Tests

This project includes both:
- Rust tests: [`program/tests`](/program/tests) directory.
- Node.js tests using [Bankrun](https://kevinheavey.github.io/solana-bankrun/): [`tests`](/tests) directory.

```sh
# rust tests
cargo test-sbf 

# node tests
pnpm build-and-test # this will also build the program
#or 
pnpm test # if you have already built the program
```


================================================
File: basics/program-derived-addresses/steel/Cargo.toml
================================================
[workspace]
resolver = "2"
members = ["api", "program"]

[workspace.package]
version = "0.1.0"
edition = "2021"
license = "Apache-2.0"
homepage = ""
documentation = ""
respository = ""
readme = "./README.md"
keywords = ["solana"]

[workspace.dependencies]
program-derived-addresses-api = { path = "./api", version = "0.1.0" }
bytemuck = "1.14"
num_enum = "0.7"
solana-program = "1.18"
steel = "2.1"
thiserror = "1.0"


================================================
File: basics/program-derived-addresses/steel/package.json
================================================
{
  "name": "program-derived-addresses",
  "version": "1.0.0",
  "description": "",
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/*.test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/program_derived_addresses_program.so"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@solana/web3.js": "^1.95.4"
  },
  "devDependencies": {
    "@types/chai": "^4.3.7",
    "@types/mocha": "10.0.9",
    "@types/node": "^22.7.4",
    "borsh": "^2.0.0",
    "chai": "^4.3.7",
    "mocha": "10.7.3",
    "solana-bankrun": "0.4.0",
    "ts-mocha": "^10.0.0",
    "typescript": "5.6.3"
  }
}


================================================
File: basics/program-derived-addresses/steel/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai", "node"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/program-derived-addresses/steel/.gitignore
================================================
target
test-ledger


================================================
File: basics/program-derived-addresses/steel/api/Cargo.toml
================================================
[package]
name = "program-derived-addresses-api"
version = "0.1.0"
edition = "2021"

[dependencies]
bytemuck.workspace = true
num_enum.workspace = true
solana-program.workspace = true
steel.workspace = true
thiserror.workspace = true


================================================
File: basics/program-derived-addresses/steel/api/src/consts.rs
================================================
/// Seed of the account PDA.
pub const SEED: &[u8] = b"program-derived-addresses";


================================================
File: basics/program-derived-addresses/steel/api/src/instruction.rs
================================================
use steel::*;

use crate::state::PageVisits;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, TryFromPrimitive)]
pub enum ProgramDerivedAddressesInstruction {
    Create = 0,
    Increment = 1,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct Create {
    pub page_visits: PageVisits,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct Increment {}

instruction!(ProgramDerivedAddressesInstruction, Create);
instruction!(ProgramDerivedAddressesInstruction, Increment);


================================================
File: basics/program-derived-addresses/steel/api/src/lib.rs
================================================
pub mod consts;
pub mod instruction;
pub mod sdk;
pub mod state;

pub mod prelude {
    pub use crate::consts::*;
    pub use crate::instruction::*;
    pub use crate::sdk::*;
    pub use crate::state::*;
}

use steel::*;

// TODO Set program id
declare_id!("z7msBPQHDJjTvdQRoEcKyENgXDhSRYeHieN1ZMTqo35");


================================================
File: basics/program-derived-addresses/steel/api/src/sdk.rs
================================================
use steel::*;

use crate::prelude::*;

pub fn create(signer: Pubkey, user: Pubkey, page_visits: PageVisits) -> Instruction {
    let pda = page_visits_pda(&user);
    Instruction {
        program_id: crate::ID,
        accounts: vec![
            AccountMeta::new(signer, true),
            AccountMeta::new(user, false),
            AccountMeta::new(pda.0, false),
            AccountMeta::new_readonly(system_program::ID, false),
        ],
        data: Create { page_visits }.to_bytes(),
    }
}

pub fn increment(page_visits_pda: Pubkey) -> Instruction {
    Instruction {
        program_id: crate::ID,
        accounts: vec![AccountMeta::new(page_visits_pda, false)],
        data: Increment {}.to_bytes(),
    }
}


================================================
File: basics/program-derived-addresses/steel/api/src/state.rs
================================================
use steel::*;

use crate::consts::*;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, IntoPrimitive, TryFromPrimitive)]
pub enum ProgramDerivedAddressesAccount {
    PageVisits = 0,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq, Pod, Zeroable)]
pub struct PageVisits {
    pub page_visits: [u8; 4], // u32
    pub bump: [u8; 1],
}

impl PageVisits {
    pub fn increment_visits(&mut self) {
        let visits = u32::from_le_bytes(self.page_visits);
        self.page_visits = (visits + 1).to_le_bytes();
    }

    pub fn page_visits(&self) -> u32 {
        u32::from_le_bytes(self.page_visits)
    }
}

account!(ProgramDerivedAddressesAccount, PageVisits);

/// Fetch PDA of the PageVisit account.
pub fn page_visits_pda(user: &Pubkey) -> (Pubkey, u8) {
    Pubkey::find_program_address(&[SEED, user.as_ref()], &crate::id())
}


================================================
File: basics/program-derived-addresses/steel/program/Cargo.toml
================================================
[package]
name = "program-derived-addresses-program"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]

[dependencies]
program-derived-addresses-api.workspace = true
solana-program.workspace = true
steel.workspace = true

[dev-dependencies]
bs64 = "0.1.2"
rand = "0.8.5"
solana-program-test = "1.18"
solana-sdk = "1.18"
tokio = { version = "1.35", features = ["full"] }


================================================
File: basics/program-derived-addresses/steel/program/src/increment.rs
================================================
use program_derived_addresses_api::prelude::*;
use solana_program::msg;
use steel::*;

pub fn process_increment(accounts: &[AccountInfo<'_>], _data: &[u8]) -> ProgramResult {
    msg!("Processing Create instruction");

    // load accounts.
    let [page_visit_info] = accounts else {
        return Err(ProgramError::NotEnoughAccountKeys);
    };

    let info = page_visit_info.as_account_mut::<PageVisits>(&program_derived_addresses_api::ID)?;

    // increment page visits
    info.increment_visits();

    Ok(())
}


================================================
File: basics/program-derived-addresses/steel/program/src/lib.rs
================================================
mod create;
mod increment;

use create::*;
use increment::*;

use program_derived_addresses_api::prelude::*;
use steel::*;

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    let (ix, data) = parse_instruction(
        &program_derived_addresses_api::ID,
        program_id,
        instruction_data,
    )?;

    match ix {
        ProgramDerivedAddressesInstruction::Create => process_create(accounts, data)?,
        ProgramDerivedAddressesInstruction::Increment => process_increment(accounts, data)?,
    }

    Ok(())
}

entrypoint!(process_instruction);


================================================
File: basics/realloc/anchor/Anchor.toml
================================================
[features]
seeds = false
skip-lint = false

[programs.localnet]
anchor_realloc = "Fod47xKXjdHVQDzkFPBvfdWLm8gEAV4iMSXkfUzCHiSD"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/realloc/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/realloc/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/web3.js": "^1.95.2"
  },
  "devDependencies": {
    "anchor-bankrun": "^0.4.0",
    "solana-bankrun": "^0.3.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.4.1",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/realloc/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/realloc/anchor/.gitignore
================================================

.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: basics/realloc/anchor/.prettierignore
================================================

.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: basics/realloc/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: basics/realloc/anchor/programs/anchor-realloc/Cargo.toml
================================================
[package]
name = "anchor-realloc"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "anchor_realloc"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.0"


================================================
File: basics/realloc/anchor/programs/anchor-realloc/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/realloc/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml --bpf-out-dir=./program/target/so
solana program deploy ./program/target/so/program.so


================================================
File: basics/realloc/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tests/tsconfig.test.json -t 1000000 ./tests/realloc.test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/program.so"
  },
  "dependencies": {
    "@solana/web3.js": "^1.35",
    "fs": "^0.0.1-security"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/realloc/native/program/Cargo.toml
================================================
[package]
name = "realloc-program"
version = "0.1.0"
edition = "2021"

[dependencies]
borsh = "0.9.3"
borsh-derive = "0.9.1"
solana-program = "=1.18.17"

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: basics/realloc/native/program/src/lib.rs
================================================
pub mod instructions;
pub mod processor;
pub mod state;

use {crate::processor::process_instruction, solana_program::entrypoint};

entrypoint!(process_instruction);


================================================
File: basics/realloc/native/program/src/processor.rs
================================================
use crate::instructions::*;
use crate::state::*;
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{account_info::AccountInfo, entrypoint::ProgramResult, pubkey::Pubkey};

#[derive(BorshSerialize, BorshDeserialize, Debug)]
pub enum ReallocInstruction {
    Create(AddressInfo),
    ReallocateWithoutZeroInit(EnhancedAddressInfoExtender),
    ReallocateZeroInit(WorkInfo),
}

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    input: &[u8],
) -> ProgramResult {
    let instruction = ReallocInstruction::try_from_slice(input)?;
    match instruction {
        ReallocInstruction::Create(data) => create_address_info(program_id, accounts, data),
        ReallocInstruction::ReallocateWithoutZeroInit(data) => {
            reallocate_without_zero_init(accounts, data)
        }
        ReallocInstruction::ReallocateZeroInit(data) => reallocate_zero_init(accounts, data),
    }
}


================================================
File: basics/realloc/native/program/src/instructions/mod.rs
================================================
pub mod create;
pub mod reallocate;

pub use create::*;
pub use reallocate::*;


================================================
File: basics/realloc/native/program/src/state/address_info.rs
================================================
use borsh::{BorshDeserialize, BorshSerialize};

#[derive(BorshDeserialize, BorshSerialize, Debug)]
pub struct AddressInfo {
    pub name: String,
    pub house_number: u8,
    pub street: String,
    pub city: String,
}

impl AddressInfo {
    pub fn new(name: String, house_number: u8, street: String, city: String) -> Self {
        AddressInfo {
            name,
            house_number,
            street,
            city,
        }
    }
}


================================================
File: basics/realloc/native/program/src/state/enhanced_address_info.rs
================================================
use borsh::{BorshDeserialize, BorshSerialize};

use crate::state::AddressInfo;

#[derive(BorshDeserialize, BorshSerialize, Debug)]
pub struct EnhancedAddressInfoExtender {
    pub state: String,
    pub zip: u32,
}

#[derive(BorshDeserialize, BorshSerialize, Debug)]
pub struct EnhancedAddressInfo {
    pub name: String,
    pub house_number: u8,
    pub street: String,
    pub city: String,
    pub state: String,
    pub zip: u32,
}

impl EnhancedAddressInfo {
    pub fn from_address_info(address_info: AddressInfo, state: String, zip: u32) -> Self {
        EnhancedAddressInfo {
            name: address_info.name,
            house_number: address_info.house_number,
            street: address_info.street,
            city: address_info.city,
            state,
            zip,
        }
    }
}


================================================
File: basics/realloc/native/program/src/state/mod.rs
================================================
pub mod address_info;
pub mod enhanced_address_info;
pub mod work_info;

pub use address_info::*;
pub use enhanced_address_info::*;
pub use work_info::*;


================================================
File: basics/realloc/native/program/src/state/work_info.rs
================================================
use borsh::{BorshDeserialize, BorshSerialize};

#[derive(BorshDeserialize, BorshSerialize, Debug)]
pub struct WorkInfo {
    pub name: String,
    pub position: String,
    pub company: String,
    pub years_employed: u8,
}

impl WorkInfo {
    pub fn new(name: String, position: String, company: String, years_employed: u8) -> Self {
        WorkInfo {
            name,
            position,
            company,
            years_employed,
        }
    }
}


================================================
File: basics/realloc/native/tests/tsconfig.test.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/realloc/native/ts/index.ts
================================================
export * from './instructions/create';
export * from './instructions/instruction';
export * from './instructions/reallocate';
export * from './state/address-info';
export * from './state/enhanced-address-info';
export * from './state/work-info';
export * from './util/util';


================================================
File: basics/realloc/native/ts/instructions/index.ts
================================================
export * from './create';
export * from './instruction';
export * from './reallocate';


================================================
File: basics/realloc/native/ts/instructions/instruction.ts
================================================
export enum ReallocInstruction {
  Create = 0,
  ReallocateWithoutZeroInit = 1,
  ReallocateZeroInit = 2,
}


================================================
File: basics/realloc/native/ts/state/address-info.ts
================================================
import { Buffer } from 'node:buffer';
import * as borsh from 'borsh';

export class AddressInfo {
  name: string;
  house_number: number;
  street: string;
  city: string;

  constructor(props: {
    name: string;
    house_number: number;
    street: string;
    city: string;
  }) {
    this.name = props.name;
    this.house_number = props.house_number;
    this.street = props.street;
    this.city = props.city;
  }

  toBase58() {
    return borsh.serialize(AddressInfoSchema, this).toString();
  }

  toBuffer() {
    return Buffer.from(borsh.serialize(AddressInfoSchema, this));
  }

  static fromBuffer(buffer: Buffer) {
    return borsh.deserialize(AddressInfoSchema, AddressInfo, buffer);
  }
}

export const AddressInfoSchema = new Map([
  [
    AddressInfo,
    {
      kind: 'struct',
      fields: [
        ['name', 'string'],
        ['house_number', 'u8'],
        ['street', 'string'],
        ['city', 'string'],
      ],
    },
  ],
]);


================================================
File: basics/realloc/native/ts/state/index.ts
================================================
export * from './address-info';
export * from './enhanced-address-info';
export * from './work-info';


================================================
File: basics/realloc/native/ts/state/work-info.ts
================================================
import { Buffer } from 'node:buffer';
import * as borsh from 'borsh';

export class WorkInfo {
  name: string;
  position: string;
  company: string;
  years_employed: number;

  constructor(props: {
    name: string;
    position: string;
    company: string;
    years_employed: number;
  }) {
    this.name = props.name;
    this.position = props.position;
    this.company = props.company;
    this.years_employed = props.years_employed;
  }

  toBase58() {
    return borsh.serialize(WorkInfoSchema, this).toString();
  }

  toBuffer() {
    return Buffer.from(borsh.serialize(WorkInfoSchema, this));
  }

  static fromBuffer(buffer: Buffer) {
    return borsh.deserialize(WorkInfoSchema, WorkInfo, buffer);
  }
}

export const WorkInfoSchema = new Map([
  [
    WorkInfo,
    {
      kind: 'struct',
      fields: [
        ['name', 'string'],
        ['position', 'string'],
        ['company', 'string'],
        ['years_employed', 'u8'],
      ],
    },
  ],
]);


================================================
File: basics/realloc/native/ts/util/index.ts
================================================
export * from './util';


================================================
File: basics/realloc/native/ts/util/util.ts
================================================
import { Keypair } from '@solana/web3.js';

export function createKeypairFromFile(path: string): Keypair {
  return Keypair.fromSecretKey(Buffer.from(JSON.parse(require('node:fs').readFileSync(path, 'utf-8'))));
}


================================================
File: basics/realloc/poseidon/realloc-program/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
realloc_program = "7T1DgawXjJD6kGaC43ujSw2xXLhn7w28MGzyD7oV8Q1B"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/realloc/poseidon/realloc-program/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/realloc/poseidon/realloc-program/package.json
================================================
{
  "license": "ISC",
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/web3.js": "^1.95.2"
  },
  "devDependencies": {
    "anchor-bankrun": "^0.4.0",
    "solana-bankrun": "^0.3.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.4.1",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/realloc/poseidon/realloc-program/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/realloc/poseidon/realloc-program/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: basics/realloc/poseidon/realloc-program/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: basics/realloc/poseidon/realloc-program/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: basics/realloc/poseidon/realloc-program/programs/realloc-program/Cargo.toml
================================================
[package]
name = "realloc-program"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "realloc_program"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.1"


================================================
File: basics/realloc/poseidon/realloc-program/programs/realloc-program/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/realloc/poseidon/realloc-program/ts-programs/package.json
================================================
{
  "name": "ts-programs",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@solanaturbine/poseidon": "^0.0.11"
  }
}


================================================
File: basics/realloc/poseidon/realloc-program/ts-programs/pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@solanaturbine/poseidon':
        specifier: ^0.0.11
        version: 0.0.11

packages:

  '@solanaturbine/poseidon@0.0.11':
    resolution: {integrity: sha512-633lfrVIfZ+KNgsa2VCHC5x3KITryO5K+uVTHpuP4bhoNi4smINsFD8uwDCaVAt4uTY0WJO/GuYqFJ+kXMN7pA==}

snapshots:

  '@solanaturbine/poseidon@0.0.11': {}


================================================
File: basics/realloc/poseidon/realloc-program/ts-programs/src/reallocProgram.ts
================================================
import { Account, Pubkey, Result, Signer, Str, SystemAccount, u8 } from '@solanaturbine/poseidon';

// Note:
// Realloc Program:

// Due to current limitations in Poseidon, dynamic allocation (reallocation) is not supported on Poseidon right now.
// As a result, this example uses fixed-sized fields to work around the limitation.
// In typical Solana programs using Anchor, dynamic reallocation allows accounts to resize based on the input data.

export default class ReallocProgram {
  static PROGRAM_ID = new Pubkey('7T1DgawXjJD6kGaC43ujSw2xXLhn7w28MGzyD7oV8Q1B');

  initialize(payer: Signer, account: MessageAccountState, input: Str<25>): Result {
    account.derive(['message']).init(payer);

    account.message = input;

    account.bump = account.getBump();
  }

  update(payer: Signer, account: MessageAccountState, input: Str<25>): Result {
    account.derive(['message']);

    account.message = input;
  }
}

export interface MessageAccountState extends Account {
  message: Str<25>;

  bump: u8;
}


================================================
File: basics/realloc/steel/README.md
================================================
# Realloc

**Realloc** is a ...
        
## API
- [`Consts`](api/src/consts.rs) – Program constants.
- [`Error`](api/src/error.rs) – Custom program errors.
- [`Event`](api/src/event.rs) – Custom program events.
- [`Instruction`](api/src/instruction.rs) – Declared instructions.

## Instructions
- [`Add`](program/src/add.rs) – Add ...
- [`Initialize`](program/src/initialize.rs) – Initialize ...

## State
- [`Counter`](api/src/state/counter.rs) – Counter ...

## Get started

Compile your program:
```sh
steel build
```

Run unit and integration tests:
```sh
steel test
```


================================================
File: basics/realloc/steel/Cargo.toml
================================================
[workspace]
resolver = "2"
members = ["api", "program"]

[workspace.package]
version = "0.1.0"
edition = "2021"
license = "Apache-2.0"
homepage = ""
documentation = ""
repository = ""
readme = "./README.md"
keywords = ["solana"]

[workspace.dependencies]
realloc-api = { path = "./api", version = "0.1.0" }
bytemuck = "1.14"
num_enum = "0.7"
solana-program = "1.18"
steel = "2.0"
thiserror = "1.0"


================================================
File: basics/realloc/steel/.gitignore
================================================
target
test-ledger


================================================
File: basics/realloc/steel/api/Cargo.toml
================================================
[package]
name = "realloc-api"
description = "API for interacting with the Realloc program"
version.workspace = true
edition.workspace = true
license.workspace = true
homepage.workspace = true
documentation.workspace = true
repository.workspace = true
readme.workspace = true
keywords.workspace = true

[dependencies]
bytemuck.workspace = true
num_enum.workspace = true
solana-program.workspace = true
steel.workspace = true
thiserror.workspace = true


================================================
File: basics/realloc/steel/api/src/consts.rs
================================================
/// Seed of the address_info account PDA.
pub const ADDRESS_INFO: &[u8] = b"address_info";

pub const MAX_STR_LEN: usize = 32;


================================================
File: basics/realloc/steel/api/src/error.rs
================================================
use steel::*;

#[derive(Debug, Error, Clone, Copy, PartialEq, Eq, IntoPrimitive)]
#[repr(u32)]
pub enum ReallocError {
    #[error("This is a dummy error")]
    Dummy = 0,
}

error!(ReallocError);


================================================
File: basics/realloc/steel/api/src/instruction.rs
================================================
use steel::*;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, TryFromPrimitive)]
pub enum ReallocInstruction {
    Initialize = 0,
    Add = 1
}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct Initialize {}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct Add {
    pub amount: [u8; 8]
}

instruction!(ReallocInstruction, Initialize);
instruction!(ReallocInstruction, Add);


================================================
File: basics/realloc/steel/api/src/lib.rs
================================================
pub mod consts;
pub mod error;
pub mod instruction;
pub mod sdk;
pub mod state;
pub mod utils;

pub mod prelude {
    pub use crate::consts::*;
    pub use crate::error::*;
    pub use crate::instruction::*;
    pub use crate::sdk::*;
    pub use crate::state::*;
    pub use crate::utils::*;
}

use steel::*;

// TODO Set program id
declare_id!("z7msBPQHDJjTvdQRoEcKyENgXDhSRYeHieN1ZMTqo35");


================================================
File: basics/realloc/steel/api/src/sdk.rs
================================================
use steel::*;

use crate::prelude::*;

pub fn initialize(signer: Pubkey) -> Instruction {
    Instruction {
        program_id: crate::ID,
        accounts: vec![
            AccountMeta::new(signer, true),
            AccountMeta::new(counter_pda().0, false),
            AccountMeta::new_readonly(system_program::ID, false),
        ],
        data: Initialize {}.to_bytes()
    }
}

pub fn add(signer: Pubkey, amount: u64) -> Instruction {
    Instruction {
        program_id: crate::ID,
        accounts: vec![
            AccountMeta::new(signer, true),
            AccountMeta::new(counter_pda().0, false),
        ],
        data: Add {
            amount: amount.to_le_bytes(),
        }
        .to_bytes(),
    }
}


================================================
File: basics/realloc/steel/api/src/utils.rs
================================================
pub fn str_to_bytes(name: &str) -> [u8; MAX_STR_LEN] {
    let mut name_bytes = [0u8; MAX_STR_LEN];
    name_bytes[..name.len()].copy_from_slice(name.as_bytes());
    name_bytes
}


================================================
File: basics/realloc/steel/api/src/state/address_info.rs
================================================
use crate::consts::*;
use crate::utils::*;
use steel::*;

use super::ReallocAccount;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq, Pod, Zeroable)]
pub struct AddressInfo {
    pub name: [u8; MAX_STR_LEN],
    pub house_number: u8,
    pub street: [u8; MAX_STR_LEN],
    pub city: [u8; MAX_STR_LEN],
}

impl AddressInfo {
    pub fn new(name: &str, house_number: u8, street: &str, city: &str) -> Self {
        AddressInfo {
            name: str_to_bytes(name),
            house_number,
            street: str_to_bytes(street),
            city: str_to_bytes(city),
        }
    }
}

account!(ReallocAccount, AddressInfo);


================================================
File: basics/realloc/steel/api/src/state/mod.rs
================================================
mod address_info;
mod enchanced_address_info;
mod work_info;

pub use address_info::*;
pub use enchanced_address_info::*;
pub use work_info::*;

use steel::*;

use crate::consts::*;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, IntoPrimitive, TryFromPrimitive)]
pub enum ReallocAccount {
    AddressInfo = 0,
    EnhancedAddressInfo = 1,
    EnhancedAddressInfoExtender = 2,
    WorkInfo = 3,
}

/// Fetch PDA of the counter account.
pub fn counter_pda() -> (Pubkey, u8) {
    Pubkey::find_program_address(&[COUNTER], &crate::id())
}


================================================
File: basics/realloc/steel/api/src/state/work_info.rs
================================================
use crate::consts::*;
use crate::utils::*;
use steel::*;

use super::ReallocAccount;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq, Pod, Zeroable)]
pub struct WorkInfo {
    pub name: [u8; MAX_STR_LEN],
    pub position: [u8; MAX_STR_LEN],
    pub company: [u8; MAX_STR_LEN],
    pub years_employed: u8,
}

impl WorkInfo {
    pub fn new(name: &str, position: &str, company: &str, years_employed: u8) -> Self {
        WorkInfo {
            name: str_to_bytes(name),
            position: str_to_bytes(position),
            company: str_to_bytes(company),
            years_employed,
        }
    }
}

account!(ReallocAccount, WorkInfo);


================================================
File: basics/realloc/steel/program/Cargo.toml
================================================
[package]
name = "realloc-program"
description = ""
version.workspace = true
edition.workspace = true
license.workspace = true
homepage.workspace = true
documentation.workspace = true
repository.workspace = true
readme.workspace = true
keywords.workspace = true

[lib]
crate-type = ["cdylib", "lib"]

[dependencies]
realloc-api.workspace = true
solana-program.workspace = true
steel.workspace = true

[dev-dependencies]
base64 = "0.21"
rand = "0.8.5"
solana-program-test = "1.18"
solana-sdk = "1.18"
tokio = { version = "1.35", features = ["full"] }


================================================
File: basics/realloc/steel/program/src/add.rs
================================================
use realloc_api::prelude::*;
use steel::*;

pub fn process_add(accounts: &[AccountInfo<'_>], data: &[u8]) -> ProgramResult {
    // Parse args.
    let args = Add::try_from_bytes(data)?;
	let amount = u64::from_le_bytes(args.amount);

    // Load accounts.
    let [signer_info, counter_info] = accounts else {
        return Err(ProgramError::NotEnoughAccountKeys);        
    };
    signer_info.is_signer()?;
	let counter = counter_info
		.as_account_mut::<Counter>(&realloc_api::ID)?
		.assert_mut(|c| c.value < 100)?;

    // Update state 
	counter.value += amount;

    Ok(())
}


================================================
File: basics/realloc/steel/program/src/initialize.rs
================================================
use realloc_api::prelude::*;
use steel::*;

pub fn process_initialize(accounts: &[AccountInfo<'_>], _data: &[u8]) -> ProgramResult {
    // Load accounts.
    let [signer_info, counter_info, system_program] = accounts else {
        return Err(ProgramError::NotEnoughAccountKeys);        
    };
    signer_info.is_signer()?;
    counter_info.is_empty()?.is_writable()?.has_seeds(
        &[COUNTER],
        &realloc_api::ID
    )?;
    system_program.is_program(&system_program::ID)?;

    // Initialize counter.
    create_account::<Counter>(
        counter_info,
        system_program,
        signer_info,
        &realloc_api::ID,
        &[COUNTER],
    )?;
    let counter = counter_info.as_account_mut::<Counter>(&realloc_api::ID)?;
    counter.value = 0;

    Ok(())
}


================================================
File: basics/realloc/steel/program/src/lib.rs
================================================
mod add;
mod initialize;

use add::*;
use initialize::*;
        
use realloc_api::prelude::*;
use steel::*;

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    data: &[u8],
) -> ProgramResult {
    let (ix, data) = parse_instruction(&realloc_api::ID, program_id, data)?;

    match ix {
        ReallocInstruction::Initialize => process_initialize(accounts, data)?,
        ReallocInstruction::Add => process_add(accounts, data)?,
    }

    Ok(())
}

entrypoint!(process_instruction);


================================================
File: basics/rent/README.md
================================================
# Rent

Ah, rent. Everybody's favorite thing to deal with.   

Luckily, rent is much less daunting on Solana than in the real world (sorry, best we could do).   

___

Simply put, all storage on Solana costs **rent**. After all, this thing ain't free!   

Rent is typically a small amount and if you load your account with enough rent for **two years** it's actually exempt! That's right: **if your account holds more than the cost of rent for two years, that account is not charged any rent**.   

___

Rent itself is based off of the size of the data you're seeking to store in the account.   

Let's take a look.

================================================
File: basics/rent/anchor/Anchor.toml
================================================
[features]
seeds = false
[programs.localnet]
rent_example = "ED6f4gweAE7hWPQPXMt4kWxzDJne8VQEm9zkb1tMpFNB"

[registry]
url = "https://anchor.projectserum.com"

[provider]
cluster = "localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/rent/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/rent/anchor/package.json
================================================
{
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/web3.js": "^1.95.2"
  },
  "devDependencies": {
    "anchor-bankrun": "^0.4.0",
    "solana-bankrun": "^0.3.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/rent/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "resolveJsonModule": true,
    "esModuleInterop": true
  }
}


================================================
File: basics/rent/anchor/programs/rent-example/Cargo.toml
================================================
[package]
name = "rent-example"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "rent_example"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.0"


================================================
File: basics/rent/anchor/programs/rent-example/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/rent/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml --bpf-out-dir=./program/target/so
solana program deploy ./program/target/so/program.so


================================================
File: basics/rent/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/program.so"
  },
  "dependencies": {
    "@solana/web3.js": "^1.47.3",
    "borsh": "^0.7.0",
    "buffer": "^6.0.3",
    "fs": "^0.0.1-security"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/rent/native/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/rent/native/program/Cargo.toml
================================================
[package]
name = "program"
version = "0.1.0"
edition = "2021"

[dependencies]
borsh = "0.9.3"
borsh-derive = "0.9.1"
solana-program = "=1.18.17"

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: basics/rent/poseidon/rent_program/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
rent_program = "EHjrAJo1Ld77gkq6Pp2ErQHcC6FghT8BEPebNve8bAvj"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm run ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/rent/poseidon/rent_program/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/rent/poseidon/rent_program/package.json
================================================
{
  "license": "ISC",
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check",
    "ts-mocha": "ts-mocha --project tsconfig.json"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.1",
    "anchor-bankrun": "^0.5.0",
    "solana-bankrun": "^0.4.0"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/rent/poseidon/rent_program/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/rent/poseidon/rent_program/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: basics/rent/poseidon/rent_program/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: basics/rent/poseidon/rent_program/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: basics/rent/poseidon/rent_program/programs/rent_program/Cargo.toml
================================================
[package]
name = "rent_program"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "rent_program"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.1"


================================================
File: basics/rent/poseidon/rent_program/programs/rent_program/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/rent/poseidon/rent_program/programs/rent_program/src/lib.rs
================================================
use anchor_lang::prelude::*;
declare_id!("EHjrAJo1Ld77gkq6Pp2ErQHcC6FghT8BEPebNve8bAvj");
#[program]
pub mod rent_program {
    use super::*;
    pub fn create_system_account(
        ctx: Context<CreateSystemAccountContext>,
        id: u64,
        zip_code: u64,
    ) -> Result<()> {
        ctx.accounts.account.account_bump = ctx.bumps.account;
        ctx.accounts.account.owner = ctx.accounts.owner.key();
        ctx.accounts.account.id = id;
        ctx.accounts.account.zip_code = zip_code;
        Ok(())
    }
}
#[derive(Accounts)]
pub struct CreateSystemAccountContext<'info> {
    #[account(mut)]
    pub owner: Signer<'info>,
    #[account(init, payer = owner, space = 57, seeds = [b"account"], bump)]
    pub account: Account<'info, AddressData>,
    pub system_program: Program<'info, System>,
}
#[account]
pub struct AddressData {
    pub owner: Pubkey,
    pub id: u64,
    pub zip_code: u64,
    pub account_bump: u8,
}


================================================
File: basics/rent/poseidon/rent_program/tests/rent_program.ts
================================================
import * as anchor from '@coral-xyz/anchor';
import { Program } from '@coral-xyz/anchor';
import { RentProgram } from '../target/types/rent_program';

describe('rent_program', () => {
  // Configure the client to use the local cluster.
  const provider = anchor.AnchorProvider.env();

  anchor.setProvider(provider);

  const program = anchor.workspace.RentProgram as Program<RentProgram>;

  const wallet = provider.wallet as anchor.Wallet;
  const addressData = {
    id: 87615,
    zipCode: 94016,
  };
  it('Create the account', async () => {
    const newKeypair = anchor.web3.Keypair.generate();

    await program.methods
      .createSystemAccount(new anchor.BN(addressData.id), new anchor.BN(addressData.zipCode))
      .accounts({
        owner: wallet.publicKey,
      })
      .signers([wallet.payer])
      .rpc();
  });
});


================================================
File: basics/rent/poseidon/rent_program/ts-programs/package.json
================================================
{
  "name": "ts-programs",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@solanaturbine/poseidon": "^0.0.4"
  }
}


================================================
File: basics/rent/poseidon/rent_program/ts-programs/pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@solanaturbine/poseidon':
        specifier: ^0.0.4
        version: 0.0.4

packages:

  '@solanaturbine/poseidon@0.0.4':
    resolution: {integrity: sha512-VNQRtqobzBT+Wkh8fdPb0WVt12aIlgRJuGDxptclkphXi5w+VHUfMPcBshWSFPZg1nheXYgJABwvffYcyirw1g==}

snapshots:

  '@solanaturbine/poseidon@0.0.4': {}


================================================
File: basics/rent/poseidon/rent_program/ts-programs/src/rent_program.ts
================================================
import { Account, Pubkey, Result, Signer, SystemAccount, u8, u64 } from '@solanaturbine/poseidon';

export default class RentProgram {
  static PROGRAM_ID = new Pubkey('EHjrAJo1Ld77gkq6Pp2ErQHcC6FghT8BEPebNve8bAvj');

  //Create a new system account
  createSystemAccount(owner: Signer, account: AddressData, id: u64, zipCode: u64): Result {
    account.derive(['account']).init();

    account.accountBump = account.getBump();
    //Set owner of the account
    account.owner = owner.key;
    //Set id
    account.id = id;
    //Set zipCode
    account.zipCode = zipCode;
  }
}

export interface AddressData extends Account {
  owner: Pubkey;
  id: u64;
  zipCode: u64;
  accountBump: u8;
}


================================================
File: basics/rent/steel/README.md
================================================
# RentExample

**RentExample** is a ...
        
## API
- [`Consts`](api/src/consts.rs) – Program constants.
- [`Error`](api/src/error.rs) – Custom program errors.
- [`Event`](api/src/event.rs) – Custom program events.
- [`Instruction`](api/src/instruction.rs) – Declared instructions.

## Instructions
- [`Add`](program/src/add.rs) – Add ...
- [`Initialize`](program/src/initialize.rs) – Initialize ...

## State
- [`Counter`](api/src/state/counter.rs) – Counter ...

## Get started

Compile your program:
```sh
steel build
```

Run unit and integration tests:
```sh
steel test
```


================================================
File: basics/rent/steel/Cargo.toml
================================================
[workspace]
resolver = "2"
members = ["api", "program"]

[workspace.package]
version = "0.1.0"
edition = "2021"
license = "Apache-2.0"
homepage = ""
documentation = ""
repository = ""
readme = "./README.md"
keywords = ["solana"]

[workspace.dependencies]
rent_example-api = { path = "./api", version = "0.1.0" }
bytemuck = "1.14"
num_enum = "0.7"
solana-program = "1.18"
steel = "2.0"
thiserror = "1.0"


================================================
File: basics/rent/steel/package.json
================================================
{
  "name": "rent-example",
  "version": "1.0.0",
  "description": "rent example with steel framework for solana",
  "scripts": {
    "test": "cargo test-sbf",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/rent_example_program.so"
  },
  "keywords": [],
  "author": "Sabir Khan",
  "license": "ISC"
}


================================================
File: basics/rent/steel/.gitignore
================================================
target
test-ledger


================================================
File: basics/rent/steel/api/Cargo.toml
================================================
[package]
name = "rent_example-api"
description = "API for interacting with the RentExample program"
version.workspace = true
edition.workspace = true
license.workspace = true
homepage.workspace = true
documentation.workspace = true
repository.workspace = true
readme.workspace = true
keywords.workspace = true

[dependencies]
bytemuck.workspace = true
num_enum.workspace = true
solana-program.workspace = true
steel.workspace = true
thiserror.workspace = true


================================================
File: basics/rent/steel/api/src/error.rs
================================================
use steel::*;

#[derive(Debug, Error, Clone, Copy, PartialEq, Eq, IntoPrimitive)]
#[repr(u32)]
pub enum RentExampleError {
    #[error("This is a dummy error")]
    Dummy = 0,
}

error!(RentExampleError);


================================================
File: basics/rent/steel/api/src/instruction.rs
================================================
use steel::*;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, TryFromPrimitive)]
pub enum RentInstruction {
    CreateSystemAccount = 0,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct CreateSystemAccount {
    pub name: [u8; 32],
    pub address: [u8; 64],
}

instruction!(RentInstruction, CreateSystemAccount);


================================================
File: basics/rent/steel/api/src/lib.rs
================================================
pub mod error;
pub mod instruction;
pub mod sdk;
pub mod state;

pub mod prelude {
    pub use crate::error::*;
    pub use crate::instruction::*;
    pub use crate::sdk::*;
    pub use crate::state::*;
    // Re-export common solana dependencies
    pub use solana_program::{
        account_info::AccountInfo, entrypoint::ProgramResult, msg, pubkey::Pubkey, rent::Rent,
        system_program,
    };
}

use steel::*;

// TODO Set program id
declare_id!("z7msBPQHDJjTvdQRoEcKyENgXDhSRYeHieN1ZMTqo35");


================================================
File: basics/rent/steel/api/src/sdk.rs
================================================
use crate::prelude::*;
use steel::*;

pub fn create_system_account(
    payer: Pubkey,
    new_account: Pubkey,
    name: String,
    address: String,
) -> Instruction {
    let mut name_bytes = [0u8; 32];
    let mut address_bytes = [0u8; 64];

    name_bytes[..name.len()].copy_from_slice(name.as_bytes());
    address_bytes[..address.len()].copy_from_slice(address.as_bytes());

    Instruction {
        program_id: crate::ID,
        accounts: vec![
            AccountMeta::new(payer, true),
            AccountMeta::new(new_account, true),
            AccountMeta::new_readonly(system_program::ID, false),
        ],
        data: CreateSystemAccount {
            name: name_bytes,
            address: address_bytes,
        }
        .to_bytes(),
    }
}


================================================
File: basics/rent/steel/api/src/state/address.rs
================================================
use super::RentAccount;
use steel::*;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq, Pod, Zeroable)]
pub struct Address {
    pub name: [u8; 32],
    pub address: [u8; 64],
}

account!(RentAccount, Address);


================================================
File: basics/rent/steel/api/src/state/mod.rs
================================================
mod address;

pub use address::*;

use steel::*;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, IntoPrimitive, TryFromPrimitive)]
pub enum RentAccount {
    Address = 0,
}


================================================
File: basics/rent/steel/program/Cargo.toml
================================================
[package]
name = "rent_example-program"
description = ""
version.workspace = true
edition.workspace = true
license.workspace = true
homepage.workspace = true
documentation.workspace = true
repository.workspace = true
readme.workspace = true
keywords.workspace = true

[lib]
crate-type = ["cdylib", "lib"]

[dependencies]
rent_example-api.workspace = true
solana-program.workspace = true
steel.workspace = true

[dev-dependencies]
base64 = "0.21"
rand = "0.8.5"
solana-program-test = "1.18"
solana-sdk = "1.18"
tokio = { version = "1.35", features = ["full"] }


================================================
File: basics/rent/steel/program/src/lib.rs
================================================
mod create_account;

use create_account::*;
use rent_example_api::prelude::*;
use steel::*;

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    data: &[u8],
) -> ProgramResult {
    let (ix, data) = parse_instruction::<RentInstruction>(&rent_example_api::ID, program_id, data)?;

    match ix {
        RentInstruction::CreateSystemAccount => process_create_account(accounts, data)?,
    }

    Ok(())
}

entrypoint!(process_instruction);


================================================
File: basics/repository-layout/README.md
================================================
# Recommended Program Layout

This is the typical layout for a Solana program as it grows in size and begins to require multiple Rust files. You'll notice a lot of the programs in the [Solana Program Library](https://github.com/solana-labs/solana-program-library) follow this format.

> Note: You can structure your Rust `src` folder however you wish - provided you follow Cargo's repository structure standards. You don't have to follow this pattern, but it's here so you can recognize other programs, too.

You can see that the structure for a `native` repository is very similar to that of the `anchor` repository. The only difference is the inclusion of a `processor.rs` in the `native` setup - one of the many things Anchor abstracts away for you!

================================================
File: basics/repository-layout/anchor/Anchor.toml
================================================
[features]
seeds = false
[programs.localnet]
carnival = "8t94SEJh9jVjDwV7cbiuT6BvEsHo4YHP9x9a5rYH1NpP"

[registry]
url = "https://anchor.projectserum.com"

[provider]
cluster = "localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/repository-layout/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/repository-layout/anchor/package.json
================================================
{
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/web3.js": "^1.95.2"
  },
  "devDependencies": {
    "anchor-bankrun": "^0.4.0",
    "solana-bankrun": "^0.3.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/repository-layout/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/repository-layout/anchor/programs/carnival/Cargo.toml
================================================
[package]
name = "carnival"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "carnival"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.0"


================================================
File: basics/repository-layout/anchor/programs/carnival/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/repository-layout/anchor/programs/carnival/src/error.rs
================================================
// For any custom errors


================================================
File: basics/repository-layout/anchor/programs/carnival/src/instructions/eat_food.rs
================================================
use anchor_lang::prelude::*;

use crate::state::food;

// Instruction Data

pub struct EatFoodInstructionData {
    pub eater_name: String,
    pub eater_ticket_count: u32,
    pub food_stand: String,
}

pub fn eat_food(ix: EatFoodInstructionData) -> Result<()> {
    let food_stands_list = food::get_food_stands();

    for food_stand in food_stands_list.iter() {
        if ix.food_stand.eq(&food_stand.name) {
            msg!("Welcome to {}! What can I get you?", food_stand.name);

            if ix.eater_ticket_count < food_stand.tickets {
                msg!(
                    "  Sorry {}, our {} is {} tickets!",
                    ix.eater_name,
                    food_stand.food_type,
                    food_stand.tickets
                );
            } else {
                msg!("  Enjoy your {}!", food_stand.food_type);
            };

            return Ok(());
        }
    }

    Err(ProgramError::InvalidInstructionData.into())
}


================================================
File: basics/repository-layout/anchor/programs/carnival/src/instructions/mod.rs
================================================
pub mod eat_food;
pub mod get_on_ride;
pub mod play_game;


================================================
File: basics/repository-layout/anchor/programs/carnival/src/state/food.rs
================================================
// Objects

pub struct FoodStand {
    pub name: String,
    pub food_type: String,
    pub tickets: u32,
}

impl FoodStand {
    pub fn new(name: String, food_type: String, tickets: u32) -> FoodStand {
        FoodStand {
            name,
            food_type,
            tickets,
        }
    }
}

pub fn get_food_stands() -> Vec<FoodStand> {
    vec![
        FoodStand::new("Larry's Pizza".to_string(), "pizza".to_string(), 3),
        FoodStand::new("Taco Shack".to_string(), "taco".to_string(), 2),
        FoodStand::new("Dough Boy's".to_string(), "fried dough".to_string(), 1),
    ]
}


================================================
File: basics/repository-layout/anchor/programs/carnival/src/state/game.rs
================================================
// Objects

pub struct Game {
    pub name: String,
    pub tickets: u32,
    pub tries: u32,
    pub prize: String,
}

const DEFAULT_TICKETS_TO_PLAY: u32 = 3;

impl Game {
    pub fn new(name: String, tries: u32, prize: String) -> Game {
        Game {
            name,
            tickets: DEFAULT_TICKETS_TO_PLAY,
            tries,
            prize,
        }
    }
}

pub fn get_games() -> Vec<Game> {
    vec![
        Game::new("Ring Toss".to_string(), 5, "teddy bear".to_string()),
        Game::new("I Got It!".to_string(), 12, "goldfish".to_string()),
        Game::new("Ladder Climb".to_string(), 1, "popcorn bucket".to_string()),
    ]
}


================================================
File: basics/repository-layout/anchor/programs/carnival/src/state/mod.rs
================================================
pub mod food;
pub mod game;
pub mod ride;


================================================
File: basics/repository-layout/anchor/programs/carnival/src/state/ride.rs
================================================
// Objects

pub struct Ride {
    pub name: String,
    pub upside_down: bool,
    pub tickets: u32,
    pub min_height: u32,
}

impl Ride {
    pub fn new(name: String, upside_down: bool, tickets: u32, min_height: u32) -> Ride {
        Ride {
            name,
            upside_down,
            tickets,
            min_height,
        }
    }
}

pub fn get_rides() -> Vec<Ride> {
    vec![
        Ride::new("Tilt-a-Whirl".to_string(), false, 3, 48),
        Ride::new("Scrambler".to_string(), false, 3, 48),
        Ride::new("Ferris Wheel".to_string(), false, 5, 55),
        Ride::new("Zero Gravity".to_string(), true, 5, 60),
    ]
}


================================================
File: basics/repository-layout/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml --bpf-out-dir=./program/target/so
solana program deploy ./program/target/so/program.so


================================================
File: basics/repository-layout/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/program.so"
  },
  "dependencies": {
    "@solana/web3.js": "^1.47.3",
    "fs": "^0.0.1-security"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/repository-layout/native/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/repository-layout/native/program/Cargo.toml
================================================
[package]
name = "repository-layout-program"
version = "0.1.0"
edition = "2021"

[dependencies]
borsh = "0.9.3"
borsh-derive = "0.9.1"
solana-program = "=1.18.17"

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: basics/repository-layout/native/program/src/error.rs
================================================
// For any custom errors


================================================
File: basics/repository-layout/native/program/src/lib.rs
================================================
// For setting up modules & configs

pub mod error;
pub mod instructions;
pub mod processor;
pub mod state;


================================================
File: basics/repository-layout/native/program/src/instructions/eat_food.rs
================================================
use solana_program::{entrypoint::ProgramResult, msg, program_error::ProgramError};

use crate::state::food;

// InstructionData Data

pub struct EatFoodInstructionData {
    pub eater_name: String,
    pub eater_ticket_count: u32,
    pub food_stand: String,
}

pub fn eat_food(ix: EatFoodInstructionData) -> ProgramResult {
    let food_stands_list = food::get_food_stands();

    for food_stand in food_stands_list.iter() {
        if ix.food_stand.eq(&food_stand.name) {
            msg!("Welcome to {}! What can I get you?", food_stand.name);

            if ix.eater_ticket_count < food_stand.tickets {
                msg!(
                    "  Sorry {}, our {} is {} tickets!",
                    ix.eater_name,
                    food_stand.food_type,
                    food_stand.tickets
                );
            } else {
                msg!("  Enjoy your {}!", food_stand.food_type);
            };

            return Ok(());
        }
    }

    Err(ProgramError::InvalidInstructionData)
}


================================================
File: basics/repository-layout/native/program/src/instructions/mod.rs
================================================
pub mod eat_food;
pub mod get_on_ride;
pub mod play_game;


================================================
File: basics/repository-layout/native/program/src/state/food.rs
================================================
// Objects

pub struct FoodStand {
    pub name: String,
    pub food_type: String,
    pub tickets: u32,
}

impl FoodStand {
    pub fn new(name: String, food_type: String, tickets: u32) -> FoodStand {
        FoodStand {
            name,
            food_type,
            tickets,
        }
    }
}

pub fn get_food_stands() -> Vec<FoodStand> {
    vec![
        FoodStand::new("Larry's Pizza".to_string(), "pizza".to_string(), 3),
        FoodStand::new("Taco Shack".to_string(), "taco".to_string(), 2),
        FoodStand::new("Dough Boy's".to_string(), "fried dough".to_string(), 1),
    ]
}


================================================
File: basics/repository-layout/native/program/src/state/game.rs
================================================
// Objects

pub struct Game {
    pub name: String,
    pub tickets: u32,
    pub tries: u32,
    pub prize: String,
}

const DEFAULT_TICKETS_TO_PLAY: u32 = 3;

impl Game {
    pub fn new(name: String, tries: u32, prize: String) -> Game {
        Game {
            name,
            tickets: DEFAULT_TICKETS_TO_PLAY,
            tries,
            prize,
        }
    }
}

pub fn get_games() -> Vec<Game> {
    vec![
        Game::new("Ring Toss".to_string(), 5, "teddy bear".to_string()),
        Game::new("I Got It!".to_string(), 12, "goldfish".to_string()),
        Game::new("Ladder Climb".to_string(), 1, "popcorn bucket".to_string()),
    ]
}


================================================
File: basics/repository-layout/native/program/src/state/mod.rs
================================================
pub mod food;
pub mod game;
pub mod ride;


================================================
File: basics/repository-layout/native/program/src/state/ride.rs
================================================
// Objects

pub struct Ride {
    pub name: String,
    pub upside_down: bool,
    pub tickets: u32,
    pub min_height: u32,
}

impl Ride {
    pub fn new(name: String, upside_down: bool, tickets: u32, min_height: u32) -> Ride {
        Ride {
            name,
            upside_down,
            tickets,
            min_height,
        }
    }
}

pub fn get_rides() -> Vec<Ride> {
    vec![
        Ride::new("Tilt-a-Whirl".to_string(), false, 3, 48),
        Ride::new("Scrambler".to_string(), false, 3, 48),
        Ride::new("Ferris Wheel".to_string(), false, 5, 55),
        Ride::new("Zero Gravity".to_string(), true, 5, 60),
    ]
}


================================================
File: basics/transfer-sol/README.md
================================================
# Transfer SOL

A simple example of transferring SOL between two system accounts. You can transfer SOL between many types of accounts, not just system accounts (owned by the System Program).    

One thing to note here is that we are generating a brand new keypair in the test - both for `native` and `anchor`. The act of transferring SOL to the new keypair's account will initialize it as a default system account (hence the `/// CHECK` above it in the `anchor` example).

================================================
File: basics/transfer-sol/anchor/Anchor.toml
================================================
[features]
seeds = false
[programs.localnet]
transfer_sol = "4fQVnLWKKKYxtxgGn7Haw8v2g2Hzbu8K61JvWKvqAi7W"

[registry]
url = "https://anchor.projectserum.com"

[provider]
cluster = "localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/transfer-sol/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/transfer-sol/anchor/package.json
================================================
{
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/web3.js": "^1.95.2"
  },
  "devDependencies": {
    "anchor-bankrun": "^0.4.0",
    "solana-bankrun": "^0.3.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/transfer-sol/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/transfer-sol/anchor/programs/transfer-sol/Cargo.toml
================================================
[package]
name = "transfer-sol"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "transfer_sol"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.0"


================================================
File: basics/transfer-sol/anchor/programs/transfer-sol/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/transfer-sol/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml --bpf-out-dir=./program/target/so
solana program deploy ./program/target/so/program.so


================================================
File: basics/transfer-sol/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/program.so"
  },
  "dependencies": {
    "@solana/web3.js": "^1.47.3",
    "buffer-layout": "^1.2.2",
    "fs": "^0.0.1-security"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/transfer-sol/native/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/transfer-sol/native/program/Cargo.toml
================================================
[package]
name = "transfer-sol-program"
version = "0.1.0"
edition = "2021"

[dependencies]
borsh = "0.9.3"
borsh-derive = "0.9.1"
solana-program = "=1.18.17"

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: basics/transfer-sol/native/program/src/lib.rs
================================================
pub mod instruction;
pub mod processor;

use {crate::processor::process_instruction, solana_program::entrypoint};

entrypoint!(process_instruction);


================================================
File: basics/transfer-sol/native/program/src/processor.rs
================================================
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{account_info::AccountInfo, entrypoint::ProgramResult, pubkey::Pubkey};

use crate::instruction::transfer_sol_with_cpi;
use crate::instruction::transfer_sol_with_program;

#[derive(BorshSerialize, BorshDeserialize, Debug)]
pub enum TransferInstruction {
    CpiTransfer(u64),
    ProgramTransfer(u64),
}

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    input: &[u8],
) -> ProgramResult {
    let instruction = TransferInstruction::try_from_slice(input)?;
    match instruction {
        TransferInstruction::CpiTransfer(args) => transfer_sol_with_cpi(accounts, args),
        TransferInstruction::ProgramTransfer(args) => {
            transfer_sol_with_program(program_id, accounts, args)
        }
    }
}


================================================
File: basics/transfer-sol/poseidon/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
transfer_sol = "BLiyCbPDx54vqpNPQG6A7YAqEM1vRHiFfvReMKC4FFk5"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/transfer-sol/poseidon/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/transfer-sol/poseidon/package.json
================================================
{
  "license": "ISC",
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.1",
    "anchor-bankrun": "^0.5.0",
    "solana-bankrun": "^0.4.0"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: basics/transfer-sol/poseidon/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/transfer-sol/poseidon/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn
app
migrations


================================================
File: basics/transfer-sol/poseidon/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: basics/transfer-sol/poseidon/programs/transfer-sol/Cargo.toml
================================================
[package]
name = "transfer-sol"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "transfer_sol"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.1"


================================================
File: basics/transfer-sol/poseidon/programs/transfer-sol/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/transfer-sol/poseidon/programs/transfer-sol/src/lib.rs
================================================
use anchor_lang::prelude::*;
use anchor_lang::system_program::{transfer, Transfer};
declare_id!("BLiyCbPDx54vqpNPQG6A7YAqEM1vRHiFfvReMKC4FFk5");
#[program]
pub mod transfer_sol {
    use super::*;
    pub fn transfer_sol_with_cpi(
        ctx: Context<TransferSolWithCpiContext>,
        amount: u64,
    ) -> Result<()> {
        let transfer_accounts = Transfer {
            from: ctx.accounts.payer.to_account_info(),
            to: ctx.accounts.recipient.to_account_info(),
        };
        let cpi_ctx = CpiContext::new(
            ctx.accounts.system_program.to_account_info(),
            transfer_accounts,
        );
        transfer(cpi_ctx, amount)?;
        Ok(())
    }
}
#[derive(Accounts)]
pub struct TransferSolWithCpiContext<'info> {
    #[account(mut)]
    pub recipient: SystemAccount<'info>,
    #[account(mut)]
    pub payer: Signer<'info>,
    pub system_program: Program<'info, System>,
}


================================================
File: basics/transfer-sol/poseidon/ts-programs/package.json
================================================
{
  "name": "ts-programs",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@solanaturbine/poseidon": "^0.0.4"
  }
}


================================================
File: basics/transfer-sol/poseidon/ts-programs/src/transferSol.ts
================================================
import {
  Pubkey,
  SystemAccount,
  Signer,
  SystemProgram,
  u64,
  type Result,
} from "@solanaturbine/poseidon";

export default class TransferSol {
  static PROGRAM_ID = new Pubkey(
    "BLiyCbPDx54vqpNPQG6A7YAqEM1vRHiFfvReMKC4FFk5"
  );

  // Transferring of SOL using CPI
  transferSolWithCPI(
    payer: Signer, // sender of the SOL
    recipient: SystemAccount, // receiver of transferred SOL
    amount: u64 // amount to be transferred
  ): Result {
    // Invoke the SystemProgram's Transfer instruction
    // Parameters: from, to, amount
    SystemProgram.transfer(payer, recipient, amount);
  }
}


================================================
File: basics/transfer-sol/seahorse/README.md
================================================
## Transfer SOL with Seahorse

Sadly, you can't send SOL(lamports) to another SystemAccount (Public Key) with Seahorse. That's why this Seahorse example looks a little different than the Anchor and Native ones. Here, we initialize a Mock PDA account where we send SOL to using transferLamports, which invokes a CPI with the System Program.


================================================
File: basics/transfer-sol/seahorse/Anchor.toml
================================================
[features]
seeds = true
skip-lint = false
[programs.localnet]
seahorse = "Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "/Users/devenv/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: basics/transfer-sol/seahorse/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: basics/transfer-sol/seahorse/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.27.0"
  },
  "devDependencies": {
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "typescript": "^4.3.5",
    "prettier": "^2.6.2"
  }
}


================================================
File: basics/transfer-sol/seahorse/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/transfer-sol/seahorse/.gitignore
================================================

.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger


================================================
File: basics/transfer-sol/seahorse/.prettierignore
================================================

.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: basics/transfer-sol/seahorse/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: basics/transfer-sol/seahorse/programs/seahorse/Cargo.toml
================================================
[package]
name = "seahorse"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "seahorse"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.27.0"
anchor-spl = "0.27.0"
pyth-sdk-solana = { version = "0.7.1", optional = true }


================================================
File: basics/transfer-sol/seahorse/programs/seahorse/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: basics/transfer-sol/seahorse/programs/seahorse/src/dot/mod.rs
================================================
pub mod program;


================================================
File: basics/transfer-sol/seahorse/programs_py/seahorse.py
================================================
# seahorse
# Built with Seahorse v0.2.7

from seahorse.prelude import *

declare_id('2RjL4mpTANyGxz7fLWEbQtmdEDti7c4CqsLR96mgvcaV')

class MockAccount(Account):
    mock_value: u8


## We don't care about this instruction, but we need an address to send our SOL to.
@instruction
def init_mock_account(signer: Signer, mock_account: Empty[MockAccount]):
    account = mock_account.init(
        payer = signer,
        seeds = ['mock_account'],
    )
    account.mock_value = u8(0)

@instruction
def transfer_sol_with_cpi(sender: Signer, recipient: MockAccount, amount: u64):
    sender.transfer_lamports(
        to = recipient,
        amount = amount,
    )


================================================
File: basics/transfer-sol/steel/README.md
================================================
# TransferSol

**TransferSol** is a ...
        
## API
- [`Consts`](api/src/consts.rs) – Program constants.
- [`Error`](api/src/error.rs) – Custom program errors.
- [`Event`](api/src/event.rs) – Custom program events.
- [`Instruction`](api/src/instruction.rs) – Declared instructions.

## Instructions
- [`Hello`](program/src/hello.rs) – Hello ...

## State
- [`User`](api/src/state/user.rs) – User ...

## Tests

To run the test suit, use the Solana toolchain:
```
cargo test-sbf         
```


================================================
File: basics/transfer-sol/steel/Cargo.toml
================================================
[workspace]
resolver = "2"
members = ["api", "program"]

[workspace.package]
version = "0.1.0"
edition = "2021"
license = "Apache-2.0"
homepage = ""
documentation = ""
repository = ""
readme = "./README.md"
keywords = ["solana"]

[workspace.dependencies]
transfer-sol-api = { path = "./api", version = "0.1.0" }
bytemuck = "1.14"
num_enum = "0.7"
solana-program = "1.18"
steel = "1.3"
thiserror = "1.0"


================================================
File: basics/transfer-sol/steel/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml --bpf-out-dir=./program/target/so
solana program deploy ./program/target/so/program.so

================================================
File: basics/transfer-sol/steel/package.json
================================================
{
  "scripts": {
    "test": "steel test",
    "build-and-test": "steel build && steel test",
    "build": "steel build",
    "deploy": "solana program deploy ./program/target/so/program.so",
    "check:fix": "pnpm biome format --write ./tests",
    "rust:test": "cargo test-sbf"
  },
  "dependencies": {
    "@solana/web3.js": "^1.47.3",
    "buffer-layout": "^1.2.2",
    "fs": "^0.0.1-security"
  },
  "devDependencies": {
    "@biomejs/biome": "1.9.4",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.3.4",
    "mocha": "^10.7.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^5.6.3"
  }
}


================================================
File: basics/transfer-sol/steel/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: basics/transfer-sol/steel/api/Cargo.toml
================================================
[package]
name = "transfer-sol-api"
version = "0.1.0"
edition = "2021"

[dependencies]
bytemuck.workspace = true
num_enum.workspace = true
solana-program.workspace = true
steel.workspace = true
thiserror.workspace = true


================================================
File: basics/transfer-sol/steel/api/src/instruction.rs
================================================
use steel::*;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, TryFromPrimitive)]
pub enum TransferSolInstruction {
    TransferSolWithCpi = 0,
    TransferSolWithProgram = 1,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct TransferSolWithCpi {
    pub amount: [u8; 8],
}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct TransferSolWithProgram {
    pub amount: [u8; 8],
}

instruction!(TransferSolInstruction, TransferSolWithCpi);
instruction!(TransferSolInstruction, TransferSolWithProgram);



================================================
File: basics/transfer-sol/steel/api/src/lib.rs
================================================
pub mod instruction;
pub mod sdk;

pub mod prelude {
    pub use crate::instruction::*;
    pub use crate::sdk::*;
}

use steel::*;

// TODO: Set program id
declare_id!("FNDnd3ZJptKromzx7h71o67AcR1emryyJPb9LjS8WPVw");


================================================
File: basics/transfer-sol/steel/api/src/sdk.rs
================================================
use steel::*;

use crate::prelude::*;

pub fn transfer_sol_with_cpi(signer: Pubkey, receiver: Pubkey, amount: u64) -> Instruction {
    Instruction {
        program_id: crate::ID,
        accounts: vec![
            AccountMeta::new(signer, true),
            AccountMeta::new(receiver, false),
            AccountMeta::new(system_program::ID, false),
        ],
        data: TransferSolWithCpi {
            amount: amount.to_le_bytes(),
        }
        .to_bytes(),
    }
}

pub fn transfer_sol_with_program(signer: Pubkey, receiver: Pubkey, amount: u64) -> Instruction {
    Instruction {
        program_id: crate::ID,
        accounts: vec![
            AccountMeta::new(signer, true),
            AccountMeta::new(receiver, false),
        ],
        data: TransferSolWithProgram {
            amount: amount.to_le_bytes(),
        }
        .to_bytes(),
    }
}


================================================
File: basics/transfer-sol/steel/program/Cargo.toml
================================================
[package]
name = "transfer-sol-program"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]

[dependencies]
transfer-sol-api.workspace = true
solana-program.workspace = true
steel.workspace = true

[dev-dependencies]
bs64 = "0.1.2"
rand = "0.8.5"
solana-program-test = "1.18"
solana-sdk = "1.18"
tokio = { version = "1.35", features = ["full"] }


================================================
File: basics/transfer-sol/steel/program/src/lib.rs
================================================
mod transfer_sol_with_cpi;
mod transfer_sol_with_program;

use transfer_sol_with_cpi::*;
use transfer_sol_with_program::*;
        
use transfer_sol_api::prelude::*;
use steel::*;

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    data: &[u8],
) -> ProgramResult {
    let (ix, data) = parse_instruction(&transfer_sol_api::ID, program_id, data)?;

    match ix {
        TransferSolInstruction::TransferSolWithCpi => process_transfer_sol_with_cpi(accounts, data)?,
        TransferSolInstruction::TransferSolWithProgram => process_transfer_sol_with_program(accounts, data)?,
    }

    Ok(())
}

entrypoint!(process_instruction);


================================================
File: basics/transfer-sol/steel/program/src/transfer_sol_with_cpi.rs
================================================
use solana_program::{
    account_info::AccountInfo, entrypoint::ProgramResult, program::invoke, system_instruction,
};
use steel::*;
use transfer_sol_api::prelude::TransferSolWithCpi;

pub fn process_transfer_sol_with_cpi(accounts: &[AccountInfo], data: &[u8]) -> ProgramResult {
    // Parse args.
    let args: &TransferSolWithCpi = TransferSolWithCpi::try_from_bytes(data)?;
    let amount: u64 = u64::from_le_bytes(args.amount);

    // Load accounts.
    let [signer_info, receiver_info, system_program] = accounts else {
        return Err(ProgramError::NotEnoughAccountKeys);
    };
    signer_info.is_signer()?;

    invoke(
        &system_instruction::transfer(signer_info.key, receiver_info.key, amount),
        &[
            signer_info.clone(),
            receiver_info.clone(),
            system_program.clone(),
        ],
    )?;

    Ok(())
}


================================================
File: basics/transfer-sol/steel/program/src/transfer_sol_with_program.rs
================================================
use solana_program::{account_info::AccountInfo, entrypoint::ProgramResult};
use steel::*;
use transfer_sol_api::prelude::*;

pub fn process_transfer_sol_with_program(accounts: &[AccountInfo], data: &[u8]) -> ProgramResult {
    // Parse args.
    let args = TransferSolWithProgram::try_from_bytes(data)?;
    let amount: u64 = u64::from_le_bytes(args.amount);

    // Load accounts.
    let [signer_info, receiver_info] = accounts else {
        return Err(ProgramError::NotEnoughAccountKeys);
    };
    signer_info.is_signer()?;

    **signer_info.try_borrow_mut_lamports()? -= amount;
    **receiver_info.try_borrow_mut_lamports()? += amount;

    Ok(())
}


================================================
File: compression/cnft-burn/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.devnet]
cnft_burn = "FcLCJkSvwQQTDfCde5LdC4DSZAqSyb2AWM9US3wF5Fp7"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Devnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/cnft-burn.ts"


================================================
File: compression/cnft-burn/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: compression/cnft-burn/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@metaplex-foundation/js": "^0.19.4",
    "@metaplex-foundation/mpl-bubblegum": "^0.7.0",
    "@metaplex-foundation/mpl-token-metadata": "^2.12.0",
    "@metaplex-foundation/umi": "^0.9.0",
    "@solana/spl-account-compression": "^0.2.0",
    "@solana/web3.js": "^1.89.0",
    "axios": "^1.6.5"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: compression/cnft-burn/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: compression/cnft-burn/anchor/.gitignore
================================================

.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: compression/cnft-burn/anchor/.prettierignore
================================================

.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: compression/cnft-burn/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: compression/cnft-burn/anchor/programs/cnft-burn/Cargo.toml
================================================
[package]
name = "cnft-burn"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "cnft_burn"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.0"
mpl-bubblegum = "1.3.0"
spl-account-compression = { version="0.3.0",features = ["no-entrypoint","cpi"] }
ahash = "=0.8.7"


================================================
File: compression/cnft-burn/anchor/programs/cnft-burn/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: compression/cnft-burn/anchor/tests/utils.ts
================================================
import {
  type AccountMeta,
  Connection,
  Keypair,
  PublicKey,
  Signer,
  TransactionInstruction,
  TransactionMessage,
  VersionedTransaction,
} from '@solana/web3.js';

import * as bs58 from 'bs58';

export function loadWalletKey(keypairFile: string): Keypair {
  const fs = require('node:fs');
  return Keypair.fromSecretKey(new Uint8Array(JSON.parse(fs.readFileSync(keypairFile).toString())));
}

export function decode(stuff: string) {
  return bufferToArray(bs58.decode(stuff));
}
function bufferToArray(buffer: Buffer): number[] {
  const nums: number[] = [];
  for (let i = 0; i < buffer.length; i++) {
    nums.push(buffer[i]);
  }
  return nums;
}
export const mapProof = (assetProof: { proof: string[] }): AccountMeta[] => {
  if (!assetProof.proof || assetProof.proof.length === 0) {
    throw new Error('Proof is empty');
  }
  return assetProof.proof.map((node) => ({
    pubkey: new PublicKey(node),
    isSigner: false,
    isWritable: false,
  }));
};


================================================
File: compression/cnft-vault/anchor/Anchor.toml
================================================
[features]
seeds = false
skip-lint = false
[programs.devnet]
cnft_vault = "CNftyK7T8udPwYRzZUMWzbh79rKrz9a5GwV2wv7iEHpk"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Devnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: compression/cnft-vault/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: compression/cnft-vault/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@metaplex-foundation/mpl-bubblegum": "^0.6.2",
    "@solana/spl-account-compression": "^0.1.8",
    "axios": "^1.4.0"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: compression/cnft-vault/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: compression/cnft-vault/anchor/.gitignore
================================================

.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger


================================================
File: compression/cnft-vault/anchor/programs/cnft-vault/Cargo.toml
================================================
[package]
name = "cnft-vault"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "cnft_vault"

[features]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
cpi = ["no-entrypoint"]
default = []

[dependencies]
anchor-lang = "0.26.0"
solana-program = "1.14"
spl-account-compression = { version="0.1.8", features = ["cpi"] }
mpl-bubblegum = { version = "0.7.0", features = ["no-entrypoint", "cpi"] }

================================================
File: compression/cnft-vault/anchor/programs/cnft-vault/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: compression/cnft-vault/anchor/tests/utils.ts
================================================
import {
  type AccountMeta,
  Connection,
  Keypair,
  PublicKey,
  Signer,
  TransactionInstruction,
  TransactionMessage,
  VersionedTransaction,
} from '@solana/web3.js';

import * as bs58 from 'bs58';

export function loadWalletKey(keypairFile: string): Keypair {
  const fs = require('node:fs');
  return Keypair.fromSecretKey(new Uint8Array(JSON.parse(fs.readFileSync(keypairFile).toString())));
}

export function decode(stuff: string) {
  return bufferToArray(bs58.decode(stuff));
}
function bufferToArray(buffer: Buffer): number[] {
  const nums: number[] = [];
  for (let i = 0; i < buffer.length; i++) {
    nums.push(buffer[i]);
  }
  return nums;
}
export const mapProof = (assetProof: { proof: string[] }): AccountMeta[] => {
  if (!assetProof.proof || assetProof.proof.length === 0) {
    throw new Error('Proof is empty');
  }
  return assetProof.proof.map((node) => ({
    pubkey: new PublicKey(node),
    isSigner: false,
    isWritable: false,
  }));
};


================================================
File: compression/cnft-vault/anchor/tests/scripts/constants.ts
================================================
import * as anchor from '@coral-xyz/anchor';
import type { CnftVault } from '../../target/types/cnft_vault';
import { IDL } from '../../target/types/cnft_vault';
import { loadWalletKey } from '../utils';

export const connection = new anchor.web3.Connection('https://api.devnet.solana.com');
export const keypair = loadWalletKey('~/.config/solana/id.json');
export const wallet = new anchor.Wallet(keypair);
export const provider = new anchor.AnchorProvider(connection, wallet, {});
export const programID = new anchor.web3.PublicKey('CNftyK7T8udPwYRzZUMWzbh79rKrz9a5GwV2wv7iEHpk');
export const program = new anchor.Program<CnftVault>(IDL, programID, provider);


================================================
File: compression/cutils/anchor/Anchor.toml
================================================
[features]
seeds = false
skip-lint = false
[programs.devnet]
cutils = "burZc1SfqbrAP35XG63YZZ82C9Zd22QUwhCXoEUZWNF"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "devnet"
wallet = "~/.config/solana/test.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: compression/cutils/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"


================================================
File: compression/cutils/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.27.0",
    "@metaplex-foundation/js": "^0.19.4",
    "@metaplex-foundation/mpl-bubblegum": "^0.7.0",
    "@solana/spl-account-compression": "^0.1.8",
    "@solana/spl-token": "^0.3.8",
    "@solana/web3.js": "^1.77.3",
    "axios": "^1.4.0"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "ts-node": "^10.9.1",
    "typescript": "^4.3.5"
  }
}


================================================
File: compression/cutils/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "module": "commonjs",
    "target": "esnext",
    "esModuleInterop": true
  }
}


================================================
File: compression/cutils/anchor/.gitignore
================================================

.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.local_keys

================================================
File: compression/cutils/anchor/programs/cutils/Cargo.toml
================================================
[package]
name = "cutils"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "cutils"

[features]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
cpi = ["no-entrypoint"]
default = []

[dependencies]
anchor-lang = "0.26.0"
solana-program = "1.14.18"
spl-account-compression = { version="0.1.8", features = ["cpi"] }
mpl-bubblegum = { version = "0.7.0", features = ["no-entrypoint", "cpi"] }

# Added due to anchor and solana-cli wonkyness as of late
getrandom = { version = "0.2.10", features = ["custom"] }
winnow = "=0.4.1"
toml_datetime = "=0.6.1"

================================================
File: compression/cutils/anchor/programs/cutils/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: compression/cutils/anchor/programs/cutils/src/lib.rs
================================================
#![allow(clippy::result_large_err)]

pub mod actions;
pub use actions::*;

pub mod state;
pub use state::*;

use anchor_lang::prelude::*;
use solana_program::pubkey::Pubkey;
use spl_account_compression::{program::SplAccountCompression, Noop};

#[derive(Clone)]
pub struct MplBubblegum;

impl anchor_lang::Id for MplBubblegum {
    fn id() -> Pubkey {
        mpl_bubblegum::id()
    }
}

declare_id!("burZc1SfqbrAP35XG63YZZ82C9Zd22QUwhCXoEUZWNF");

#[program]
pub mod cutils {
    use super::*;

    #[access_control(ctx.accounts.validate(&ctx, &params))]
    pub fn mint<'info>(
        ctx: Context<'_, '_, '_, 'info, Mint<'info>>,
        params: MintParams,
    ) -> Result<()> {
        Mint::actuate(ctx, params)
    }

    #[access_control(ctx.accounts.validate(&ctx, &params))]
    pub fn verify<'info>(
        ctx: Context<'_, '_, '_, 'info, Verify<'info>>,
        params: VerifyParams,
    ) -> Result<()> {
        Verify::actuate(ctx, &params)
    }
}


================================================
File: compression/cutils/anchor/programs/cutils/src/actions/mod.rs
================================================
pub mod mint;
pub use mint::*;

pub mod verify;
pub use verify::*;


================================================
File: compression/cutils/anchor/programs/cutils/src/state/data.rs
================================================
use crate::*;

pub const SEED_DATA: &[u8] = b"DATA";

#[account]
#[derive(Default, Debug)]
pub struct Data {
    /// The bump, used for PDA validation.
    pub bump: u8,
    pub tree: Pubkey,
    pub tree_nonce: u64,
}

impl Data {
    pub const LEN: usize = 8 + 1 + 32 + 8;

    pub fn new(bump: u8, tree: Pubkey, tree_nonce: u64) -> Self {
        Self {
            bump,
            tree,
            tree_nonce,
        }
    }
}


================================================
File: compression/cutils/anchor/programs/cutils/src/state/mod.rs
================================================
pub mod data;
pub use data::*;


================================================
File: oracles/pyth/README.md
================================================
## What is Pyth ?

Pyth is an Oracle that offers on-chain low-latency market data from institutional sources.
This means you can use prices from real-life assets in your Solana programs.

The price for each asset will be represented inside of a Solana account. We call those accounts price feeds.

For example, the price feed for SOL/USD on mainnet is represented on this account address: `H6ARHf6YXhGYeQfUzQNGk6rDNnLBQKrenN712K4AQJEG`.

You can find more of these price feeds [here](https://pyth.network/price-feeds?cluster=mainnet-beta).

To use such a price feed, you need to pass its account into your instructions context. 

You can get an asset's information by reading the account's data. The feed will consist of:

- A price
- A confidence interval
- An exponent

To read more about Pyth, please navigate to [the Pyth documentation](https://docs.pyth.network/solana-price-feeds).




================================================
File: oracles/pyth/anchor/Anchor.toml
================================================
[features]
seeds = false
skip-lint = false
[programs.localnet]
pythexample = "F6mNuN1xoPdRaZcUX3Xviq7x1EFtoBXygpFggCLd62eU"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"

[test.validator]
url = "https://api.mainnet-beta.solana.com"

[[test.validator.clone]]
address = "H6ARHf6YXhGYeQfUzQNGk6rDNnLBQKrenN712K4AQJEG"


================================================
File: oracles/pyth/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: oracles/pyth/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.27.0"
  },
  "devDependencies": {
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "typescript": "^4.3.5",
    "prettier": "^2.6.2"
  }
}


================================================
File: oracles/pyth/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: oracles/pyth/anchor/.gitignore
================================================

.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger


================================================
File: oracles/pyth/anchor/.prettierignore
================================================

.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: oracles/pyth/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: oracles/pyth/anchor/programs/pythexample/Cargo.toml
================================================
[package]
name = "pythexample"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "pythexample"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []

[dependencies]
anchor-lang = "0.28.0"
pyth-sdk-solana = "0.8.0"
pyth-sdk = "0.8.0"


================================================
File: oracles/pyth/anchor/programs/pythexample/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: oracles/pyth/anchor/programs/pythexample/src/error.rs
================================================
use anchor_lang::prelude::*;

#[error_code]
pub enum ErrorCode {
    #[msg("Could not load price account")]
    PythError,
    #[msg("Failed to serialize price account")]
    TryToSerializePriceAccount,
    #[msg("Invalid argument provided")]
    InvalidArgument,
}


================================================
File: oracles/pyth/anchor/tests/pythexample.ts
================================================
import * as anchor from '@coral-xyz/anchor';
import type { Program } from '@coral-xyz/anchor';
import type { Pythexample } from '../target/types/pythexample';

describe('pythexample', () => {
  // Configure the client to use the local cluster.
  anchor.setProvider(anchor.AnchorProvider.env());

  const program = anchor.workspace.Pythexample as Program<Pythexample>;

  const PYTH_FEED_ID = new anchor.web3.PublicKey('H6ARHf6YXhGYeQfUzQNGk6rDNnLBQKrenN712K4AQJEG');

  it('Check SOL_USD Price', async () => {
    const tx = await program.methods
      .readPrice()
      .accounts({
        priceFeed: PYTH_FEED_ID,
        systemProgram: anchor.web3.SystemProgram.programId,
        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,
      })
      .rpc();

    console.log('Your transaction signature, find the price in the program logs', tx);
  });
});


================================================
File: oracles/pyth/seahorse/README.md
================================================
## Using Seahorse with Pyth

Make sure to import the Pyth module for Seahorse. 

`from seahorse.pyth import *` 

You have to validate a price feed's ID for security reasons, if you want to read the SOL/USD price feed, you can verify the account in the context like this:

`price_account.validate_price_feed("SOL/USD")`

For more information, visit the [Seahorse documentation on Pyth](https://seahorse-lang.org/docs/pyth).




================================================
File: oracles/pyth/seahorse/Anchor.toml
================================================
[features]
seeds = true
skip-lint = false
[programs.localnet]
seahorse = "9USP8f9ooxUxWTyqrQSDfyiXE1FP7Wfsg34NfAbdK1ur"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"

[test.validator]
url = "https://api.mainnet-beta.solana.com"

[[test.validator.clone]]
address = "H6ARHf6YXhGYeQfUzQNGk6rDNnLBQKrenN712K4AQJEG"


================================================
File: oracles/pyth/seahorse/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: oracles/pyth/seahorse/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.27.0"
  },
  "devDependencies": {
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "typescript": "^4.3.5",
    "prettier": "^2.6.2"
  }
}


================================================
File: oracles/pyth/seahorse/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: oracles/pyth/seahorse/.gitignore
================================================

.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger


================================================
File: oracles/pyth/seahorse/.prettierignore
================================================

.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: oracles/pyth/seahorse/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: oracles/pyth/seahorse/programs/seahorse/Cargo.toml
================================================
[package]
name = "seahorse"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "seahorse"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = "0.27.0"
anchor-spl = "0.27.0"
pyth-sdk-solana = { version = "0.7.1" }


================================================
File: oracles/pyth/seahorse/programs/seahorse/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: oracles/pyth/seahorse/programs/seahorse/src/dot/mod.rs
================================================
pub mod program;


================================================
File: oracles/pyth/seahorse/programs_py/seahorse.py
================================================
# seahorse
# Built with Seahorse v0.2.7

from seahorse.prelude import *
from seahorse.pyth import *

declare_id('9USP8f9ooxUxWTyqrQSDfyiXE1FP7Wfsg34NfAbdK1ur')

@instruction
def get_pyth_price(
    pyth_price_account: PriceAccount,
    signer: Signer,
    ):
    price_feed = pyth_price_account.validate_price_feed("SOL/USD")
    price_feed.get_price().num()

    price = price_feed.get_price()

    x: f64 = price.num()
    p: i64 = price.price
    c: u64 = price.conf
    e: i32 = price.expo


    print("Pyth price: ", x)
    print("Pyth price without decimals: ", p)
    print("Pyth confidence interval: ", c)
    print("Pyth account decimal exponent: ", e)






================================================
File: oracles/pyth/seahorse/tests/seahorse.ts
================================================
import * as anchor from '@coral-xyz/anchor';
import type { Program } from '@coral-xyz/anchor';
import type { Seahorse } from '../target/types/seahorse';

describe('seahorse', () => {
  // Configure the client to use the local cluster.
  anchor.setProvider(anchor.AnchorProvider.env());

  const program = anchor.workspace.Seahorse as Program<Seahorse>;

  const PYTH_PRICE_ACCOUNT = new anchor.web3.PublicKey('H6ARHf6YXhGYeQfUzQNGk6rDNnLBQKrenN712K4AQJEG');

  it('Is initialized!', async () => {
    // Add your test here.
    const tx = await program.methods
      .getPythPrice()
      .accounts({
        pythPriceAccount: PYTH_PRICE_ACCOUNT,
      })
      .rpc();
    console.log('Your transaction signature', tx);
  });
});


================================================
File: scripts/sync-package-json.ts
================================================
import { commandCheck, commandHelp, commandList, commandSet, commandUpdate } from './lib';

const params: string[] = process.argv.slice(3);

switch (process.argv[2]) {
  case 'check':
    commandCheck(params[0]);
    break;
  case 'list':
    commandList(params[0]);
    break;
  case 'set':
    commandSet(params[0], params[1]);
    break;
  case 'update':
    commandUpdate(params[0], params.slice(1));
    break;
  default:
    commandHelp();
    break;
}


================================================
File: scripts/lib/change-package-version.ts
================================================
import { readFileSync } from 'node:fs';

export function changePackageVersion(file: string, pkgName: string, pkgVersion: string): [boolean, string] {
  const content = JSON.parse(readFileSync(file).toString('utf-8'));
  if (content.dependencies?.[pkgName] && content.dependencies[pkgName] !== pkgVersion) {
    content.dependencies[pkgName] = pkgVersion;
    return [true, content];
  }
  if (content.devDependencies?.[pkgName] && content.devDependencies[pkgName] !== pkgVersion) {
    content.devDependencies[pkgName] = pkgVersion;
    return [true, content];
  }
  return [false, content];
}


================================================
File: scripts/lib/command-list.ts
================================================
import { basename } from 'node:path';
import { getRecursiveFileList } from './get-recursive-file-list';

export function commandList(path: string) {
  const files = getRecursiveFileList(path).filter((file) => basename(file) === 'package.json');
  for (const file of files) {
    console.log(file);
  }
}


================================================
File: scripts/lib/get-deps-count.ts
================================================
import { readFileSync } from 'node:fs';

export function getDepsCount(files: string[] = []): Record<string, Record<string, string[]>> {
  const map: Record<string, JSON> = {};
  const depsCounter: Record<string, Record<string, string[]>> = {};

  for (const file of files) {
    const content = JSON.parse(readFileSync(file).toString('utf-8'));
    map[file] = content;

    const deps = content.dependencies ?? {};
    const devDeps = content.devDependencies ?? {};

    const merged = { ...deps, ...devDeps };

    Object.keys(merged)
      .sort()
      .map((pkg) => {
        const pkgVersion = merged[pkg];
        if (!depsCounter[pkg]) {
          depsCounter[pkg] = { [pkgVersion]: [file] };
          return;
        }
        if (!depsCounter[pkg][pkgVersion]) {
          depsCounter[pkg][pkgVersion] = [file];
          return;
        }
        depsCounter[pkg][pkgVersion] = [...depsCounter[pkg][pkgVersion], file];
      });
  }
  return depsCounter;
}


================================================
File: scripts/lib/get-recursive-file-list.ts
================================================
// Point method at path and return a list of all the files in the directory recursively
import { readdirSync, statSync } from 'node:fs';

export function getRecursiveFileList(path: string): string[] {
  const ignore = ['.git', '.github', '.idea', '.next', '.vercel', '.vscode', 'coverage', 'dist', 'node_modules'];
  const files: string[] = [];

  const items = readdirSync(path);

  for (const item of items) {
    if (!ignore.includes(item)) {
      // Check out if it's a directory or a file
      const isDir = statSync(`${path}/${item}`).isDirectory();
      if (isDir) {
        // If it's a directory, recursively call the method
        files.push(...getRecursiveFileList(`${path}/${item}`));
      } else {
        // If it's a file, add it to the array of files
        files.push(`${path}/${item}`);
      }
    }
  }

  return files.filter((file) => {
    // Remove package.json from the root directory
    return path === '.' ? file !== './package.json' : true;
  });
}


================================================
File: scripts/lib/index.ts
================================================
export * from './command-check';
export * from './command-help';
export * from './command-list';
export * from './command-set';
export * from './command-update';


================================================
File: tokens/create-token/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
create_token = "GwvQ53QTu1xz3XXYfG5m5jEqwhMBvVBudPS8TUuFYnhT"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"

[test]
startup_wait = 5000
shutdown_wait = 2000
upgradeable = false

[test.validator]
bind_address = "0.0.0.0"
url = "https://api.mainnet-beta.solana.com"
ledger = ".anchor/test-ledger"
rpc_port = 8899

[[test.validator.clone]]
address = "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"


================================================
File: tokens/create-token/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/create-token/anchor/package.json
================================================
{
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0"
  },
  "scripts": {
    "postinstall": "zx prepare.mjs"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "anchor-bankrun": "^0.4.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5",
    "zx": "^8.1.4"
  }
}


================================================
File: tokens/create-token/anchor/prepare.mjs
================================================
#!/usr/bin/env zx

import { mkdir, rm } from 'node:fs/promises';
import { join } from 'node:path';
import { $ } from 'zx';

const programs = [
  {
    id: 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
    name: 'token_metadata.so',
  },
];

const outputDir = 'tests/fixtures';
const overwrite = true;

try {
  for (const program of programs) {
    const { id, name } = program;
    const outputFile = join(outputDir, name);
    await $`solana config set -um`;

    try {
      await mkdir(outputDir, { recursive: true });
      if (overwrite) await rm(outputFile, { force: true });
      await $`solana program dump ${id} ${outputFile}`;
      console.log(`Program ${id} dumped to ${outputFile}`);
    } catch (error) {
      console.error(`Error dumping ${id}: ${error.message}`);
    }
  }
} catch (error) {
  console.error(`Error preparing programs: ${error.message}`);
}


================================================
File: tokens/create-token/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/create-token/anchor/programs/create-token/Cargo.toml
================================================
[package]
name = "create-token"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "create_token"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = "0.30.0"
anchor-spl = { version = "0.30.0", features = ["metadata"] }


================================================
File: tokens/create-token/anchor/programs/create-token/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/create-token/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml
solana program deploy ./program/target/deploy/program.so


================================================
File: tokens/create-token/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/hello_solana_program.so"
  },
  "dependencies": {
    "@metaplex-foundation/mpl-token-metadata": "^2.5.2",
    "@solana/spl-token": "^0.3.7",
    "@solana/web3.js": "^1.73.0",
    "borsh": "^0.7.0",
    "buffer": "^6.0.3",
    "fs": "^0.0.1-security"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/create-token/native/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/create-token/native/program/Cargo.toml
================================================
[package]
name = "create-token-program"
version = "0.1.0"
edition = "2021"

[dependencies]
borsh = "0.9.3"
borsh-derive = "0.9.1"
solana-program = "1.16.10"
spl-token = { version = "4.0.0", features = [ "no-entrypoint" ] }
spl-associated-token-account = { version = "2.0.0", features = [ "no-entrypoint" ] }
mpl-token-metadata = { version = "1.11", features = [ "no-entrypoint" ] }

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: tokens/create-token/steel/README.md
================================================
# Steel

**Steel** is a ...
        
## API
- [`Consts`](api/src/consts.rs) – Program constants.
- [`Error`](api/src/error.rs) – Custom program errors.
- [`Event`](api/src/event.rs) – Custom program events.
- [`Instruction`](api/src/instruction.rs) – Declared instructions.

## Instructions
- [`Hello`](program/src/hello.rs) – Hello ...

## State
- [`User`](api/src/state/user.rs) – User ...

## Tests

To run the test suit, use the Solana toolchain:
```
cargo test-sbf         
```


================================================
File: tokens/create-token/steel/Cargo.toml
================================================
[workspace]
resolver = "2"
members = ["api", "program"]

[workspace.package]
version = "0.1.0"
edition = "2021"
license = "Apache-2.0"
homepage = ""
documentation = ""
respository = ""
readme = "./README.md"
keywords = ["solana"]

[workspace.dependencies]
steel-api = { path = "./api", version = "0.1.0" }
bytemuck = "1.14"
num_enum = "0.7"
solana-program = "1.18"
steel = "1.3"
thiserror = "1.0"


================================================
File: tokens/create-token/steel/.gitignore
================================================
target
test-ledger


================================================
File: tokens/create-token/steel/api/Cargo.toml
================================================
[package]
name = "steel-api"
version = "0.1.0"
edition = "2021"

[dependencies]
bytemuck.workspace = true
num_enum.workspace = true
solana-program.workspace = true
spl-token = "6.0.0"
steel.workspace = true
steel-program = { version = "0.1.0", path = "../program" }
thiserror.workspace = true


================================================
File: tokens/create-token/steel/api/src/consts.rs
================================================
/// Seed of the counter account PDA.
pub const MINT: &[u8] = b"mint";

pub const MINT_NOISE: [u8; 16] = [
    89, 157, 88, 232, 243, 249, 197, 132, 199, 49, 19, 234, 91, 94, 150, 41,
];

pub const METADATA: &[u8] = b"metadata";


================================================
File: tokens/create-token/steel/api/src/error.rs
================================================
use steel::*;

#[derive(Debug, Error, Clone, Copy, PartialEq, Eq, IntoPrimitive)]
#[repr(u32)]
pub enum SteelError {
    #[error("This is a dummy error")]
    Dummy = 0,
}

error!(SteelError);


================================================
File: tokens/create-token/steel/api/src/instruction.rs
================================================
use steel::*;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, TryFromPrimitive)]
pub enum SteelInstruction {
    Create_Token = 0,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct Create_Token {
    pub token_name: [u8; 32],
    pub token_symbol: [u8; 8],
    pub token_uri: [u8; 64],
}

instruction!(SteelInstruction, Create_Token);


================================================
File: tokens/create-token/steel/api/src/lib.rs
================================================
pub mod consts;
pub mod error;
pub mod instruction;
pub mod sdk;

pub mod prelude {
    pub use crate::consts::*;
    pub use crate::error::*;
    pub use crate::instruction::*;
    pub use crate::sdk::*;
}

use steel::*;

// TODO Set program id
declare_id!("z7msBPQHDJjTvdQRoEcKyENgXDhSRYeHieN1ZMTqo35");


================================================
File: tokens/create-token/steel/api/src/sdk.rs
================================================
use steel::*;

use crate::prelude::*;

pub fn create_token(
    payer: PubKey,
    mint_authority: PubKey,
    token_name: String,
    token_symbol: String,
    token_uri: String,
) -> Instruction {
    let token_name: [u8; 32] = token_name
        .as_bytes()
        .try_into()
        .expect("token_name must be 32 bytes");
    let token_symbol: [u8; 8] = token_symbol
        .as_bytes()
        .try_into()
        .expect("token_symbol must be 32 bytes");
    let token_uri: [u8; 64] = token_uri
        .as_bytes()
        .try_into()
        .expect("token_uri must be 32 bytes");

    let mint_pda = PubKey::find_program_address(&[b"mint"], &crate::ID);
    let metadata_pda = PubKey::find_program_address();
}


================================================
File: tokens/create-token/steel/program/Cargo.toml
================================================
[package]
name = "steel-program"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]

[dependencies]
steel-api.workspace = true
solana-program.workspace = true
steel.workspace = true

[dev-dependencies]
bs64 = "0.1.2"
rand = "0.8.5"
solana-program-test = "1.18"
solana-sdk = "1.18"
tokio = { version = "1.35", features = ["full"] }


================================================
File: tokens/create-token/steel/program/src/lib.rs
================================================
mod token;

use steel::*;
use steel_api::prelude::*;
use token::*;

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    data: &[u8],
) -> ProgramResult {
    let (ix, data) = parse_instruction(&steel_api::ID, program_id, data)?;

    match ix {
        SteelInstruction::Create_Token => process_create_token(accounts, name, symbol)?,
    }

    Ok(())
}

entrypoint!(process_instruction);


================================================
File: tokens/create-token/steel/program/src/token.rs
================================================
use solana_program::{msg, program_pack::Pack};
use spl_token::state::Mint;
use steel::*;
use steel_api::prelude::*;

pub fn process_create_token(
    accounts: &[AccountInfo],
    name: String,
    symbol: String,
) -> ProgramResult {
    let mint = Mint {
        mint_authority: COption::Some(accounts[0].key.to_owned()),
        supply: 0,
        decimals: 2,
        is_initialized: false,
        freeze_authority: COption::None,
    };

    let mut data = vec![];
    mint.pack_into_slice(&mut data);

    let mut instruction = Instruction::new(
        accounts[0].key.to_owned(),
        vec![],
        vec![AccountMeta::new_readonly(accounts[0].key.to_owned(), false)],
        data,
    );

    let mut instruction_data = vec![];
    instruction.pack_into_slice(&mut instruction_data);

    msg!("Instruction data: {:?}", instruction_data);

    Ok(())
}


================================================
File: tokens/escrow/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
escrow = "qbuMdeYxYJXBjU6C6qFKjZKjXmrU83eDQomHdrch826"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.test.ts"


================================================
File: tokens/escrow/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1

[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/escrow/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana-developers/helpers": "^2.3.0",
    "@solana/spl-token": "^0.4.6",
    "@solana/web3.js": "^1.95.2"
  },
  "license": "MIT",
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "anchor-bankrun": "^0.4.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/escrow/anchor/register.js
================================================
import { register } from 'node:module';
import { pathToFileURL } from 'node:url';

register('ts-node/esm', pathToFileURL('./'));


================================================
File: tokens/escrow/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/escrow/anchor/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: tokens/escrow/anchor/.mocharc.json
================================================
{
  "extension": ["ts"],
  "spec": "tests/**/*.ts",
  "require": "ts-node/register",
  "node-option": ["experimental-specifier-resolution=node", "loader=ts-node/esm"]
}


================================================
File: tokens/escrow/anchor/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/escrow/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/escrow/anchor/programs/escrow/Cargo.toml
================================================
[package]
name = "escrow"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "escrow"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = { version = "0.30.1", features = ["init-if-needed"]}
anchor-spl = "0.30.1"
solana-program = "=2.0.3"


================================================
File: tokens/escrow/anchor/programs/escrow/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/escrow/anchor/programs/escrow/src/constants.rs
================================================
use anchor_lang::prelude::*;

#[constant]
pub const SEED: &str = "anchor";

pub const ANCHOR_DISCRIMINATOR: usize = 8;


================================================
File: tokens/escrow/anchor/programs/escrow/src/error.rs
================================================
use anchor_lang::prelude::*;

#[error_code]
pub enum ErrorCode {
    #[msg("Custom error message")]
    CustomError,
}


================================================
File: tokens/escrow/anchor/programs/escrow/src/lib.rs
================================================
pub mod constants;
pub mod error;
pub mod instructions;
pub mod state;

use anchor_lang::prelude::*;

pub use constants::*;
pub use instructions::*;
pub use state::*;

declare_id!("qbuMdeYxYJXBjU6C6qFKjZKjXmrU83eDQomHdrch826");

#[program]
pub mod escrow {
    use super::*;

    pub fn make_offer(
        context: Context<MakeOffer>,
        id: u64,
        token_a_offered_amount: u64,
        token_b_wanted_amount: u64,
    ) -> Result<()> {
        instructions::make_offer::send_offered_tokens_to_vault(&context, token_a_offered_amount)?;
        instructions::make_offer::save_offer(context, id, token_b_wanted_amount)
    }

    pub fn take_offer(context: Context<TakeOffer>) -> Result<()> {
        instructions::take_offer::send_wanted_tokens_to_maker(&context)?;
        instructions::take_offer::withdraw_and_close_vault(context)
    }
}


================================================
File: tokens/escrow/anchor/programs/escrow/src/instructions/mod.rs
================================================
pub mod make_offer;
pub use make_offer::*;

pub mod take_offer;
pub use take_offer::*;

pub mod shared;
pub use shared::*;


================================================
File: tokens/escrow/anchor/programs/escrow/src/instructions/shared.rs
================================================
use anchor_lang::prelude::*;

use anchor_spl::token_interface::{
    transfer_checked, Mint, TokenAccount, TokenInterface, TransferChecked,
};

pub fn transfer_tokens<'info>(
    from: &InterfaceAccount<'info, TokenAccount>,
    to: &InterfaceAccount<'info, TokenAccount>,
    amount: &u64,
    mint: &InterfaceAccount<'info, Mint>,
    authority: &Signer<'info>,
    token_program: &Interface<'info, TokenInterface>,
) -> Result<()> {
    let transfer_accounts = TransferChecked {
        from: from.to_account_info(),
        mint: mint.to_account_info(),
        to: to.to_account_info(),
        authority: authority.to_account_info(),
    };

    let cpi_context = CpiContext::new(token_program.to_account_info(), transfer_accounts);

    transfer_checked(cpi_context, *amount, mint.decimals)
}


================================================
File: tokens/escrow/anchor/programs/escrow/src/state/mod.rs
================================================
pub mod offer;

pub use offer::*;


================================================
File: tokens/escrow/anchor/programs/escrow/src/state/offer.rs
================================================
use anchor_lang::prelude::*;

#[account]
#[derive(InitSpace)]
pub struct Offer {
    pub id: u64,
    pub maker: Pubkey,
    pub token_mint_a: Pubkey,
    pub token_mint_b: Pubkey,
    pub token_b_wanted_amount: u64,
    pub bump: u8,
}


================================================
File: tokens/escrow/native/Cargo.toml
================================================
[workspace]
members = ["program"]
resolver = "2"


================================================
File: tokens/escrow/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml
solana program deploy ./program/target/deploy/program.so


================================================
File: tokens/escrow/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/program.so"
  },
  "dependencies": {
    "@solana/web3.js": "^1.95.4",
    "@solana/spl-token": "^0.4.9"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^10.0.9",
    "@types/node": "^22.8.6",
    "borsh": "0.7.0",
    "chai": "^4.3.4",
    "mocha": "^10.8.2",
    "solana-bankrun": "^0.4.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^5"
  }
}


================================================
File: tokens/escrow/native/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai", "node"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/escrow/native/program/Cargo.toml
================================================
[package]
name = "escrow-native-program"
version = "0.1.0"
edition = "2021"

[dependencies]
borsh = "1.5.1"
solana-program = "=1.18.17"
spl-token = { version = "4.0.0", features = [ "no-entrypoint" ] }
spl-associated-token-account = { version = "3.0.4", features = [ "no-entrypoint" ] }
thiserror="1.0.0"

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: tokens/escrow/native/program/src/error.rs
================================================
use solana_program::program_error::ProgramError;
use thiserror::Error;

#[derive(Debug, Error)]
pub enum EscrowError {
    #[error("Offer key provided does not match expected")]
    OfferKeyMismatch,

    #[error("Token account provided does not match expected")]
    TokenAccountMismatch,
}

impl From<EscrowError> for ProgramError {
    fn from(e: EscrowError) -> Self {
        ProgramError::Custom(e as u32)
    }
}


================================================
File: tokens/escrow/native/program/src/lib.rs
================================================
mod error;
mod instructions;
mod state;
mod utils;

use {
    borsh::{BorshDeserialize, BorshSerialize},
    instructions::*,
    solana_program::{
        account_info::AccountInfo, entrypoint, entrypoint::ProgramResult, pubkey::Pubkey,
    },
};

entrypoint!(process_instruction);

fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    let instruction = EscrowInstruction::try_from_slice(instruction_data)?;

    match instruction {
        EscrowInstruction::MakeOffer(data) => MakeOffer::process(program_id, accounts, data),
        EscrowInstruction::TakeOffer => TakeOffer::process(program_id, accounts),
    }
}

#[derive(BorshSerialize, BorshDeserialize, Debug)]
enum EscrowInstruction {
    MakeOffer(MakeOffer),
    TakeOffer,
}


================================================
File: tokens/escrow/native/program/src/state.rs
================================================
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::pubkey::Pubkey;

#[derive(BorshDeserialize, BorshSerialize, Debug)]
pub struct Offer {
    pub id: u64,
    pub maker: Pubkey,
    pub token_mint_a: Pubkey,
    pub token_mint_b: Pubkey,
    pub token_b_wanted_amount: u64,
    pub bump: u8,
}

impl Offer {
    pub const SEED_PREFIX: &'static [u8] = b"offer";
}


================================================
File: tokens/escrow/native/program/src/utils.rs
================================================
use crate::error::EscrowError;
use solana_program::{program_error::ProgramError, pubkey::Pubkey};

pub fn assert_is_associated_token_account(
    token_address: &Pubkey,
    owner: &Pubkey,
    mint: &Pubkey,
) -> Result<(), ProgramError> {
    let associated_token_account_address =
        &spl_associated_token_account::get_associated_token_address(owner, mint);

    if token_address != associated_token_account_address {
        return Err(EscrowError::TokenAccountMismatch.into());
    }

    Ok(())
}


================================================
File: tokens/escrow/native/program/src/instructions/mod.rs
================================================
pub mod make_offer;
pub use make_offer::*;

pub mod take_offer;
pub use take_offer::*;


================================================
File: tokens/escrow/poseidon/escrow/Anchor.toml
================================================
[toolchain]

[features]
seeds = false
skip-lint = false

[programs.localnet]
escrow = "7GWQBBQmcfjWdnyjkXdxUXeDxp2mW1WsGtMhpsFD8eKN"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "/Users/apple/.config/solana/id.json"

[scripts]
test = "pnpm run ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: tokens/escrow/poseidon/escrow/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/escrow/poseidon/escrow/package.json
================================================
{
    "scripts": {
        "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
        "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
    },
    "dependencies": {
        "@coral-xyz/anchor": "^0.29.0",
        "@solanaturbine/poseidon": "^0.0.4",
        "anchor-bankrun": "^0.5.0",
        "solana-bankrun": "^0.4.0"
    },
    "devDependencies": {
        "@types/bn.js": "^5.1.0",
        "@types/chai": "^4.3.0",
        "@types/mocha": "^9.0.0",
        "chai": "^4.3.4",
        "mocha": "^9.0.3",
        "prettier": "^2.6.2",
        "ts-mocha": "^10.0.0",
        "typescript": "^4.3.5"
    }
}


================================================
File: tokens/escrow/poseidon/escrow/tsconfig.json
================================================
{
            "compilerOptions": {
              "types": ["mocha", "chai"],
              "typeRoots": ["./node_modules/@types"],
              "lib": ["es2015"],
              "module": "commonjs",
              "target": "es6",
              "esModuleInterop": true
            }
          }
          

================================================
File: tokens/escrow/poseidon/escrow/.gitignore
================================================

.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: tokens/escrow/poseidon/escrow/.prettierignore
================================================

.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/escrow/poseidon/escrow/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require("@coral-xyz/anchor");

module.exports = async function (provider) {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/escrow/poseidon/escrow/programs/escrow/Cargo.toml
================================================
[package]
name = "escrow"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "escrow"

[features]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
cpi = ["no-entrypoint"]
default = []

[dependencies]
anchor-lang = { version = "0.29.0", features = ["init-if-needed"] }
anchor-spl = "0.29.0"


================================================
File: tokens/escrow/poseidon/escrow/programs/escrow/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/escrow/steel/README.md
================================================
# Escrow

**Escrow** is a ...
        
## API
- [`Consts`](api/src/consts.rs) – Program constants.
- [`Instruction`](api/src/instruction.rs) – Declared instructions.

## Instructions
- [`MakeOffer`](program/src/make_offer.rs) – Make an offer ...
- [`TakerOffer`](program/src/take_offer.rs) – Take an offer ...

## State
- [`Offer`](api/src/state/offer.rs) – Offer state ...

## How to?

Compile your program:

```sh
pnpm build
```

Run tests:

```sh
pnpm test
```

Run build and test

```sh
pnpm build-and-test
```

Deploy your program:

```sh
pnpm deploy
```


================================================
File: tokens/escrow/steel/Cargo.toml
================================================
[workspace]
resolver = "2"
members = ["api", "program"]

[workspace.package]
version = "0.1.0"
edition = "2021"
license = "Apache-2.0"
homepage = ""
documentation = ""
repository = ""
readme = "./README.md"
keywords = ["solana"]

[workspace.dependencies]
escrow-api = { path = "./api", version = "0.1.0" }
bytemuck = "1.14"
num_enum = "0.7"
solana-program = "1.18"
steel = { version = "2.0", features = ["spl"] }
thiserror = "1.0"
spl-token = "^4"

================================================
File: tokens/escrow/steel/package.json
================================================
{
  "name": "steel",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/*.test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/account_data_program.so"
  },
  "keywords": [],
  "author": "Leo Pham <hongthaipro@gmail.com>",
  "license": "ISC",
  "dependencies": {
    "@solana/spl-token": "^0.4.9",
    "@solana/web3.js": "^1.95.4",
    "bs58": "^6.0.0"
  },
  "devDependencies": {
    "@types/chai": "^4.3.7",
    "@types/mocha": "^10.0.9",
    "@types/node": "^22.7.9",
    "borsh": "^2.0.0",
    "chai": "^4.3.7",
    "mocha": "^10.7.3",
    "solana-bankrun": "^0.4.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^5.6.3"
  }
}


================================================
File: tokens/escrow/steel/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai", "node"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/escrow/steel/api/Cargo.toml
================================================
[package]
name = "escrow-api"
description = "API for interacting with the Escrow program"
version.workspace = true
edition.workspace = true
license.workspace = true
homepage.workspace = true
documentation.workspace = true
repository.workspace = true
readme.workspace = true
keywords.workspace = true

[dependencies]
bytemuck.workspace = true
num_enum.workspace = true
solana-program.workspace = true
steel.workspace = true
thiserror.workspace = true
spl-token.workspace = true


================================================
File: tokens/escrow/steel/api/src/consts.rs
================================================
use solana_program::pubkey;
use steel::Pubkey;

/// Seed of the offer account PDA.
pub const OFFER_SEED: &[u8] = b"offer";

pub const ASSOCIATED_TOKEN_PROGRAM_ID: Pubkey =
    pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL");


================================================
File: tokens/escrow/steel/api/src/instruction.rs
================================================
use steel::*;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, TryFromPrimitive)]
pub enum EscrowInstruction {
    MakeOffer = 0,
    TakerOffer = 1,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct MakeOffer {
    pub id: [u8; 8],
    pub token_a_offered_amount: [u8; 8],
    pub token_b_wanted_amount: [u8; 8],
}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct TakerOffer {}

instruction!(EscrowInstruction, MakeOffer);
instruction!(EscrowInstruction, TakerOffer);


================================================
File: tokens/escrow/steel/api/src/lib.rs
================================================
pub mod consts;
pub mod instruction;
pub mod sdk;
pub mod state;

pub mod prelude {
    pub use crate::consts::*;
    pub use crate::instruction::*;
    pub use crate::sdk::*;
    pub use crate::state::*;
}

use steel::*;

// TODO Set program id
declare_id!("z7msBPQHDJjTvdQRoEcKyENgXDhSRYeHieN1ZMTqo35");


================================================
File: tokens/escrow/steel/api/src/state/mod.rs
================================================
mod offer;

pub use offer::*;

use steel::*;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, IntoPrimitive, TryFromPrimitive)]
pub enum EscrowAccount {
    Offer = 0,
}


================================================
File: tokens/escrow/steel/api/src/state/offer.rs
================================================
use steel::*;

use crate::consts::OFFER_SEED;

use super::EscrowAccount;

/// Fetch PDA of the counter account.
pub fn offer_pda(maker: Pubkey, id: u64) -> (Pubkey, u8) {
    Pubkey::find_program_address(
        &[OFFER_SEED, maker.as_ref(), id.to_le_bytes().as_ref()],
        &crate::id(),
    )
}

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq, Pod, Zeroable)]
pub struct Offer {
    pub id: [u8; 8],
    pub maker: Pubkey,
    pub token_mint_a: Pubkey,
    pub token_mint_b: Pubkey,
    pub token_b_wanted_amount: [u8; 8],
    pub bump: u8,
}

account!(EscrowAccount, Offer);


================================================
File: tokens/escrow/steel/program/Cargo.toml
================================================
[package]
name = "escrow-program"
description = ""
version.workspace = true
edition.workspace = true
license.workspace = true
homepage.workspace = true
documentation.workspace = true
repository.workspace = true
readme.workspace = true
keywords.workspace = true

[lib]
crate-type = ["cdylib", "lib"]

[dependencies]
escrow-api.workspace = true
solana-program.workspace = true
steel.workspace = true
spl-token.workspace = true

[dev-dependencies]
base64 = "0.21"
rand = "0.8.5"
solana-program-test = "1.18"
solana-sdk = "1.18"
tokio = { version = "1.35", features = ["full"] }


================================================
File: tokens/escrow/steel/program/src/lib.rs
================================================
mod make_offer;
mod take_offer;

use make_offer::*;
use take_offer::*;

use escrow_api::prelude::*;
use steel::*;

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    data: &[u8],
) -> ProgramResult {
    let (ix, data) = parse_instruction(&escrow_api::ID, program_id, data)?;

    match ix {
        EscrowInstruction::MakeOffer => process_make_offer(accounts, data)?,
        EscrowInstruction::TakerOffer => process_take_offer(accounts, data)?,
    }

    Ok(())
}

entrypoint!(process_instruction);


================================================
File: tokens/external-delegate-token-master/anchor/Anchor.toml
================================================
[features]
seeds = false
skip-lint = false

[programs.localnet]
external_delegate_token_master = "FYPkt5VWMvtyWZDMGCwoKFkE3wXTzphicTpnNGuHWVbD"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "yarn test"

================================================
File: tokens/external-delegate-token-master/anchor/package.json
================================================
{
  "name": "external-delegate-token-master",
  "version": "1.0.0",
  "license": "MIT",
  "scripts": {
    "test": "jest --detectOpenHandles --forceExit",
    "test:watch": "jest --watch",
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check",
    "build": "anchor build"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.29.0",
    "@solana/spl-token": "^0.3.9",
    "@solana/web3.js": "^1.90.0",
    "ethers": "^5.7.2"
  },
  "devDependencies": {
    "@babel/core": "^7.23.7",
    "@babel/preset-env": "^7.23.7",
    "@babel/preset-typescript": "^7.23.7",
    "@types/chai": "^4.3.0",
    "@types/jest": "^29.5.11",
    "@types/node": "^18.0.0",
    "babel-jest": "^29.7.0",
    "chai": "^4.3.4",
    "jest": "^29.7.0",
    "prettier": "^2.6.2",
    "solana-bankrun": "^0.2.0",
    "ts-jest": "^29.1.1",
    "typescript": "^4.9.5",
    "@testing-library/jest-dom": "^6.1.6"
  }
}

================================================
File: tokens/external-delegate-token-master/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": [
      "jest",
      "node"
    ],
    "typeRoots": [
      "./node_modules/@types"
    ],
    "lib": [
      "es2015",
      "dom",
      "es6",
      "es2017",
      "esnext.asynciterable"
    ],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true,
    "resolveJsonModule": true,
    "sourceMap": true,
    "moduleResolution": "node",
    "declaration": true,
    "declarationMap": true,
    "allowJs": true,
    "strict": true,
    "strictNullChecks": true,
    "noImplicitAny": false,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "src/*"
      ]
    },
    "outDir": "dist"
  },
  "include": [
    "tests/**/*",
    "programs/**/*",
    "jest.setup.js",
    "jest.config.js"
  ],
  "exclude": [
    "node_modules"
  ]
}

================================================
File: tokens/external-delegate-token-master/anchor/tests/types.js
================================================
// tests/types.ts
import { PublicKey } from '@solana/web3.js';

export interface ProgramTestContext {
    connection: any;
    programs: {
        programId: PublicKey;
        program: string;
    }[];
    grantLamports: (address: PublicKey, amount: number) => Promise<void>;
    terminate: () => Promise<void>;
}

export interface UserAccount {
    authority: PublicKey;
    ethereumAddress: number[];
}

================================================
File: tokens/nft-minter/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false
seeds = true

[programs.localnet]
nft_minter = "52quezNUzc1Ej6Jh6L4bvtxPW8j6TEFHuLVAWiFvdnsc"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"

[test]
startup_wait = 5000
shutdown_wait = 2000
upgradeable = false

[test.validator]
bind_address = "0.0.0.0"
url = "https://api.mainnet-beta.solana.com"
ledger = ".anchor/test-ledger"
rpc_port = 8899

[[test.validator.clone]]
address = "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"


================================================
File: tokens/nft-minter/anchor/Cargo.toml
================================================
[workspace]
members = ["programs/*"]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1



================================================
File: tokens/nft-minter/anchor/package.json
================================================
{
  "scripts": {
    "postinstall": "zx prepare.mjs"
  },
  "devDependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/spl-token": "^0.3.11",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "anchor-bankrun": "^0.4.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5",
    "zx": "^8.1.4"
  }
}


================================================
File: tokens/nft-minter/anchor/prepare.mjs
================================================
#!/usr/bin/env zx

import { mkdir, rm } from 'node:fs/promises';
import { join } from 'node:path';
import { $ } from 'zx';

const programs = [
  {
    id: 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
    name: 'token_metadata.so',
  },
];

const outputDir = 'tests/fixtures';
const overwrite = true;

try {
  for (const program of programs) {
    const { id, name } = program;
    const outputFile = join(outputDir, name);
    await $`solana config set -um`;

    try {
      await mkdir(outputDir, { recursive: true });
      if (overwrite) await rm(outputFile, { force: true });
      await $`solana program dump ${id} ${outputFile}`;
      console.log(`Program ${id} dumped to ${outputFile}`);
    } catch (error) {
      console.error(`Error dumping ${id}: ${error.message}`);
    }
  }
} catch (error) {
  console.error(`Error preparing programs: ${error.message}`);
}


================================================
File: tokens/nft-minter/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/nft-minter/anchor/programs/nft-minter/Cargo.toml
================================================
[package]
name = "nft-minter"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "nft_minter"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = { version = "0.30.0", features = ["init-if-needed"] }
anchor-spl = { version = "0.30.0", features = ["metadata"] }


================================================
File: tokens/nft-minter/anchor/programs/nft-minter/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/nft-minter/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml
solana program deploy ./program/target/deploy/program.so


================================================
File: tokens/nft-minter/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/test.ts"
  },
  "dependencies": {
    "@metaplex-foundation/mpl-token-metadata": "^2.5.2",
    "@solana/spl-token": "^0.3.7",
    "@solana/web3.js": "^1.73.0",
    "borsh": "^0.7.0",
    "buffer": "^6.0.3",
    "fs": "^0.0.1-security"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/nft-minter/native/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/nft-minter/native/program/Cargo.toml
================================================
[package]
name = "nft-minter-program"
version = "0.1.0"
edition = "2021"

[dependencies]
borsh = "0.9.3"
borsh-derive = "0.9.1"
solana-program = "1.16.10"
spl-token = { version="4.0.0", features = [ "no-entrypoint" ] }
spl-associated-token-account = { version="2.0.0", features = [ "no-entrypoint" ] }
mpl-token-metadata = { version="1.11" }

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: tokens/nft-minter/native/program/src/lib.rs
================================================
use solana_program::{
    account_info::AccountInfo, entrypoint, entrypoint::ProgramResult, pubkey::Pubkey,
};

pub mod instructions;
pub mod processor;

entrypoint!(process_instruction);

fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    processor::process_instruction(program_id, accounts, instruction_data)
}


================================================
File: tokens/nft-minter/native/program/src/processor.rs
================================================
use {
    borsh::{BorshDeserialize, BorshSerialize},
    solana_program::{account_info::AccountInfo, entrypoint::ProgramResult, pubkey::Pubkey},
};

use crate::instructions::{
    create::{create_token, CreateTokenArgs},
    mint::mint_to,
};

#[derive(BorshSerialize, BorshDeserialize, Debug)]
enum SplMinterIntstruction {
    Create(CreateTokenArgs),
    Mint,
}

pub fn process_instruction(
    _program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    let instruction = SplMinterIntstruction::try_from_slice(instruction_data)?;

    match instruction {
        SplMinterIntstruction::Create(args) => create_token(accounts, args),
        SplMinterIntstruction::Mint => mint_to(accounts),
    }
}


================================================
File: tokens/nft-minter/native/program/src/instructions/mod.rs
================================================
pub mod create;
pub mod mint;

pub use create::*;
pub use mint::*;


================================================
File: tokens/nft-minter/native/tests/instructions.ts
================================================
import * as borsh from 'borsh';

class Assignable {
  constructor(properties) {
    for (const [key, value] of Object.entries(properties)) {
      this[key] = value;
    }
  }
}

export enum NftMinterInstruction {
  Create = 0,
  Mint = 1,
}

export class CreateTokenArgs extends Assignable {
  toBuffer() {
    return Buffer.from(borsh.serialize(CreateTokenArgsSchema, this));
  }
}
const CreateTokenArgsSchema = new Map([
  [
    CreateTokenArgs,
    {
      kind: 'struct',
      fields: [
        ['instruction', 'u8'],
        ['nft_title', 'string'],
        ['nft_symbol', 'string'],
        ['nft_uri', 'string'],
      ],
    },
  ],
]);

export class MintToArgs extends Assignable {
  toBuffer() {
    return Buffer.from(borsh.serialize(MintToArgsSchema, this));
  }
}
const MintToArgsSchema = new Map([
  [
    MintToArgs,
    {
      kind: 'struct',
      fields: [['instruction', 'u8']],
    },
  ],
]);


================================================
File: tokens/nft-operations/anchor/Anchor.toml
================================================
[toolchain]

[features]
seeds = false
skip-lint = false

[programs.localnet]
mint_nft = "3EMcczaGi9ivdLxvvFwRbGYeEUEHpGwabXegARw4jLxa"

[programs.devnet]
mint_nft = "3EMcczaGi9ivdLxvvFwRbGYeEUEHpGwabXegARw4jLxa"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"

[test.validator]
url = "https://api.mainnet-beta.solana.com"

[[test.validator.clone]]
address = "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"


================================================
File: tokens/nft-operations/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/nft-operations/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check",
    "postinstall": "zx prepare.mjs"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.1",
    "@metaplex-foundation/mpl-token-metadata": "^3.1.2",
    "@metaplex-foundation/umi": "^0.9.0",
    "@solana/spl-token": "^0.4.6",
    "axios": "^1.6.7",
    "node-fetch": "^3.3.2"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "anchor-bankrun": "^0.4.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5",
    "zx": "^8.1.4"
  }
}


================================================
File: tokens/nft-operations/anchor/prepare.mjs
================================================
#!/usr/bin/env zx

import { mkdir, rm } from 'node:fs/promises';
import { join } from 'node:path';
import { $ } from 'zx';

const programs = [
  {
    id: 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
    name: 'token_metadata.so',
  },
];

const outputDir = 'tests/fixtures';
const overwrite = true;

try {
  for (const program of programs) {
    const { id, name } = program;
    const outputFile = join(outputDir, name);
    await $`solana config set -um`;

    try {
      await mkdir(outputDir, { recursive: true });
      if (overwrite) await rm(outputFile, { force: true });
      await $`solana program dump ${id} ${outputFile}`;
      console.log(`Program ${id} dumped to ${outputFile}`);
    } catch (error) {
      console.error(`Error dumping ${id}: ${error.message}`);
    }
  }
} catch (error) {
  console.error(`Error preparing programs: ${error.message}`);
}


================================================
File: tokens/nft-operations/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/nft-operations/anchor/programs/mint-nft/Cargo.toml
================================================
[package]
name = "mint-nft"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "mint_nft"

[features]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
cpi = ["no-entrypoint"]
default = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = { version = "0.30.1", features = ["init-if-needed"] }
anchor-spl = { version = "0.30.1", features = ["metadata"] }


================================================
File: tokens/nft-operations/anchor/programs/mint-nft/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/nft-operations/anchor/programs/mint-nft/src/lib.rs
================================================
use anchor_lang::prelude::*;

declare_id!("3EMcczaGi9ivdLxvvFwRbGYeEUEHpGwabXegARw4jLxa");

pub mod contexts;

pub use contexts::*;

#[program]
pub mod mint_nft {

    use super::*;
    pub fn create_collection(ctx: Context<CreateCollection>) -> Result<()> {
        ctx.accounts.create_collection(&ctx.bumps)
    }
    
    pub fn mint_nft(ctx: Context<MintNFT>) -> Result<()> {
        ctx.accounts.mint_nft(&ctx.bumps)
    }

    pub fn verify_collection(ctx: Context<VerifyCollectionMint>) -> Result<()> {
        ctx.accounts.verify_collection(&ctx.bumps)
    }
}


================================================
File: tokens/nft-operations/anchor/programs/mint-nft/src/contexts/mod.rs
================================================
pub mod mint_nft;
pub mod create_collection;
pub mod verify_collection;

pub use mint_nft::*;
pub use create_collection::*;
pub use verify_collection::*;


================================================
File: tokens/pda-mint-authority/README.md
================================================
# PDA Mint Authority

This example is exactly the same as the `NFT Minter` example, but it changes the `mint authority` account from the payer (System Account) to a PDA.   
   
💡Notice the use of `invoke_signed` for CPIs.

================================================
File: tokens/pda-mint-authority/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
token_minter = "3LFrPHqwk5jMrmiz48BFj6NV2k4NjobgTe1jChzx3JGD"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"

[test]
startup_wait = 5000
shutdown_wait = 2000
upgradeable = false

[test.validator]
bind_address = "0.0.0.0"
url = "https://api.mainnet-beta.solana.com"
ledger = ".anchor/test-ledger"
rpc_port = 8899

[[test.validator.clone]]
address = "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"


================================================
File: tokens/pda-mint-authority/anchor/Cargo.toml
================================================
[workspace]
members = ["programs/*"]

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/pda-mint-authority/anchor/package.json
================================================
{
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/spl-token": "^0.3.8"
  },
  "scripts": {
    "postinstall": "zx prepare.mjs"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "anchor-bankrun": "^0.4.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5",
    "zx": "^8.1.4"
  }
}


================================================
File: tokens/pda-mint-authority/anchor/prepare.mjs
================================================
#!/usr/bin/env zx

import { mkdir, rm } from 'node:fs/promises';
import { join } from 'node:path';
import { $ } from 'zx';

const programs = [
  {
    id: 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
    name: 'token_metadata.so',
  },
];

const outputDir = 'tests/fixtures';
const overwrite = true;

try {
  for (const program of programs) {
    const { id, name } = program;
    const outputFile = join(outputDir, name);
    await $`solana config set -um`;

    try {
      await mkdir(outputDir, { recursive: true });
      if (overwrite) await rm(outputFile, { force: true });
      await $`solana program dump ${id} ${outputFile}`;
      console.log(`Program ${id} dumped to ${outputFile}`);
    } catch (error) {
      console.error(`Error dumping ${id}: ${error.message}`);
    }
  }
} catch (error) {
  console.error(`Error preparing programs: ${error.message}`);
}


================================================
File: tokens/pda-mint-authority/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/pda-mint-authority/anchor/programs/token-minter/Cargo.toml
================================================
[package]
name = "pda-mint-authority-anchor"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "token_minter"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = { version = "0.30.0", features = ["init-if-needed"] }
anchor-spl = { version = "0.30.0", features = ["metadata"] }


================================================
File: tokens/pda-mint-authority/anchor/programs/token-minter/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/pda-mint-authority/anchor/programs/token-minter/src/lib.rs
================================================
#![allow(clippy::result_large_err)]

use anchor_lang::prelude::*;
use instructions::*;
pub mod instructions;

declare_id!("3LFrPHqwk5jMrmiz48BFj6NV2k4NjobgTe1jChzx3JGD");

#[program]
pub mod token_minter {
    use super::*;

    pub fn create_token(
        ctx: Context<CreateToken>,
        token_name: String,
        token_symbol: String,
        token_uri: String,
    ) -> Result<()> {
        create::create_token(ctx, token_name, token_symbol, token_uri)
    }

    pub fn mint_token(ctx: Context<MintToken>, amount: u64) -> Result<()> {
        mint::mint_token(ctx, amount)
    }
}


================================================
File: tokens/pda-mint-authority/anchor/programs/token-minter/src/instructions/mod.rs
================================================
pub mod create;
pub mod mint;

pub use create::*;
pub use mint::*;


================================================
File: tokens/pda-mint-authority/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml
solana program deploy ./program/target/deploy/program.so


================================================
File: tokens/pda-mint-authority/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/hello_solana_program.so"
  },
  "dependencies": {
    "@metaplex-foundation/mpl-token-metadata": "^2.5.2",
    "@solana/spl-token": "^0.3.7",
    "@solana/web3.js": "^1.73.0",
    "borsh": "^0.7.0",
    "buffer": "^6.0.3",
    "fs": "^0.0.1-security"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/pda-mint-authority/native/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/pda-mint-authority/native/program/Cargo.toml
================================================
[package]
name = "pda-mint-authority-native-program"
version = "0.1.0"
edition = "2021"

[dependencies]
borsh = "0.9.3"
borsh-derive = "0.9.1"
solana-program = "1.16.10"
spl-token = { version="4.0.0", features = [ "no-entrypoint" ] }
spl-associated-token-account = { version="2.0.0", features = [ "no-entrypoint" ] }
mpl-token-metadata = { version="1.11", features = [ "no-entrypoint" ] }

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: tokens/pda-mint-authority/native/program/src/lib.rs
================================================
use solana_program::{
    account_info::AccountInfo, entrypoint, entrypoint::ProgramResult, pubkey::Pubkey,
};

pub mod instructions;
pub mod processor;
pub mod state;

entrypoint!(process_instruction);

fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    processor::process_instruction(program_id, accounts, instruction_data)
}


================================================
File: tokens/pda-mint-authority/native/program/src/processor.rs
================================================
use {
    borsh::{BorshDeserialize, BorshSerialize},
    solana_program::{account_info::AccountInfo, entrypoint::ProgramResult, pubkey::Pubkey},
};

use crate::instructions::{
    create::{create_token, CreateTokenArgs},
    init::init,
    mint::mint_to,
};

#[derive(BorshSerialize, BorshDeserialize, Debug)]
enum MyInstruction {
    Init,
    Create(CreateTokenArgs),
    Mint,
}

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    let instruction = MyInstruction::try_from_slice(instruction_data)?;

    match instruction {
        MyInstruction::Init => init(program_id, accounts),
        MyInstruction::Create(args) => create_token(program_id, accounts, args),
        MyInstruction::Mint => mint_to(program_id, accounts),
    }
}


================================================
File: tokens/pda-mint-authority/native/program/src/instructions/mod.rs
================================================
pub mod create;
pub mod init;
pub mod mint;

pub use create::*;
pub use init::*;
pub use mint::*;


================================================
File: tokens/pda-mint-authority/native/program/src/state/mod.rs
================================================
use borsh::{BorshDeserialize, BorshSerialize};

#[derive(BorshDeserialize, BorshSerialize)]
pub struct MintAuthorityPda {
    pub bump: u8,
}

impl MintAuthorityPda {
    pub const SEED_PREFIX: &'static str = "mint_authority";
    pub const SIZE: usize = 8 + 8;
}


================================================
File: tokens/pda-mint-authority/poseidon/token-minter/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
token_minter = "AMXNdYTyDpcLLJ9CzVJQ1kw5gqE4JeZxjtUbH2MwntdD"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "yarn run ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: tokens/pda-mint-authority/poseidon/token-minter/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1

[features]
anchor-lang = { version = "0.30.1", features = ["init-if-needed"]}


================================================
File: tokens/pda-mint-authority/poseidon/token-minter/package.json
================================================
{
  "license": "ISC",
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check",
    "ts-mocha": "ts-mocha --project tsconfig.json"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.1",
    "@metaplex-foundation/mpl-token-metadata": "^3.2.1",
    "@metaplex-foundation/umi": "^0.9.2",
    "@solana/spl-token": "^0.4.9",
    "anchor-bankrun": "^0.5.0",
    "solana-bankrun": "^0.4.0"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/pda-mint-authority/poseidon/token-minter/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/pda-mint-authority/poseidon/token-minter/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: tokens/pda-mint-authority/poseidon/token-minter/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/pda-mint-authority/poseidon/token-minter/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/pda-mint-authority/poseidon/token-minter/programs/token-minter/Cargo.toml
================================================
[package]
name = "token-minter"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "token_minter"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build"]

[dependencies]
anchor-lang = "0.30.1"


================================================
File: tokens/pda-mint-authority/poseidon/token-minter/programs/token-minter/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/pda-mint-authority/poseidon/token-minter/tests/token-minter.ts
================================================
import * as anchor from '@coral-xyz/anchor';
import { Program } from '@coral-xyz/anchor';
import { TokenMinter } from '../target/types/token_minter';

describe('token-minter', () => {
  // Configure the client to use the local cluster.
  anchor.setProvider(anchor.AnchorProvider.env());

  const program = anchor.workspace.TokenMinter as Program<TokenMinter>;

  it('Is initialized!', async () => {
    // Add your test here.
    const tx = await program.methods.initialize().rpc();
    console.log('Your transaction signature', tx);
  });
});


================================================
File: tokens/pda-mint-authority/poseidon/token-minter/ts-programs/package.json
================================================
{
  "name": "ts-programs",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@solanaturbine/poseidon": "^0.0.9"
  }
}


================================================
File: tokens/pda-mint-authority/poseidon/token-minter/ts-programs/pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@solanaturbine/poseidon':
        specifier: ^0.0.9
        version: 0.0.9

packages:

  '@solanaturbine/poseidon@0.0.9':
    resolution: {integrity: sha512-WH4klRUmLXpejXPBmLQ50nusj7tA/gDw87txLCWJIcVbwrj2Nart0YxzFxR1YZG4aR1WFj6xOunL8sIrLGvgyw==}

snapshots:

  '@solanaturbine/poseidon@0.0.9': {}


================================================
File: tokens/pda-mint-authority/steel/README.md
================================================
# Steel

**Steel** is a ...
        
## API
- [`Consts`](api/src/consts.rs) – Program constants.
- [`Error`](api/src/error.rs) – Custom program errors.
- [`Event`](api/src/event.rs) – Custom program events.
- [`Instruction`](api/src/instruction.rs) – Declared instructions.

## Instructions
- [`Hello`](program/src/hello.rs) – Hello ...

## State
- [`User`](api/src/state/user.rs) – User ...

## Tests

To run the test suit, use the Solana toolchain:
```
cargo test-sbf         
```


================================================
File: tokens/pda-mint-authority/steel/Cargo.toml
================================================
[workspace]
resolver = "2"
members = ["api", "program"]

[workspace.package]
version = "0.1.0"
edition = "2021"
license = "Apache-2.0"
homepage = ""
documentation = ""
repository = ""
readme = "./README.md"
keywords = ["solana"]

[workspace.dependencies]
pda-mint-authority-api = { path = "./api", version = "0.1.0" }
bytemuck = "1.14"
num_enum = "0.7"
solana-program = "1.18"
steel = { version = "2.0", features = ["spl"] }
thiserror = "1.0"
mpl-token-metadata = { version = "4.1.2" }
spl-token = "^4"
const-crypto = "0.1.0"
spl-associated-token-account = { version = "^2.3", features = [
    "no-entrypoint",
] }


================================================
File: tokens/pda-mint-authority/steel/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml
solana program deploy ./program/target/deploy/program.so


================================================
File: tokens/pda-mint-authority/steel/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/tests.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/pda_mint_authority_program.so",
    "postinstall": "zx prepare.mjs"
  },
  "dependencies": {
    "@metaplex-foundation/mpl-token-metadata": "^2.5.2",
    "@solana/spl-token": "^0.3.7",
    "@solana/web3.js": "^1.73.0",
    "borsh": "^0.7.0",
    "buffer": "^6.0.3",
    "fs": "^0.0.1-security"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5",
    "solana-bankrun": "^0.4.0",
    "zx": "^8.1.4"
  }
}


================================================
File: tokens/pda-mint-authority/steel/prepare.mjs
================================================
#!/usr/bin/env zx

import { mkdir, rm } from 'node:fs/promises';
import { join } from 'node:path';
import { $ } from 'zx';

const programs = [
  {
    id: 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
    name: 'token_metadata.so',
  },
];

const outputDir = 'tests/fixtures';
const overwrite = true;

try {
  for (const program of programs) {
    const { id, name } = program;
    const outputFile = join(outputDir, name);
    await $`solana config set -um`;

    try {
      await mkdir(outputDir, { recursive: true });
      if (overwrite) await rm(outputFile, { force: true });
      await $`solana program dump ${id} ${outputFile}`;
      console.log(`Program ${id} dumped to ${outputFile}`);
    } catch (error) {
      console.error(`Error dumping ${id}: ${error.message}`);
    }
  }
} catch (error) {
  console.error(`Error preparing programs: ${error.message}`);
}


================================================
File: tokens/pda-mint-authority/steel/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/pda-mint-authority/steel/.gitignore
================================================
target
test-ledger


================================================
File: tokens/pda-mint-authority/steel/api/Cargo.toml
================================================
[package]
name = "pda-mint-authority-api"
version = "0.1.0"
edition = "2021"

[dependencies]
bytemuck.workspace = true
num_enum.workspace = true
solana-program.workspace = true
steel.workspace = true
thiserror.workspace = true
spl-token.workspace = true
mpl-token-metadata.workspace = true
const-crypto.workspace = true
spl-associated-token-account.workspace = true


================================================
File: tokens/pda-mint-authority/steel/api/src/consts.rs
================================================
/// The seed of the mint authority account PDA.
pub const MINT_AUTHORITY: &[u8] = b"mint_authority";

/// The seed of the metadata account PDA.
pub const METADATA: &[u8] = b"metadata";


================================================
File: tokens/pda-mint-authority/steel/api/src/instruction.rs
================================================
use steel::*;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, TryFromPrimitive)]
pub enum SteelInstruction {
    Init = 0,
    Create = 1,
    Mint = 2,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct Init {}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct Create {
    pub token_name: [u8; 32],
    pub token_symbol: [u8; 8],
    pub token_uri: [u8; 64],
}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct Mint {
    pub amount: [u8; 8],
}

instruction!(SteelInstruction, Init);
instruction!(SteelInstruction, Create);
instruction!(SteelInstruction, Mint);


================================================
File: tokens/pda-mint-authority/steel/api/src/lib.rs
================================================
pub mod consts;
pub mod instruction;
pub mod sdk;
pub mod state;

pub mod prelude {
    pub use crate::consts::*;
    pub use crate::instruction::*;
    pub use crate::sdk::*;
    pub use crate::state::*;
}

use steel::*;

// TODO Set program id
declare_id!("z7msBPQHDJjTvdQRoEcKyENgXDhSRYeHieN1ZMTqo35");


================================================
File: tokens/pda-mint-authority/steel/api/src/state/mint_authority.rs
================================================
use steel::*;

use super::SteelAccount;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq, Pod, Zeroable)]
pub struct MintAuthorityPda {
    pub bump: u8,
}

account!(SteelAccount, MintAuthorityPda);


================================================
File: tokens/pda-mint-authority/steel/api/src/state/mod.rs
================================================
mod mint_authority;

pub use mint_authority::*;

use steel::*;

use crate::consts::*;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, IntoPrimitive, TryFromPrimitive)]
pub enum SteelAccount {
    MintAuthorityPda = 0,
}

/// Fetch PDA of the mint authority account.
pub fn mint_authority_pda() -> (Pubkey, u8) {
    Pubkey::find_program_address(&[MINT_AUTHORITY], &crate::id())
}


================================================
File: tokens/pda-mint-authority/steel/program/Cargo.toml
================================================
[package]
name = "pda-mint-authority-program"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]

[dependencies]
pda-mint-authority-api.workspace = true
solana-program.workspace = true
steel.workspace = true
spl-token.workspace = true
mpl-token-metadata.workspace = true
spl-associated-token-account.workspace = true

[dev-dependencies]
base64 = "0.21"
rand = "0.8.5"
solana-program-test = "1.18"
solana-sdk = "1.18"
tokio = { version = "1.35", features = ["full"] }


================================================
File: tokens/pda-mint-authority/steel/program/src/lib.rs
================================================
mod create;
mod init;
mod mint;

pub use create::*;
pub use init::*;
pub use mint::*;

use pda_mint_authority_api::prelude::*;
use steel::*;

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    data: &[u8],
) -> ProgramResult {
    let (ix, data) = parse_instruction(&pda_mint_authority_api::ID, program_id, data)?;

    match ix {
        SteelInstruction::Create => process_create(accounts, data)?,
        SteelInstruction::Mint => process_mint(accounts, data)?,
        SteelInstruction::Init => process_init(accounts, data)?,
    }

    Ok(())
}

entrypoint!(process_instruction);


================================================
File: tokens/spl-token-minter/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
spl_token_minter = "3of89Z9jwek9zrFgpCWc9jZvQvitpVMxpZNsrAD2vQUD"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"

[test]
startup_wait = 5000
shutdown_wait = 2000
upgradeable = false

[test.validator]
bind_address = "0.0.0.0"
url = "https://api.mainnet-beta.solana.com"
ledger = ".anchor/test-ledger"
rpc_port = 8899

[[test.validator.clone]]
address = "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"


================================================
File: tokens/spl-token-minter/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/spl-token-minter/anchor/package.json
================================================
{
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/spl-token": "^0.3.8"
  },
  "scripts": {
    "postinstall": "zx prepare.mjs"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "anchor-bankrun": "^0.4.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5",
    "zx": "^8.1.4"
  }
}


================================================
File: tokens/spl-token-minter/anchor/prepare.mjs
================================================
#!/usr/bin/env zx

import { mkdir, rm } from 'node:fs/promises';
import { join } from 'node:path';
import { $ } from 'zx';

const programs = [
  {
    id: 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
    name: 'token_metadata.so',
  },
];

const outputDir = 'tests/fixtures';
const overwrite = true;

try {
  for (const program of programs) {
    const { id, name } = program;
    const outputFile = join(outputDir, name);
    await $`solana config set -um`;

    try {
      await mkdir(outputDir, { recursive: true });
      if (overwrite) await rm(outputFile, { force: true });
      await $`solana program dump ${id} ${outputFile}`;
      console.log(`Program ${id} dumped to ${outputFile}`);
    } catch (error) {
      console.error(`Error dumping ${id}: ${error.message}`);
    }
  }
} catch (error) {
  console.error(`Error preparing programs: ${error.message}`);
}


================================================
File: tokens/spl-token-minter/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/spl-token-minter/anchor/programs/spl-token-minter/Cargo.toml
================================================
[package]
name = "spl-token-minter"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "spl_token_minter"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = { version = "0.30.0", features = ["init-if-needed"] }
anchor-spl = { version = "0.30.0", features = ["metadata"] }


================================================
File: tokens/spl-token-minter/anchor/programs/spl-token-minter/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/spl-token-minter/anchor/programs/spl-token-minter/src/lib.rs
================================================
#![allow(clippy::result_large_err)]

use anchor_lang::prelude::*;

pub mod instructions;
use instructions::*;

declare_id!("3of89Z9jwek9zrFgpCWc9jZvQvitpVMxpZNsrAD2vQUD");

#[program]
pub mod spl_token_minter {
    use super::*;

    pub fn create_token(
        ctx: Context<CreateToken>,
        token_name: String,
        token_symbol: String,
        token_uri: String,
    ) -> Result<()> {
        create::create_token(ctx, token_name, token_symbol, token_uri)
    }

    pub fn mint_token(ctx: Context<MintToken>, amount: u64) -> Result<()> {
        mint::mint_token(ctx, amount)
    }
}


================================================
File: tokens/spl-token-minter/anchor/programs/spl-token-minter/src/instructions/mod.rs
================================================
pub mod create;
pub mod mint;

pub use create::*;
pub use mint::*;


================================================
File: tokens/spl-token-minter/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml
solana program deploy ./program/target/deploy/program.so


================================================
File: tokens/spl-token-minter/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/test.ts"
  },
  "dependencies": {
    "@metaplex-foundation/mpl-token-metadata": "^2.5.2",
    "@solana/spl-token": "^0.3.7",
    "@solana/web3.js": "^1.73.0",
    "borsh": "^0.7.0",
    "buffer": "^6.0.3",
    "fs": "^0.0.1-security"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/spl-token-minter/native/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/spl-token-minter/native/program/Cargo.toml
================================================
[package]
name = "spl-token-minter-native-program"
version = "0.1.0"
edition = "2021"

[dependencies]
borsh = "0.9.3"
borsh-derive = "0.9.1"
solana-program = "1.16.10"
spl-token = { version="4.0.0", features = [ "no-entrypoint" ] }
spl-associated-token-account = { version="2.0.0", features = [ "no-entrypoint" ] }
mpl-token-metadata = { version="1.11", features = [ "no-entrypoint" ] }

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: tokens/spl-token-minter/native/program/src/lib.rs
================================================
use solana_program::{
    account_info::AccountInfo, entrypoint, entrypoint::ProgramResult, pubkey::Pubkey,
};

pub mod instructions;
pub mod processor;

entrypoint!(process_instruction);

fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    processor::process_instruction(program_id, accounts, instruction_data)
}


================================================
File: tokens/spl-token-minter/native/program/src/processor.rs
================================================
use {
    borsh::{BorshDeserialize, BorshSerialize},
    solana_program::{account_info::AccountInfo, entrypoint::ProgramResult, pubkey::Pubkey},
};

use crate::instructions::{
    create::{create_token, CreateTokenArgs},
    mint::{mint_to, MintToArgs},
};

#[derive(BorshSerialize, BorshDeserialize, Debug)]
enum SplMinterIntstruction {
    Create(CreateTokenArgs),
    Mint(MintToArgs),
}

pub fn process_instruction(
    _program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    let instruction = SplMinterIntstruction::try_from_slice(instruction_data)?;

    match instruction {
        SplMinterIntstruction::Create(args) => create_token(accounts, args),
        SplMinterIntstruction::Mint(args) => mint_to(accounts, args),
    }
}


================================================
File: tokens/spl-token-minter/native/program/src/instructions/mod.rs
================================================
pub mod create;
pub mod mint;

pub use create::*;
pub use mint::*;


================================================
File: tokens/spl-token-minter/native/tests/instructions.ts
================================================
import * as borsh from 'borsh';

class Assignable {
  constructor(properties) {
    for (const [key, value] of Object.entries(properties)) {
      this[key] = value;
    }
  }
}

export enum SplMinterInstruction {
  Create = 0,
  Mint = 1,
}

export class CreateTokenArgs extends Assignable {
  toBuffer() {
    return Buffer.from(borsh.serialize(CreateTokenArgsSchema, this));
  }
}
const CreateTokenArgsSchema = new Map([
  [
    CreateTokenArgs,
    {
      kind: 'struct',
      fields: [
        ['instruction', 'u8'],
        ['token_title', 'string'],
        ['token_symbol', 'string'],
        ['token_uri', 'string'],
      ],
    },
  ],
]);

export class MintToArgs extends Assignable {
  toBuffer() {
    return Buffer.from(borsh.serialize(MintToArgsSchema, this));
  }
}
const MintToArgsSchema = new Map([
  [
    MintToArgs,
    {
      kind: 'struct',
      fields: [
        ['instruction', 'u8'],
        ['quantity', 'u64'],
      ],
    },
  ],
]);


================================================
File: tokens/spl-token-minter/poseidon/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
spl_token_minter = "HFKNWrbYAfKsrWJu88RtUVHgVBNz1uJ6u2tNx1YCmAMZ"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: tokens/spl-token-minter/poseidon/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/spl-token-minter/poseidon/package.json
================================================
{
  "license": "ISC",
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.1",
    "@solana/spl-token": "^0.4.9"
  },
  "devDependencies": {
    "@biomejs/biome": "1.9.4",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/spl-token-minter/poseidon/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/spl-token-minter/poseidon/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/spl-token-minter/poseidon/programs/spl-token-minter/Cargo.toml
================================================
[package]
name = "spl-token-minter"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "spl_token_minter"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = "0.30.1"
anchor-spl = "0.30.1"


================================================
File: tokens/spl-token-minter/poseidon/programs/spl-token-minter/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/spl-token-minter/poseidon/ts-programs/package.json
================================================
{
  "name": "ts-programs",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@solanaturbine/poseidon": "^0.0.4"
  }
}


================================================
File: tokens/spl-token-minter/steel/README.md
================================================
# Steel

**Steel** is a ...
        
## API
- [`Consts`](api/src/consts.rs) – Program constants.
- [`Error`](api/src/error.rs) – Custom program errors.
- [`Event`](api/src/event.rs) – Custom program events.
- [`Instruction`](api/src/instruction.rs) – Declared instructions.

## Instructions
- [`Hello`](program/src/hello.rs) – Hello ...

## State
- [`User`](api/src/state/user.rs) – User ...

## Tests

To run the test suit, use the Solana toolchain:
```
cargo test-sbf         
```


================================================
File: tokens/spl-token-minter/steel/Cargo.toml
================================================
[workspace]
resolver = "2"
members = ["api", "program"]

[workspace.package]
version = "0.1.0"
edition = "2021"
license = "Apache-2.0"
homepage = ""
documentation = ""
repository = ""
readme = "./README.md"
keywords = ["solana"]

[workspace.dependencies]
spl-token-minter-api = { path = "./api", version = "0.1.0" }
bytemuck = "1.14"
num_enum = "0.7"
solana-program = "1.18"
steel = { version = "2.0", features = ["spl"] }
thiserror = "1.0"
spl-token = "^4"
mpl-token-metadata = { version = "4.1.2" }
const-crypto = "0.1.0"
spl-associated-token-account = { version = "^2.3", features = [
    "no-entrypoint",
] }


================================================
File: tokens/spl-token-minter/steel/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml
solana program deploy ./program/target/deploy/program.so


================================================
File: tokens/spl-token-minter/steel/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/bankrun.test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/spl_token_minter_program.so",
    "postinstall": "zx prepare.mjs"
  },
  "dependencies": {
    "@metaplex-foundation/mpl-token-metadata": "^2.5.2",
    "@solana/spl-token": "^0.3.7",
    "@solana/web3.js": "^1.73.0",
    "borsh": "^0.7.0",
    "buffer": "^6.0.3",
    "fs": "^0.0.1-security"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5",
    "solana-bankrun": "^0.4.0",
    "zx": "^8.1.4"
  }
}


================================================
File: tokens/spl-token-minter/steel/prepare.mjs
================================================
#!/usr/bin/env zx

import { mkdir, rm } from 'node:fs/promises';
import { join } from 'node:path';
import { $ } from 'zx';

const programs = [
  {
    id: 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
    name: 'token_metadata.so',
  },
];

const outputDir = 'tests/fixtures';
const overwrite = true;

try {
  for (const program of programs) {
    const { id, name } = program;
    const outputFile = join(outputDir, name);
    await $`solana config set -um`;

    try {
      await mkdir(outputDir, { recursive: true });
      if (overwrite) await rm(outputFile, { force: true });
      await $`solana program dump ${id} ${outputFile}`;
      console.log(`Program ${id} dumped to ${outputFile}`);
    } catch (error) {
      console.error(`Error dumping ${id}: ${error.message}`);
    }
  }
} catch (error) {
  console.error(`Error preparing programs: ${error.message}`);
}


================================================
File: tokens/spl-token-minter/steel/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/spl-token-minter/steel/.gitignore
================================================
target
test-ledger


================================================
File: tokens/spl-token-minter/steel/api/Cargo.toml
================================================
[package]
name = "spl-token-minter-api"
version = "0.1.0"
edition = "2021"

[dependencies]
bytemuck.workspace = true
num_enum.workspace = true
solana-program.workspace = true
steel.workspace = true
thiserror.workspace = true
spl-token.workspace = true
mpl-token-metadata.workspace = true
const-crypto.workspace = true
spl-associated-token-account.workspace = true


================================================
File: tokens/spl-token-minter/steel/api/src/consts.rs
================================================
/// The seed of the metadata account PDA.
pub const METADATA: &[u8] = b"metadata";


================================================
File: tokens/spl-token-minter/steel/api/src/instruction.rs
================================================
use std::str;
use steel::*;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, TryFromPrimitive)]
pub enum SteelInstruction {
    Create = 0,
    Mint = 1,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct Create {
    pub token_name: [u8; 32],
    pub token_symbol: [u8; 8],
    pub token_uri: [u8; 64],
}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct Mint {
    pub quantity: [u8; 8],
}

instruction!(SteelInstruction, Mint);
instruction!(SteelInstruction, Create);


================================================
File: tokens/spl-token-minter/steel/api/src/lib.rs
================================================
pub mod consts;
pub mod instruction;
pub mod sdk;
pub mod utils;

pub mod prelude {
    pub use crate::consts::*;
    pub use crate::instruction::*;
    pub use crate::sdk::*;
    pub use crate::utils::*;
}

use steel::*;

// TODO Set program id
declare_id!("8V26fyhrQobKbvkRCV3KvT6jZQLzviovdARfGrw8kUdG");


================================================
File: tokens/spl-token-minter/steel/api/src/utils.rs
================================================
pub fn str_to_bytes<const N: usize>(str: &str) -> [u8; N] {
    let mut str_bytes = [0u8; N];
    let copy_len = str.len().min(N);
    str_bytes[..copy_len].copy_from_slice(&str.as_bytes()[..copy_len]);
    str_bytes
}


================================================
File: tokens/spl-token-minter/steel/program/Cargo.toml
================================================
[package]
name = "spl-token-minter-program"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]

[dependencies]
spl-token-minter-api.workspace = true
solana-program.workspace = true
steel.workspace = true
spl-token.workspace = true
mpl-token-metadata.workspace = true
spl-associated-token-account.workspace = true


[dev-dependencies]
base64 = "0.21"
rand = "0.8.5"
solana-program-test = "1.18"
solana-sdk = "1.18"
tokio = { version = "1.35", features = ["full"] }


================================================
File: tokens/spl-token-minter/steel/program/src/lib.rs
================================================
mod create;
mod mint;

use create::*;
use mint::*;

use spl_token_minter_api::prelude::*;
use steel::*;

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    data: &[u8],
) -> ProgramResult {
    let (ix, data) = parse_instruction(&spl_token_minter_api::ID, program_id, data)?;

    match ix {
        SteelInstruction::Mint => process_mint(accounts, data)?,
        SteelInstruction::Create => process_create(accounts, data)?,
    }

    Ok(())
}

entrypoint!(process_instruction);


================================================
File: tokens/token-2022/basics/anchor/Anchor.toml
================================================
[features]
seeds = false
skip-lint = false
[programs.localnet]
anchor = "6qNqxkRF791FXFeQwqYQLEzAbGiqDULC5SSHVsfRoG89"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: tokens/token-2022/basics/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/token-2022/basics/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/web3.js": "^1.95.2"
  },
  "devDependencies": {
    "anchor-bankrun": "^0.4.0",
    "solana-bankrun": "^0.3.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "typescript": "^4.3.5",
    "prettier": "^2.6.2"
  }
}


================================================
File: tokens/token-2022/basics/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/basics/anchor/.gitignore
================================================

.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger


================================================
File: tokens/token-2022/basics/anchor/.prettierignore
================================================

.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/token-2022/basics/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/token-2022/basics/anchor/programs/basics/Cargo.toml
================================================
[package]
name = "token-2022-basic-anchor"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "anchor"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-spl = "0.30.0"
anchor-lang = { version = "0.30.0", features= ["init-if-needed"]}

================================================
File: tokens/token-2022/basics/anchor/programs/basics/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/token-2022/cpi-guard/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
cpi_guard = "6tU3MEowU6oxxeDZLSxEwzcEZsZrhBJsfUR6xECvShid"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: tokens/token-2022/cpi-guard/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/token-2022/cpi-guard/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/spl-token": "^0.4.6"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "anchor-bankrun": "^0.4.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-2022/cpi-guard/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/cpi-guard/anchor/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: tokens/token-2022/cpi-guard/anchor/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/token-2022/cpi-guard/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/token-2022/cpi-guard/anchor/programs/cpi-guard/Cargo.toml
================================================
[package]
name = "cpi-guard"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "cpi_guard"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = { version = "0.30.0", features = ["init-if-needed"] }
anchor-spl = "0.30.0"


================================================
File: tokens/token-2022/cpi-guard/anchor/programs/cpi-guard/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/token-2022/default-account-state/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
default_account_state = "5LdYbHiUsFxVG8bfqoeBkhBYMRmWZb3BoLuABgYW7coB"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: tokens/token-2022/default-account-state/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/token-2022/default-account-state/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/spl-token": "^0.4.6"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-2022/default-account-state/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/default-account-state/anchor/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: tokens/token-2022/default-account-state/anchor/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/token-2022/default-account-state/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/token-2022/default-account-state/anchor/programs/default-account-state/Cargo.toml
================================================
[package]
name = "default-account-state"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "default_account_state"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = "0.30.0"
anchor-spl = "0.30.0"


================================================
File: tokens/token-2022/default-account-state/anchor/programs/default-account-state/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/token-2022/default-account-state/native/README.md
================================================
## Token22 with default account state

This extension makes it possible to set a default state for all underlying Token accounts of a certain Mint.

These account states can be:

- initialized: normal token account that can perform actions like transfers
- frozen: the owner of this token account will not be able to perform any actions with his token.


================================================
File: tokens/token-2022/default-account-state/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml
solana program deploy ./program/target/deploy/program.so


================================================
File: tokens/token-2022/default-account-state/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/hello_solana_program.so"
  },
  "dependencies": {
    "@metaplex-foundation/mpl-token-metadata": "^2.5.2",
    "@solana/spl-token": "^0.3.7",
    "@solana/web3.js": "^1.73.0",
    "borsh": "^0.7.0",
    "buffer": "^6.0.3",
    "fs": "^0.0.1-security"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.4.1",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-2022/default-account-state/native/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/default-account-state/native/program/Cargo.toml
================================================
[package]
name = "token-2022-default-account-state-program"
version = "0.1.0"
edition = "2021"

[dependencies]
borsh = "0.9.3"
borsh-derive = "0.9.1"
solana-program = "1.18.17"
spl-associated-token-account = { version="2.0.0", features = [ "no-entrypoint" ] }
spl-token-2022 = {version = "0.7.0", features = [ "no-entrypoint" ] }

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: tokens/token-2022/group/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
group = "4XCDGMD8fsdjUzmYj6d9if8twFt1f23Ym52iDmWK8fFs"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: tokens/token-2022/group/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/token-2022/group/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0"
  },
  "devDependencies": {
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "typescript": "^4.3.5",
    "prettier": "^2.6.2"
  }
}


================================================
File: tokens/token-2022/group/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/group/anchor/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: tokens/token-2022/group/anchor/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/token-2022/group/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/token-2022/group/anchor/programs/group/Cargo.toml
================================================
[package]
name = "group"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "group"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = "0.30.0"
anchor-spl = "0.30.0"
spl-token-group-interface = "0.2.5"


================================================
File: tokens/token-2022/group/anchor/programs/group/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/token-2022/group/anchor/tests/group.ts
================================================
import * as anchor from '@coral-xyz/anchor';
import type { Program } from '@coral-xyz/anchor';
import type { Group } from '../target/types/group';

describe('group', () => {
  // Configure the client to use the local cluster.
  const provider = anchor.AnchorProvider.env();
  const connection = provider.connection;
  const wallet = provider.wallet as anchor.Wallet;
  anchor.setProvider(provider);

  const program = anchor.workspace.Group as Program<Group>;

  it('Create Mint with Group Pointer', async () => {
    const transactionSignature = await program.methods.testInitializeGroup().accounts({}).rpc({ skipPreflight: true });
    console.log('Your transaction signature', transactionSignature);
  });
});


================================================
File: tokens/token-2022/immutable-owner/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
immutable_owner = "6g5URpqqurW8RbKjuGeRCVZBKky3J4kYcLeotQ6vj6UT"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: tokens/token-2022/immutable-owner/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/token-2022/immutable-owner/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/spl-token": "^0.4.6"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-2022/immutable-owner/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/immutable-owner/anchor/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: tokens/token-2022/immutable-owner/anchor/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/token-2022/immutable-owner/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/token-2022/immutable-owner/anchor/programs/immutable-owner/Cargo.toml
================================================
[package]
name = "immutable-owner"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "immutable_owner"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = "0.30.0"
anchor-spl = "0.30.0"



================================================
File: tokens/token-2022/immutable-owner/anchor/programs/immutable-owner/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/token-2022/interest-bearing/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
interest_bearing = "DMQdkzRJz8uQSN8Kx2QYmQJn6xLKhsu3LcPYxs314MgC"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: tokens/token-2022/interest-bearing/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/token-2022/interest-bearing/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/spl-token": "^0.4.6"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-2022/interest-bearing/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/interest-bearing/anchor/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: tokens/token-2022/interest-bearing/anchor/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/token-2022/interest-bearing/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/token-2022/interest-bearing/anchor/programs/interest-bearing/Cargo.toml
================================================
[package]
name = "interest-bearing"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "interest_bearing"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = "0.30.0"
anchor-spl = "0.30.0"


================================================
File: tokens/token-2022/interest-bearing/anchor/programs/interest-bearing/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/token-2022/memo-transfer/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
memo_transfer = "5BQyC7y2Pc283woThq11uZRqsgcRbBRLKz4yQ8BJadi2"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: tokens/token-2022/memo-transfer/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/token-2022/memo-transfer/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/spl-memo": "^0.2.5",
    "@solana/spl-token": "^0.4.6"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-2022/memo-transfer/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/memo-transfer/anchor/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: tokens/token-2022/memo-transfer/anchor/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/token-2022/memo-transfer/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/token-2022/memo-transfer/anchor/programs/memo-transfer/Cargo.toml
================================================
[package]
name = "memo-transfer"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "memo_transfer"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = "0.30.0"
anchor-spl = "0.30.0"


================================================
File: tokens/token-2022/memo-transfer/anchor/programs/memo-transfer/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/token-2022/metadata/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
metadata = "BJHEDXSQfD9kBFvhw8ZCGmPFRihzvbMoxoHUKpXdpn4D"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: tokens/token-2022/metadata/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/token-2022/metadata/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/spl-token-metadata": "^0.1.4"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-2022/metadata/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/metadata/anchor/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: tokens/token-2022/metadata/anchor/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/token-2022/metadata/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/token-2022/metadata/anchor/programs/metadata/Cargo.toml
================================================
[package]
name = "metadata"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "metadata"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = "0.30.0"
anchor-spl = "0.30.0"
spl-token-metadata-interface = "0.3.3"
spl-type-length-value = "0.4.3"



================================================
File: tokens/token-2022/metadata/anchor/programs/metadata/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/token-2022/metadata/anchor/programs/metadata/src/lib.rs
================================================
use anchor_lang::prelude::*;

use instructions::*;
mod instructions;

declare_id!("BJHEDXSQfD9kBFvhw8ZCGmPFRihzvbMoxoHUKpXdpn4D");

#[program]
pub mod metadata {
    use super::*;

    pub fn initialize(ctx: Context<Initialize>, args: TokenMetadataArgs) -> Result<()> {
        process_initialize(ctx, args)
    }

    pub fn update_field(ctx: Context<UpdateField>, args: UpdateFieldArgs) -> Result<()> {
        process_update_field(ctx, args)
    }

    pub fn remove_key(ctx: Context<RemoveKey>, key: String) -> Result<()> {
        process_remove_key(ctx, key)
    }

    pub fn emit(ctx: Context<Emit>) -> Result<()> {
        process_emit(ctx)
    }

    pub fn update_authority(ctx: Context<UpdateAuthority>) -> Result<()> {
        process_update_authority(ctx)
    }
}


================================================
File: tokens/token-2022/metadata/anchor/programs/metadata/src/instructions/emit.rs
================================================
use anchor_lang::prelude::*;
use anchor_lang::solana_program::program::invoke;
use anchor_spl::token_interface::{Mint, Token2022};
use spl_token_metadata_interface::instruction::emit;

#[derive(Accounts)]
pub struct Emit<'info> {
    pub mint_account: InterfaceAccount<'info, Mint>,
    pub token_program: Program<'info, Token2022>,
}

// Invoke the emit instruction from spl_token_metadata_interface directly
// There is not an anchor CpiContext for this instruction
pub fn process_emit(ctx: Context<Emit>) -> Result<()> {
    invoke(
        &emit(
            &ctx.accounts.token_program.key(), // token program id
            &ctx.accounts.mint_account.key(),  // "metadata" account
            None,
            None,
        ),
        &[
            ctx.accounts.token_program.to_account_info(),
            ctx.accounts.mint_account.to_account_info(),
        ],
    )?;
    Ok(())
}


================================================
File: tokens/token-2022/metadata/anchor/programs/metadata/src/instructions/mod.rs
================================================
pub use initialize::*;
pub mod initialize;
pub use update_field::*;
pub mod update_field;
pub use remove_key::*;
pub mod remove_key;
pub use emit::*;
pub mod emit;
pub use update_authority::*;
pub mod update_authority;


================================================
File: tokens/token-2022/mint-close-authority/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
mint_close_authority = "AcfQLsYKuzprcCNH1n96pKKgAbAnZchwpbr3gbVN742n"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: tokens/token-2022/mint-close-authority/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/token-2022/mint-close-authority/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/spl-token": "^0.4.6"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-2022/mint-close-authority/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/mint-close-authority/anchor/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: tokens/token-2022/mint-close-authority/anchor/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/token-2022/mint-close-authority/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/token-2022/mint-close-authority/anchor/programs/mint-close-authority/Cargo.toml
================================================
[package]
name = "mint-close-authority"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "mint_close_authority"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = "0.30.0"
anchor-spl = "0.30.0"


================================================
File: tokens/token-2022/mint-close-authority/anchor/programs/mint-close-authority/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/token-2022/mint-close-authority/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml
solana program deploy ./program/target/deploy/program.so


================================================
File: tokens/token-2022/mint-close-authority/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/program.so"
  },
  "dependencies": {
    "@metaplex-foundation/mpl-token-metadata": "^2.5.2",
    "@solana/spl-token": "^0.3.7",
    "@solana/web3.js": "^1.73.0",
    "borsh": "^0.7.0",
    "buffer": "^6.0.3",
    "fs": "^0.0.1-security"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.4.1",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-2022/mint-close-authority/native/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/mint-close-authority/native/program/Cargo.toml
================================================
[package]
name = "token-2022-mint-close-authority-program"
version = "0.1.0"
edition = "2021"

[dependencies]
borsh = "0.9.3"
borsh-derive = "0.9.1"
solana-program = "1.16.10"
spl-associated-token-account = { version="2.0.0", features = [ "no-entrypoint" ] }
spl-token-2022 = {version = "0.7.0", features = [ "no-entrypoint" ] }

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: tokens/token-2022/multiple-extensions/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml
solana program deploy ./program/target/deploy/program.so


================================================
File: tokens/token-2022/multiple-extensions/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/hello_solana_program.so"
  },
  "dependencies": {
    "@metaplex-foundation/mpl-token-metadata": "^2.5.2",
    "@solana/spl-token": "^0.3.7",
    "@solana/web3.js": "^1.73.0",
    "borsh": "^0.7.0",
    "buffer": "^6.0.3",
    "fs": "^0.0.1-security"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.4.1",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-2022/multiple-extensions/native/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/multiple-extensions/native/program/Cargo.toml
================================================
[package]
name = "token-2022-multiple-extensions-program"
version = "0.1.0"
edition = "2021"

[dependencies]
borsh = "0.9.3"
borsh-derive = "0.9.1"
solana-program = "1.18.17"
spl-associated-token-account = { version="2.0.0", features = [ "no-entrypoint" ] }
spl-token-2022 = {version = "0.7.0", features = [ "no-entrypoint" ] }

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/nx.json
================================================
{
  "$schema": "./node_modules/nx/schemas/nx-schema.json",
  "tasksRunnerOptions": {
    "default": {
      "runner": "nx/tasks-runners/default",
      "options": {
        "cacheableOperations": ["build", "lint", "test", "e2e"]
      }
    }
  },
  "targetDefaults": {
    "build": {
      "dependsOn": ["^build"],
      "inputs": ["production", "^production"]
    }
  },
  "namedInputs": {
    "default": ["{projectRoot}/**/*", "sharedGlobals"],
    "production": ["default"],
    "sharedGlobals": []
  }
}


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/package.json
================================================
{
  "name": "@extension-nft/source",
  "version": "0.0.0",
  "license": "MIT",
  "scripts": {},
  "private": true,
  "dependencies": {
    "@create-solana-game/preset-lumberjack": "1.0.5"
  },
  "devDependencies": {
    "@nx/workspace": "16.10.0",
    "nx": "16.10.0"
  }
}


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/anchor/README.md
================================================
# Anchor Solana Program

```shell
anchor build
anchor deploy
```

Copy the **program ID** from the output logs; paste it in `Anchor.toml` & `lib.rs`.

```shell
anchor build
anchor deploy

yarn install
yarn add ts-mocha

anchor run test
```

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/anchor/Anchor.toml
================================================
[features]
seeds = false
[programs.localnet]
extension_nft = "9aZZ7TJ2fQZxY8hMtWXywp5y6BgqC4N2BPcr9FDT47sW"

[registry]
url = "https://anchor.projectserum.com"

[provider]
cluster = "localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@coral-xyz/spl-token": "0.30.0",
    "@solana/spl-token": "^0.4.0"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "browserify-sign": ">=4.2.2",
    "chai": "^4.3.4",
    "crypto-js": ">=4.2.0",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/anchor/rustfmt.toml
================================================
comment_width = 80
edition = "2021"
format_code_in_doc_comments = true
format_strings = true
group_imports = "One"
ignore = [
  "**/*/entrypoint.rs"
]
imports_granularity = "One"
use_field_init_shorthand = true
wrap_comments = true

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/anchor/.gitignore
================================================

.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/anchor/.prettierignore
================================================

.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@project-serum/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/anchor/programs/extension_nft/Cargo.toml
================================================
[package]
name = "extension_nft"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "extension_nft"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = { version = "0.30.0", features = ["init-if-needed"] }
anchor-spl = { version = "0.30.0" }
session-keys = { version = "2.0.3", features = ["no-entrypoint"] }
solana-program = "1.18.17"
spl-token-2022 = { version="=3.0.4", features = [ "no-entrypoint" ] }
spl-token = { version = "4.0.1", features = [ "no-entrypoint" ] }
spl-token-metadata-interface = { version = "=0.3.5"}


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/anchor/programs/extension_nft/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/anchor/programs/extension_nft/src/constants.rs
================================================
pub const TIME_TO_REFILL_ENERGY: i64 = 60;
pub const MAX_ENERGY: u64 = 100;
pub const MAX_WOOD_PER_TREE: u64 = 100000;


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/anchor/programs/extension_nft/src/errors.rs
================================================
use anchor_lang::error_code;

#[error_code]
pub enum GameErrorCode {
    #[msg("Not enough energy")]
    NotEnoughEnergy,
    #[msg("Wrong Authority")]
    WrongAuthority,
}

#[error_code]
pub enum ProgramErrorCode {
    #[msg("Invalid Mint account space")]
    InvalidMintAccountSpace,
    #[msg("Cant initialize metadata_pointer")]
    CantInitializeMetadataPointer,
}


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/anchor/programs/extension_nft/src/instructions/mod.rs
================================================
//! All instructions
pub mod chop_tree;
pub mod init_player;
pub mod mint_nft;

pub use chop_tree::*;
pub use init_player::*;
pub use mint_nft::*;


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/anchor/programs/extension_nft/src/state/game_data.rs
================================================
use anchor_lang::prelude::*;

use crate::constants::MAX_WOOD_PER_TREE;

#[account]
pub struct GameData {
    pub total_wood_collected: u64,
}

impl GameData {
    pub fn on_tree_chopped(&mut self, amount_chopped: u64) -> Result<()> {
        match self.total_wood_collected.checked_add(amount_chopped) {
            Some(v) => {
                if self.total_wood_collected >= MAX_WOOD_PER_TREE {
                    self.total_wood_collected = 0;
                    msg!("Tree successfully chopped. New Tree coming up.");
                } else {
                    self.total_wood_collected = v;
                    msg!("Total wood chopped: {}", v);
                }
            }
            None => {
                msg!("The ever tree is completly chopped!");
            }
        };

        Ok(())
    }
}


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/anchor/programs/extension_nft/src/state/mod.rs
================================================
pub mod game_data;
pub mod player_data;


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/app/next.config.js
================================================
// Notice that currently nft images from all domains can be fetched.
// This is not recommended for production use since there could be some security issues.

/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: '**',
      },
    ],
  },
};

module.exports = nextConfig;


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/app/tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/app/.eslintrc.json
================================================
{
  "extends": "next/core-web-vitals"
}


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/app/.gitignore
================================================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/app/components/WalletMultiButton.tsx
================================================
import dynamic from "next/dynamic"

export const WalletMultiButtonDynamic = dynamic(
  async () =>
    (await import("@solana/wallet-adapter-react-ui")).WalletMultiButton,
  { ssr: false }
)

const WalletMultiButton = () => {
  return <WalletMultiButtonDynamic />
}

export default WalletMultiButton


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/app/contexts/SessionProvider.tsx
================================================
import { SessionWalletProvider, useSessionKeyManager } from "@magicblock-labs/gum-react-sdk"

import {
  AnchorWallet,
  useAnchorWallet,
  useConnection,
} from "@solana/wallet-adapter-react"

interface SessionProviderProps {
  children: React.ReactNode
}

const SessionProvider: React.FC<SessionProviderProps> = ({ children }) => {
  const { connection } = useConnection()
  const anchorWallet = useAnchorWallet() as AnchorWallet
  const cluster = "devnet" // or "mainnet-beta", "testnet", "localnet"
  const sessionWallet = useSessionKeyManager(anchorWallet, connection, cluster)

  return (
    <SessionWalletProvider sessionWallet={sessionWallet}>
      {children}
    </SessionWalletProvider>
  )
}

export default SessionProvider


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/app/pages/_app.tsx
================================================
import { ChakraProvider } from "@chakra-ui/react"
import WalletContextProvider from "../contexts/WalletContextProvider"
import SessionProvider from "@/contexts/SessionProvider"
import { GameStateProvider } from "@/contexts/GameStateProvider"
import type { AppProps } from "next/app"
import { NftProvider } from "@/contexts/NftProvider"

export default function App({ Component, pageProps }: AppProps) {
  return (
    <ChakraProvider>
      <WalletContextProvider>
        <SessionProvider>
        <GameStateProvider>
          <NftProvider>
            <Component {...pageProps} />
          </NftProvider>
          </GameStateProvider>
        </SessionProvider>
      </WalletContextProvider>
    </ChakraProvider>
  )
}


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/app/pages/_document.tsx
================================================
import { Html, Head, Main, NextScript } from 'next/document'

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  )
}


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/app/pages/api/hello.ts
================================================
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from 'next';

type Data = {
  name: string;
};

export default function handler(req: NextApiRequest, res: NextApiResponse<Data>) {
  res.status(200).json({ name: 'John Doe' });
}


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/.gitattributes
================================================
# Auto detect text files and perform LF normalization
* text=auto

# Custom for Visual Studio
*.cs     diff=csharp

# Standard to msysgit
*.doc	 diff=astextplain
*.DOC	 diff=astextplain
*.docx diff=astextplain
*.DOCX diff=astextplain
*.dot  diff=astextplain
*.DOT  diff=astextplain
*.pdf  diff=astextplain
*.PDF	 diff=astextplain
*.rtf	 diff=astextplain
*.RTF	 diff=astextplain


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/.gitignore
================================================
# =============== #
# Unity generated #
# =============== #
Temp/
Library/
Build/ 
Recordings/ 
Logs/ 
MemoryCaptures/ 

# ===================================== #
# Visual Studio / MonoDevelop generated #
# ===================================== #
ExportedObj/
obj/
*.svd
*.userprefs
/*.csproj
*.pidb
*.suo
/*.sln
*.user
*.unityproj
*.booproj
*.pidb

# ===================================== #
# Rider								    #
# ===================================== #
.idea
.idea/*
*/.idea/workspace.xml 
*/.idea/tasks.xml

# ============ #
# OS generated #
# ============ #
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/DOTween 4.meta
================================================
fileFormatVersion: 2
guid: 1d07dfe7707a9469ba355c3d70d4b00f
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Frictionless.meta
================================================
fileFormatVersion: 2
guid: 9369e30eb0024478ead305522ef92dd9
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game.meta
================================================
fileFormatVersion: 2
guid: 599f1b4793f214d0f99af0f39beca48d
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Resources.meta
================================================
fileFormatVersion: 2
guid: dfef68aa94fa04d55b99366013c49ebf
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Socket.meta
================================================
fileFormatVersion: 2
guid: 8e9d67e1994fd4b60b2a2284cc19546b
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro.meta
================================================
fileFormatVersion: 2
guid: f54d1bd14bd3ca042bd867b519fee8cc
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/WebGLTemplates.meta
================================================
fileFormatVersion: 2
guid: c9c1615f1297d4c088f3d66c6b38fc04
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/DOTween 4/DOTween.XML.meta
================================================
fileFormatVersion: 2
guid: c8ce8aa38adb94ee48306d5f482626ad
TextScriptImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/DOTween 4/DOTween.dll.mdb.meta
================================================
fileFormatVersion: 2
guid: 762728b7259db484da790c5f410eb1df
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/DOTween 4/DOTween.dll.meta
================================================
fileFormatVersion: 2
guid: 8e4ed579406784a1b9a3caf71d435429
PluginImporter:
  externalObjects: {}
  serializedVersion: 2
  iconMap: {}
  executionOrder: {}
  defineConstraints: []
  isPreloaded: 0
  isOverridable: 0
  isExplicitlyReferenced: 0
  validateReferences: 1
  platformData:
  - first:
      Any: 
    second:
      enabled: 1
      settings: {}
  - first:
      Editor: Editor
    second:
      enabled: 0
      settings:
        DefaultValueInitialized: true
  - first:
      Windows Store Apps: WindowsStoreApps
    second:
      enabled: 0
      settings:
        CPU: AnyCPU
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/DOTween 4/Editor.meta
================================================
fileFormatVersion: 2
guid: 4e7a700930cc54bd5b2469673452a303
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/DOTween 4/Modules.meta
================================================
fileFormatVersion: 2
guid: 42529fddaacb0408b94ad71511eada46
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/DOTween 4/readme.txt.meta
================================================
fileFormatVersion: 2
guid: 18cca3409bde0414f88aba683061b318
TextScriptImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/DOTween 4/Editor/DOTweenEditor.XML.meta
================================================
fileFormatVersion: 2
guid: cb3507fbdf5994c7fb58915cb59783be
TextScriptImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/DOTween 4/Editor/DOTweenEditor.dll.mdb.meta
================================================
fileFormatVersion: 2
guid: 4b76d2c677cc849c0a491fd3c23a1046
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/DOTween 4/Editor/DOTweenEditor.dll.meta
================================================
fileFormatVersion: 2
guid: fbddd467a34fa4015803d41e8359a675
PluginImporter:
  externalObjects: {}
  serializedVersion: 2
  iconMap: {}
  executionOrder: {}
  defineConstraints: []
  isPreloaded: 0
  isOverridable: 0
  isExplicitlyReferenced: 0
  validateReferences: 1
  platformData:
  - first:
      Any: 
    second:
      enabled: 0
      settings: {}
  - first:
      Editor: Editor
    second:
      enabled: 1
      settings:
        DefaultValueInitialized: true
  - first:
      Windows Store Apps: WindowsStoreApps
    second:
      enabled: 0
      settings:
        CPU: AnyCPU
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/DOTween 4/Editor/Imgs.meta
================================================
fileFormatVersion: 2
guid: 526ad6f0f8ce44ed18332cc9cfe9b7bc
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/DOTween 4/Modules/DOTweenModuleAudio.cs.meta
================================================
fileFormatVersion: 2
guid: 290f3a1ae0f3547e08fdb644c848de46
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/DOTween 4/Modules/DOTweenModuleEPOOutline.cs.meta
================================================
fileFormatVersion: 2
guid: 77a2e65e896d040078d5fee7769723b4
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/DOTween 4/Modules/DOTweenModulePhysics.cs.meta
================================================
fileFormatVersion: 2
guid: c2848035b7e414e3da152cff59c732ed
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/DOTween 4/Modules/DOTweenModulePhysics2D.cs.meta
================================================
fileFormatVersion: 2
guid: 92e5ae089108a4200ac5b7be45373a2a
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/DOTween 4/Modules/DOTweenModuleSprite.cs.meta
================================================
fileFormatVersion: 2
guid: 7a04c73fc4f114d4d841366631994e4d
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/DOTween 4/Modules/DOTweenModuleUI.cs.meta
================================================
fileFormatVersion: 2
guid: f28fe18d6dd2849eb88677d3feb42b82
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/DOTween 4/Modules/DOTweenModuleUnityVersion.cs.meta
================================================
fileFormatVersion: 2
guid: c4371754ea9f94253ad5e15bc2bfa3ca
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/DOTween 4/Modules/DOTweenModuleUtils.cs.meta
================================================
fileFormatVersion: 2
guid: 807108aab29cd416f9c795b5d6b0c7d8
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Frictionless/IMultiSceneSingleton.cs
================================================
﻿using UnityEngine;
using System.Collections;

namespace Frictionless
{
	public interface IMultiSceneSingleton
	{
		IEnumerator HandleNewSceneLoaded();
	}
}


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Frictionless/IMultiSceneSingleton.cs.meta
================================================
fileFormatVersion: 2
guid: 1d2f4c7ea75a04e92bba6af04e531e1b
timeCreated: 1443497683
licenseType: Pro
MonoImporter:
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Frictionless/IReinitializingMultiSceneSingleton.cs
================================================
namespace Frictionless
{
    public interface IReinitializingMultiSceneSingleton : IMultiSceneSingleton
    {
        void ReinitializeAfterSceneLoad();
    }
}

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Frictionless/IReinitializingMultiSceneSingleton.cs.meta
================================================
fileFormatVersion: 2
guid: 43cd7455839c4ab29da9bf4b7c9a9b70
timeCreated: 1666809291

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Frictionless/MessageRouter.cs.meta
================================================
fileFormatVersion: 2
guid: 6250354fb5cd34a109e4178105ec99fe
MonoImporter:
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Frictionless/ServiceFactory.cs.meta
================================================
fileFormatVersion: 2
guid: 7bf2a384e7c804c1a9d78a115ed85e68
MonoImporter:
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Materials.meta
================================================
fileFormatVersion: 2
guid: 69553b14fc52945af9f31330f2e6af0c
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Prefabs.meta
================================================
fileFormatVersion: 2
guid: fd52b736b39ad4861aa536ae40e88fce
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scenes.meta
================================================
fileFormatVersion: 2
guid: 6ea315d0fd7389c41b19996891e99ae3
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts.meta
================================================
fileFormatVersion: 2
guid: a25bb613c4806473ea27f737b0f871c6
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Sprites.meta
================================================
fileFormatVersion: 2
guid: 797beab25ada04bd7bcf99b2b2cff7a5
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Materials/WoodParticles.mat.meta
================================================
fileFormatVersion: 2
guid: b3ff4f59082c147e7a8d2bc55f345f25
NativeFormatImporter:
  externalObjects: {}
  mainObjectFileID: 2100000
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Prefabs/DefaultButton.prefab.meta
================================================
fileFormatVersion: 2
guid: c27ebc42ed62d4f528778183ed634846
PrefabImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Prefabs/InteractionBlocker.prefab.meta
================================================
fileFormatVersion: 2
guid: ba000cab565a44c178af503c10992f7e
PrefabImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Prefabs/NftItemView.prefab.meta
================================================
fileFormatVersion: 2
guid: 5038eeda347fc47caa6a0b71b70ee381
PrefabImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Prefabs/NftListPopup.prefab.meta
================================================
fileFormatVersion: 2
guid: a8a0086df8f89450eacfeeb2e744ab73
PrefabImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Prefabs/SessionPopup.prefab.meta
================================================
fileFormatVersion: 2
guid: 23ef3ee2e766b4691a392f01d949e157
PrefabImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Prefabs/SolBalanceWidget.prefab.meta
================================================
fileFormatVersion: 2
guid: 932385457eb6e48999e46c08f0039d6c
PrefabImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Prefabs/TokenBalanceWidget.prefab.meta
================================================
fileFormatVersion: 2
guid: 9983340f07aa240e7adad9f74350fcf4
PrefabImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Prefabs/WoodParticles.prefab.meta
================================================
fileFormatVersion: 2
guid: f2e6a0e3392df424da6890df0b132ae0
PrefabImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scenes/GameScene.unity.meta
================================================
fileFormatVersion: 2
guid: a3de581c39b3447939f31966c9c9d8fb
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scenes/LoginScene.unity.meta
================================================
fileFormatVersion: 2
guid: 325f7fb08642c46a6a1d7f860111bd4b
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/SimpleRotate.cs
================================================
﻿using UnityEngine;

namespace Game.Scripts
{
    public class SimpleRotate : MonoBehaviour
    {
        public enum Axis
        {
            x,
            y,
            z
        }

        public float speed = 0.1f;
        public Axis RotationAxis = Axis.x;

        void Update()
        {
            var rotationAxis = Vector3.zero;
            switch (RotationAxis)
            {
                case Axis.x:
                    rotationAxis = Vector3.forward;
                    break;
                case Axis.y:
                    rotationAxis = Vector3.up;
                    break;
                case Axis.z:
                    rotationAxis = Vector3.right;
                    break;
            }

            transform.Rotate(rotationAxis * Time.deltaTime, speed);
        }
    }
}

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/SimpleRotate.cs.meta
================================================
fileFormatVersion: 2
guid: 00d0d495a78b84f76a46e0b54b02d6d9
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Solana.meta
================================================
fileFormatVersion: 2
guid: 7a40491382f34e8bb89c6718bd4d6e08
timeCreated: 1698345178

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Ui.meta
================================================
fileFormatVersion: 2
guid: fb407fc6c55ac42b09ad75277f074d7e
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Solana/AnchorService.cs.meta
================================================
fileFormatVersion: 2
guid: e361c4e484a844369b54c5fd3b90def7
timeCreated: 1688224689

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Solana/ExtensionNft.cs.meta
================================================
fileFormatVersion: 2
guid: 69fdfaf02ce7e4bbd9e468d88775e2c7
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Solana/NftMintingService.cs.meta
================================================
fileFormatVersion: 2
guid: 7200cbf09ed7438eb4005bbcf351e7f7
timeCreated: 1665216069

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Solana/NftService.cs.meta
================================================
fileFormatVersion: 2
guid: 99c40baead10843899efb994349f11cd
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Solana/SolanaUtils.cs
================================================
using System;

namespace Game.Scripts
{
    public class SolanaUtils
    {
        public const long SolToLamports = 1000000000;
    }

    public static class ArrayUtils
    {
        public static T[] Slice<T>(this T[] arr, uint indexFrom, uint indexTo) {
            if (indexFrom > indexTo) {
                throw new ArgumentOutOfRangeException("indexFrom is bigger than indexTo!");
            }

            uint length = indexTo - indexFrom;
            T[] result = new T[length];
            Array.Copy(arr, indexFrom, result, 0, length);

            return result;
        }
    }
    
}

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Solana/SolanaUtils.cs.meta
================================================
fileFormatVersion: 2
guid: d6fd84b061c1a48119369888e1fb5e09
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Ui/BasePopup.cs
================================================
using Services;
using UnityEngine;
using UnityEngine.UI;

namespace Game.Scripts.Ui
{
    public class BasePopup : MonoBehaviour
    {
        public GameObject Root;
        public Button CloseButton;

        protected void Awake()
        {
            Root.gameObject.SetActive(false);
        }

        public virtual void Open(UiService.UiData uiData)
        {
            if (CloseButton != null)
            {
                CloseButton.onClick.RemoveAllListeners();
                CloseButton.onClick.AddListener(OnCloseButtonClicked);
            }

            Root.gameObject.SetActive(true);
        }

        public virtual void Close()
        {
            Root.gameObject.SetActive(false);
        }

        protected void OnCloseButtonClicked()
        {
            Close();
        }
    }
}

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Ui/BasePopup.cs.meta
================================================
fileFormatVersion: 2
guid: b54549bd3faf4cb399338343fb9093d2
timeCreated: 1664440654

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Ui/GameScreen.cs.meta
================================================
fileFormatVersion: 2
guid: d1ce5defdf314eb0b303658fa3c1f425
timeCreated: 1697791834

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Ui/InteractionBlocker.cs
================================================
using TMPro;
using UnityEngine;

public class InteractionBlocker : MonoBehaviour
{
    public GameObject BlockingSpinner;
    public GameObject NonBlocking;
    public TextMeshProUGUI CurrentTransactionsInProgress;
    public TextMeshProUGUI LastTransactionTimeText;
    public TextMeshProUGUI LastError;
    
    void Update()
    {
        if (AnchorService.Instance == null)
        {
            return;
        }
        BlockingSpinner.gameObject.SetActive(AnchorService.Instance.IsAnyBlockingTransactionInProgress);
        NonBlocking.gameObject.SetActive(AnchorService.Instance.IsAnyNonBlockingTransactionInProgress);
        CurrentTransactionsInProgress.text = (AnchorService.Instance.BlockingTransactionsInProgress +
                                             AnchorService.Instance.NonBlockingTransactionsInProgress).ToString();
        LastTransactionTimeText.text = $"Last took: {AnchorService.Instance.LastTransactionTimeInMs}ms";
        LastError.text = AnchorService.Instance.LastError;
    }
}


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Ui/InteractionBlocker.cs.meta
================================================
fileFormatVersion: 2
guid: 37ee3c81a97bf498fb479499e5c21f97
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Ui/LoginScreen.cs.meta
================================================
fileFormatVersion: 2
guid: d5c4b524c3ae4c5fb001afc6bfe2162a
timeCreated: 1697791735

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Ui/NftContextMenu.cs.meta
================================================
fileFormatVersion: 2
guid: fa2ed95613a844f5f9f1aa710c9be3ad
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Ui/NftItemListView.cs.meta
================================================
fileFormatVersion: 2
guid: d0e266ef90f54494bbd77ded7a8f4201
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Ui/NftItemView.cs.meta
================================================
fileFormatVersion: 2
guid: 4c804afde22164dbf8f244573e9ac776
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Ui/NftListPopup.cs.meta
================================================
fileFormatVersion: 2
guid: bda8f1b024824e39a4b5ee376ae1b15b
timeCreated: 1670795422

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Ui/NftListPopupUiData.cs
================================================
using Solana.Unity.SDK;
using Services;

public class NftListPopupUiData : UiService.UiData
{
    public bool RequestNfts;
    public WalletBase Wallet;

    public NftListPopupUiData(bool requestNfts, WalletBase wallet)
    {
        RequestNfts = requestNfts;
        Wallet = wallet;
    }
}


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Ui/NftListPopupUiData.cs.meta
================================================
fileFormatVersion: 2
guid: 73f7cfe92c3e4891a7c7009b03f84c06
timeCreated: 1670851110

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Ui/SafeArea.cs.meta
================================================
fileFormatVersion: 2
guid: db21dccead92d48f9a566e9132089246
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Ui/SelectedNft.cs.meta
================================================
fileFormatVersion: 2
guid: c2741eec8497b40ad885aeebd3b801fb
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Ui/SessionPopup.cs.meta
================================================
fileFormatVersion: 2
guid: f3dfa67021514fd193a091840c7350ed
timeCreated: 1695813950

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Ui/SessionPopupUiData.cs
================================================
using Services;

namespace Game.Scripts.Ui
{
    public class SessionPopupUiData : UiService.UiData
    {
        public SessionPopupUiData()
        {
            
        }
    }
}

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Ui/SessionPopupUiData.cs.meta
================================================
fileFormatVersion: 2
guid: 5ecaf561bcf347a4860e3c650cee1ff9
timeCreated: 1695813981

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Ui/SolBalanceWidget.cs.meta
================================================
fileFormatVersion: 2
guid: bae9859e31324a0eb501c37ee3ff3e82
timeCreated: 1660074869

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Ui/TokenPanel.cs.meta
================================================
fileFormatVersion: 2
guid: b3585658f03574e5a97ec9242044a592
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Game/Scripts/Ui/UiService.cs.meta
================================================
fileFormatVersion: 2
guid: 97c3b89c03d0642b4ba9d5d17d794ee1
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Resources/DOTweenSettings.asset.meta
================================================
fileFormatVersion: 2
guid: 8eb37312196a64192a02cd17b1aee004
NativeFormatImporter:
  externalObjects: {}
  mainObjectFileID: 11400000
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Resources/SolanaUnitySDK.meta
================================================
fileFormatVersion: 2
guid: 4a7b2018811e54518890d7eb3e125dd7
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Resources/SolanaUnitySDK/WalletAdapterButton.prefab.meta
================================================
fileFormatVersion: 2
guid: f6f9ab42f789a4ec4baa484a9f1d0f97
PrefabImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Resources/SolanaUnitySDK/WalletAdapterUI.prefab.meta
================================================
fileFormatVersion: 2
guid: 256e92be2288f4b68b207a43c304ee22
PrefabImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Resources/SolanaUnitySDK/[WalletController].prefab.meta
================================================
fileFormatVersion: 2
guid: a921888ae20a64ee9b9d9164b77cad74
PrefabImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Socket/SocketStatusWidget.cs
================================================
#pragma warning disable CS0436
using Solana.Unity.SDK;
using TMPro;
using UnityEngine;
using UnityEngine.UI;
using WebSocketState = System.Net.WebSockets.WebSocketState;

public class SocketStatusWidget : MonoBehaviour
{
    public TextMeshProUGUI StatusText;
    public Button ReconnectButton;

    private void Awake()
    {
        ReconnectButton.onClick.AddListener(OnReconnectClicked);
    }

    private void OnReconnectClicked()
    {
        // Should automatically reconnect
    }

    void Update()
    {
        if (Web3.WsRpc != null)
        {
            StatusText.text = "Socket: " + Web3.WsRpc.State;
            ReconnectButton.gameObject.SetActive(Web3.WsRpc.State == WebSocketState.Closed);
        }
    }
}

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/Socket/SocketStatusWidget.cs.meta
================================================
fileFormatVersion: 2
guid: dbce47be4af1b404ab5d53d64d83a012
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Documentation.meta
================================================
fileFormatVersion: 2
guid: 8e7e8f5a82a3a134e91c54efd2274ea9
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Fonts.meta
================================================
fileFormatVersion: 2
guid: 6ab70aee4d56447429c680537fbf93ed
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Resources.meta
================================================
fileFormatVersion: 2
guid: 243e06394e614e5d99fab26083b707fa
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Shaders.meta
================================================
fileFormatVersion: 2
guid: e9f693669af91aa45ad615fc681ed29f
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Sprites.meta
================================================
fileFormatVersion: 2
guid: d0603b6d5186471b96c778c3949c7ce2
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Documentation/TextMesh Pro User Guide 2016.pdf.meta
================================================
fileFormatVersion: 2
guid: 1b8d251f9af63b746bf2f7ffe00ebb9b
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Fonts/LiberationSans - OFL.txt.meta
================================================
fileFormatVersion: 2
guid: 6e59c59b81ab47f9b6ec5781fa725d2c
timeCreated: 1484171296
licenseType: Pro
TextScriptImporter:
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Fonts/LiberationSans.ttf.meta
================================================
fileFormatVersion: 2
guid: e3265ab4bf004d28a9537516768c1c75
timeCreated: 1484171297
licenseType: Pro
TrueTypeFontImporter:
  serializedVersion: 2
  fontSize: 16
  forceTextureCase: -2
  characterSpacing: 1
  characterPadding: 0
  includeFontData: 1
  use2xBehaviour: 0
  fontNames: []
  fallbackFontReferences: []
  customCharacters: 
  fontRenderingMode: 0
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Resources/Fonts & Materials.meta
================================================
fileFormatVersion: 2
guid: 731f1baa9d144a9897cb1d341c2092b8
folderAsset: yes
timeCreated: 1442040525
licenseType: Pro
DefaultImporter:
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Resources/LineBreaking Following Characters.txt
================================================
﻿)]｝〕〉》」』】〙〗〟’”｠»ヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻‐゠–〜?!‼⁇⁈⁉・、%,.:;。！？］）：；＝}¢°"†‡℃〆％，．

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Resources/LineBreaking Following Characters.txt.meta
================================================
fileFormatVersion: 2
guid: fade42e8bc714b018fac513c043d323b
timeCreated: 1425440388
licenseType: Store
TextScriptImporter:
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Resources/LineBreaking Leading Characters.txt
================================================
﻿([｛〔〈《「『【〘〖〝‘“｟«$—…‥〳〴〵\［（{£¥"々〇＄￥￦ #

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Resources/LineBreaking Leading Characters.txt.meta
================================================
fileFormatVersion: 2
guid: d82c1b31c7e74239bff1220585707d2b
timeCreated: 1425440388
licenseType: Store
TextScriptImporter:
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Resources/Sprite Assets.meta
================================================
fileFormatVersion: 2
guid: 512a49d95c0c4332bdd98131869c23c9
folderAsset: yes
timeCreated: 1441876896
licenseType: Pro
DefaultImporter:
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Resources/Style Sheets.meta
================================================
fileFormatVersion: 2
guid: 4aecb92fff08436c8303b10eab8da368
folderAsset: yes
timeCreated: 1441876950
licenseType: Pro
DefaultImporter:
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Resources/TMP Settings.asset.meta
================================================
fileFormatVersion: 2
guid: 3f5b5dff67a942289a9defa416b206f3
timeCreated: 1436653997
licenseType: Pro
NativeFormatImporter:
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Resources/Fonts & Materials/LiberationSans SDF - Drop Shadow.mat.meta
================================================
fileFormatVersion: 2
guid: e73a58f6e2794ae7b1b7e50b7fb811b0
timeCreated: 1484172806
licenseType: Pro
NativeFormatImporter:
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Resources/Fonts & Materials/LiberationSans SDF - Fallback.asset.meta
================================================
fileFormatVersion: 2
guid: 2e498d1c8094910479dc3e1b768306a4
timeCreated: 1484171803
licenseType: Pro
NativeFormatImporter:
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Resources/Fonts & Materials/LiberationSans SDF - Outline.mat.meta
================================================
fileFormatVersion: 2
guid: 79459efec17a4d00a321bdcc27bbc385
timeCreated: 1484172856
licenseType: Pro
NativeFormatImporter:
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Resources/Fonts & Materials/LiberationSans SDF.asset.meta
================================================
fileFormatVersion: 2
guid: 8f586378b4e144a9851e7b34d9b748ee
timeCreated: 1484171803
licenseType: Pro
NativeFormatImporter:
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Resources/Sprite Assets/EmojiOne.asset.meta
================================================
fileFormatVersion: 2
guid: c41005c129ba4d66911b75229fd70b45
timeCreated: 1480316912
licenseType: Pro
NativeFormatImporter:
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Resources/Style Sheets/Default Style Sheet.asset.meta
================================================
fileFormatVersion: 2
guid: f952c082cb03451daed3ee968ac6c63e
timeCreated: 1432805430
licenseType: Store
NativeFormatImporter:
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Shaders/TMP_Bitmap-Custom-Atlas.shader.meta
================================================
fileFormatVersion: 2
guid: 48bb5f55d8670e349b6e614913f9d910
ShaderImporter:
  externalObjects: {}
  defaultTextures: []
  nonModifiableTextures: []
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Shaders/TMP_Bitmap-Mobile.shader.meta
================================================
fileFormatVersion: 2
guid: 1e3b057af24249748ff873be7fafee47
ShaderImporter:
  externalObjects: {}
  defaultTextures: []
  nonModifiableTextures: []
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Shaders/TMP_Bitmap.shader.meta
================================================
fileFormatVersion: 2
guid: 128e987d567d4e2c824d754223b3f3b0
ShaderImporter:
  externalObjects: {}
  defaultTextures: []
  nonModifiableTextures: []
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Shaders/TMP_SDF Overlay.shader.meta
================================================
fileFormatVersion: 2
guid: dd89cf5b9246416f84610a006f916af7
ShaderImporter:
  externalObjects: {}
  defaultTextures: []
  nonModifiableTextures: []
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Shaders/TMP_SDF SSD.shader.meta
================================================
fileFormatVersion: 2
guid: 14eb328de4b8eb245bb7cea29e4ac00b
ShaderImporter:
  externalObjects: {}
  defaultTextures: []
  nonModifiableTextures: []
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Shaders/TMP_SDF-Mobile Masking.shader.meta
================================================
fileFormatVersion: 2
guid: bc1ede39bf3643ee8e493720e4259791
ShaderImporter:
  externalObjects: {}
  defaultTextures: []
  nonModifiableTextures: []
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Shaders/TMP_SDF-Mobile Overlay.shader.meta
================================================
fileFormatVersion: 2
guid: a02a7d8c237544f1962732b55a9aebf1
ShaderImporter:
  externalObjects: {}
  defaultTextures: []
  nonModifiableTextures: []
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Shaders/TMP_SDF-Mobile SSD.shader.meta
================================================
fileFormatVersion: 2
guid: c8d12adcee749c344b8117cf7c7eb912
ShaderImporter:
  externalObjects: {}
  defaultTextures: []
  nonModifiableTextures: []
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Shaders/TMP_SDF-Mobile.shader.meta
================================================
fileFormatVersion: 2
guid: fe393ace9b354375a9cb14cdbbc28be4
ShaderImporter:
  externalObjects: {}
  defaultTextures: []
  nonModifiableTextures: []
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Shaders/TMP_SDF-Surface-Mobile.shader.meta
================================================
fileFormatVersion: 2
guid: 85187c2149c549c5b33f0cdb02836b17
ShaderImporter:
  externalObjects: {}
  defaultTextures: []
  nonModifiableTextures: []
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Shaders/TMP_SDF-Surface.shader.meta
================================================
fileFormatVersion: 2
guid: f7ada0af4f174f0694ca6a487b8f543d
ShaderImporter:
  externalObjects: {}
  defaultTextures: []
  nonModifiableTextures: []
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Shaders/TMP_SDF.shader.meta
================================================
fileFormatVersion: 2
guid: 68e6db2ebdc24f95958faec2be5558d6
ShaderImporter:
  externalObjects: {}
  defaultTextures: []
  nonModifiableTextures: []
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Shaders/TMP_Sprite.shader.meta
================================================
fileFormatVersion: 2
guid: cf81c85f95fe47e1a27f6ae460cf182c
ShaderImporter:
  externalObjects: {}
  defaultTextures: []
  nonModifiableTextures: []
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Shaders/TMPro.cginc.meta
================================================
fileFormatVersion: 2
guid: 407bc68d299748449bbf7f48ee690f8d
ShaderImporter:
  externalObjects: {}
  defaultTextures: []
  nonModifiableTextures: []
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Shaders/TMPro_Mobile.cginc.meta
================================================
fileFormatVersion: 2
guid: c334973cef89a9840b0b0c507e0377ab
ShaderImporter:
  externalObjects: {}
  defaultTextures: []
  nonModifiableTextures: []
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Shaders/TMPro_Properties.cginc.meta
================================================
fileFormatVersion: 2
guid: 3997e2241185407d80309a82f9148466
ShaderImporter:
  externalObjects: {}
  defaultTextures: []
  nonModifiableTextures: []
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Shaders/TMPro_Surface.cginc.meta
================================================
fileFormatVersion: 2
guid: d930090c0cd643c7b55f19a38538c162
ShaderImporter:
  externalObjects: {}
  defaultTextures: []
  nonModifiableTextures: []
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Sprites/EmojiOne Attribution.txt
================================================
This sample of beautiful emojis are provided by EmojiOne https://www.emojione.com/

Please visit their website to view the complete set of their emojis and review their licensing terms.

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Sprites/EmojiOne Attribution.txt.meta
================================================
fileFormatVersion: 2
guid: 381dcb09d5029d14897e55f98031fca5
TextScriptImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/TextMesh Pro/Sprites/EmojiOne.json.meta
================================================
fileFormatVersion: 2
guid: 8f05276190cf498a8153f6cbe761d4e6
timeCreated: 1480316860
licenseType: Pro
TextScriptImporter:
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/WebGLTemplates/SolanaWebGlTemplate.meta
================================================
fileFormatVersion: 2
guid: 86f6cc1756ed048dcb9afe692f656aa7
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/WebGLTemplates/xNFT.meta
================================================
fileFormatVersion: 2
guid: d52c7f847803d4c23b47396e4f445d5f
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData.meta
================================================
fileFormatVersion: 2
guid: b0b7961cfaa634963a1bda16a71e13d0
folderAsset: yes
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/WebGLTemplates/SolanaWebGlTemplate/index.html.meta
================================================
fileFormatVersion: 2
guid: f66a63a411d4745af95fd5e3746ae712
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/WebGLTemplates/SolanaWebGlTemplate/thumbnail.png.meta
================================================
fileFormatVersion: 2
guid: 379f39b01ffff46ec87ef8e07903ae33
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/favicon.ico.meta
================================================
fileFormatVersion: 2
guid: abdfcc06f739a4799b93b04280b6ab3e
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/fullscreen-button.png.meta
================================================
fileFormatVersion: 2
guid: 38b10a7e2dd4541148008e8d4d1b2a26
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/progress-bar-empty-dark.png.meta
================================================
fileFormatVersion: 2
guid: 98f2c524f304b4f4398a11b844df981d
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/progress-bar-empty-light.png.meta
================================================
fileFormatVersion: 2
guid: 2c82f7b79c42541c18f45689bcf0a968
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/progress-bar-full-dark.png.meta
================================================
fileFormatVersion: 2
guid: a3639e01a00fa40cf940504c9b1df71e
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/progress-bar-full-light.png.meta
================================================
fileFormatVersion: 2
guid: 9af76d225c9f442568802f71bbb474ea
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/style.css.meta
================================================
fileFormatVersion: 2
guid: ed7cd6ee995dd44bab8d5176189c53f4
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/unity-logo-dark.png.meta
================================================
fileFormatVersion: 2
guid: 97b96993a142f46efa2c9b72ef509c53
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/unity-logo-light.png.meta
================================================
fileFormatVersion: 2
guid: 04dd34ecadec142fd8275541850d2551
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/webgl-logo.png.meta
================================================
fileFormatVersion: 2
guid: 0010688ddafe24168a3f097099ab2891
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/WebGLTemplates/xNFT/index.html.meta
================================================
fileFormatVersion: 2
guid: a9569a4b7dfbf41a3b6cbfa70eadf665
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/Assets/WebGLTemplates/xNFT/thumbnail.png.meta
================================================
fileFormatVersion: 2
guid: ed0446e2bc30b42629d9dc78f55c4c5b
DefaultImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/ProjectSettings/AudioManager.asset
================================================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!11 &1
AudioManager:
  m_ObjectHideFlags: 0
  serializedVersion: 2
  m_Volume: 1
  Rolloff Scale: 1
  Doppler Factor: 1
  Default Speaker Mode: 2
  m_SampleRate: 0
  m_DSPBufferSize: 1024
  m_VirtualVoiceCount: 512
  m_RealVoiceCount: 32
  m_SpatializerPlugin: 
  m_AmbisonicDecoderPlugin: 
  m_DisableAudio: 0
  m_VirtualizeEffects: 1
  m_RequestedDSPBufferSize: 1024


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/ProjectSettings/ClusterInputManager.asset
================================================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!236 &1
ClusterInputManager:
  m_ObjectHideFlags: 0
  m_Inputs: []


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/ProjectSettings/EditorBuildSettings.asset
================================================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!1045 &1
EditorBuildSettings:
  m_ObjectHideFlags: 0
  serializedVersion: 2
  m_Scenes:
  - enabled: 1
    path: Assets/Game/Scenes/LoginScene.unity
    guid: 325f7fb08642c46a6a1d7f860111bd4b
  - enabled: 1
    path: Assets/Game/Scenes/GameScene.unity
    guid: a3de581c39b3447939f31966c9c9d8fb
  m_configObjects: {}


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/ProjectSettings/EditorSettings.asset
================================================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!159 &1
EditorSettings:
  m_ObjectHideFlags: 0
  serializedVersion: 11
  m_ExternalVersionControlSupport: Visible Meta Files
  m_SerializationMode: 2
  m_LineEndingsForNewScripts: 0
  m_DefaultBehaviorMode: 0
  m_PrefabRegularEnvironment: {fileID: 0}
  m_PrefabUIEnvironment: {fileID: 0}
  m_SpritePackerMode: 0
  m_SpritePackerPaddingPower: 1
  m_EtcTextureCompressorBehavior: 1
  m_EtcTextureFastCompressor: 1
  m_EtcTextureNormalCompressor: 2
  m_EtcTextureBestCompressor: 4
  m_ProjectGenerationIncludedExtensions: txt;xml;fnt;cd;asmdef;rsp;asmref
  m_ProjectGenerationRootNamespace: 
  m_CollabEditorSettings:
    inProgressEnabled: 1
  m_EnableTextureStreamingInEditMode: 1
  m_EnableTextureStreamingInPlayMode: 1
  m_AsyncShaderCompilation: 1
  m_EnterPlayModeOptionsEnabled: 0
  m_EnterPlayModeOptions: 3
  m_ShowLightmapResolutionOverlay: 1
  m_UseLegacyProbeSampleCount: 0
  m_SerializeInlineMappingsOnOneLine: 1


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/ProjectSettings/PackageManagerSettings.asset
================================================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &1
MonoBehaviour:
  m_ObjectHideFlags: 61
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 13964, guid: 0000000000000000e000000000000000, type: 0}
  m_Name: 
  m_EditorClassIdentifier: 
  m_EnablePreReleasePackages: 0
  m_EnablePackageDependencies: 0
  m_AdvancedSettingsExpanded: 1
  m_ScopedRegistriesSettingsExpanded: 1
  m_SeeAllPackageVersions: 0
  oneTimeWarningShown: 0
  m_Registries:
  - m_Id: main
    m_Name: 
    m_Url: https://packages.unity.com
    m_Scopes: []
    m_IsDefault: 1
    m_Capabilities: 7
  m_UserSelectedRegistryName: 
  m_UserAddingNewScopedRegistry: 0
  m_RegistryInfoDraft:
    m_Modified: 0
    m_ErrorMessage: 
    m_UserModificationsInstanceId: -830
    m_OriginalInstanceId: -832
  m_LoadAssets: 0


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/ProjectSettings/PresetManager.asset
================================================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!1386491679 &1
PresetManager:
  m_ObjectHideFlags: 0
  serializedVersion: 2
  m_DefaultPresets: {}


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/ProjectSettings/ProjectVersion.txt
================================================
m_EditorVersion: 2021.3.32f1
m_EditorVersionWithRevision: 2021.3.32f1 (3b9dae9532f5)


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/ProjectSettings/TagManager.asset
================================================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!78 &1
TagManager:
  serializedVersion: 2
  tags: []
  layers:
  - Default
  - TransparentFX
  - Ignore Raycast
  - 
  - Water
  - UI
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  - 
  m_SortingLayers:
  - name: Default
    uniqueID: 0
    locked: 0


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/ProjectSettings/TimeManager.asset
================================================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!5 &1
TimeManager:
  m_ObjectHideFlags: 0
  Fixed Timestep: 0.02
  Maximum Allowed Timestep: 0.33333334
  m_TimeScale: 1
  Maximum Particle Timestep: 0.03


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/ProjectSettings/UnityConnectSettings.asset
================================================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!310 &1
UnityConnectSettings:
  m_ObjectHideFlags: 0
  serializedVersion: 1
  m_Enabled: 0
  m_TestMode: 0
  m_EventOldUrl: https://api.uca.cloud.unity3d.com/v1/events
  m_EventUrl: https://cdp.cloud.unity3d.com/v1/events
  m_ConfigUrl: https://config.uca.cloud.unity3d.com
  m_DashboardUrl: https://dashboard.unity3d.com
  m_TestInitMode: 0
  CrashReportingSettings:
    m_EventUrl: https://perf-events.cloud.unity3d.com
    m_Enabled: 0
    m_LogBufferSize: 10
    m_CaptureEditorExceptions: 1
  UnityPurchasingSettings:
    m_Enabled: 0
    m_TestMode: 0
  UnityAnalyticsSettings:
    m_Enabled: 0
    m_TestMode: 0
    m_InitializeOnStartup: 1
  UnityAdsSettings:
    m_Enabled: 0
    m_InitializeOnStartup: 1
    m_TestMode: 0
    m_IosGameId: 
    m_AndroidGameId: 
    m_GameIds: {}
    m_GameId: 
  PerformanceReportingSettings:
    m_Enabled: 0


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/ProjectSettings/VFXManager.asset
================================================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!937362698 &1
VFXManager:
  m_ObjectHideFlags: 0
  m_IndirectShader: {fileID: 0}
  m_CopyBufferShader: {fileID: 0}
  m_SortShader: {fileID: 0}
  m_StripUpdateShader: {fileID: 0}
  m_RenderPipeSettingsPath: 
  m_FixedTimeStep: 0.016666668
  m_MaxDeltaTime: 0.05


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/ProjectSettings/VersionControlSettings.asset
================================================
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!890905787 &1
VersionControlSettings:
  m_ObjectHideFlags: 0
  m_Mode: Visible Meta Files
  m_CollabEditorSettings:
    inProgressEnabled: 1


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/ProjectSettings/XRSettings.asset
================================================
{
    "m_SettingKeys": [
        "VR Device Disabled",
        "VR Device User Alert"
    ],
    "m_SettingValues": [
        "False",
        "False"
    ]
}

================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/ProjectSettings/Packages/com.unity.testtools.codecoverage/Settings.json
================================================
{
  "m_Name": "Settings",
  "m_Path": "ProjectSettings/Packages/com.unity.testtools.codecoverage/Settings.json",
  "m_Dictionary": {
    "m_DictionaryValues": []
  }
}


================================================
File: tokens/token-2022/nft-meta-data-pointer/anchor-example/unity/ExtensionNft/UserSettings/Search.settings
================================================
{}

================================================
File: tokens/token-2022/non-transferable/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
non_transferable = "8Bz4wpHaUckiC169Rg5ZfaBHFemp5S8RwTSDTKzhJ9W"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: tokens/token-2022/non-transferable/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/token-2022/non-transferable/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/spl-token": "^0.4.6"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-2022/non-transferable/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/non-transferable/anchor/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: tokens/token-2022/non-transferable/anchor/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/token-2022/non-transferable/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/token-2022/non-transferable/anchor/programs/non-transferable/Cargo.toml
================================================
[package]
name = "non-transferable"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "non_transferable"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = "0.30.0"
anchor-spl = "0.30.0"


================================================
File: tokens/token-2022/non-transferable/anchor/programs/non-transferable/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/token-2022/non-transferable/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml
solana program deploy ./program/target/deploy/program.so


================================================
File: tokens/token-2022/non-transferable/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/hello_solana_program.so"
  },
  "dependencies": {
    "@metaplex-foundation/mpl-token-metadata": "^2.5.2",
    "@solana/spl-token": "^0.3.7",
    "@solana/web3.js": "^1.73.0",
    "borsh": "^0.7.0",
    "buffer": "^6.0.3",
    "fs": "^0.0.1-security"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.4.1",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-2022/non-transferable/native/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/non-transferable/native/program/Cargo.toml
================================================
[package]
name = "token-2022-non-transferable-program"
version = "0.1.0"
edition = "2021"

[dependencies]
borsh = "0.9.3"
borsh-derive = "0.9.1"
solana-program = "=1.18.17"
spl-associated-token-account = { version="2.0.0", features = [ "no-entrypoint" ] }
spl-token-2022 = {version = "0.7.0", features = [ "no-entrypoint" ] }

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: tokens/token-2022/permanent-delegate/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
permanent_delegate = "A9rxKS84ZoJVyeTfQbCEfxME2vvAM4uwSMjkmhR5XWb1"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: tokens/token-2022/permanent-delegate/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/token-2022/permanent-delegate/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/spl-token": "^0.4.6"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-2022/permanent-delegate/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/permanent-delegate/anchor/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: tokens/token-2022/permanent-delegate/anchor/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/token-2022/permanent-delegate/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/token-2022/permanent-delegate/anchor/programs/permanent-delegate/Cargo.toml
================================================
[package]
name = "permanent-delegate"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "permanent_delegate"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = "0.30.0"
anchor-spl = "0.30.0"



================================================
File: tokens/token-2022/permanent-delegate/anchor/programs/permanent-delegate/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/token-2022/transfer-fee/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
transfer_fee = "4evptdGtALCNT8uTxJhbWBRZpBE8w5oNtmgfSyfQu7td"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: tokens/token-2022/transfer-fee/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/token-2022/transfer-fee/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/spl-token": "^0.4.6"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-2022/transfer-fee/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/transfer-fee/anchor/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: tokens/token-2022/transfer-fee/anchor/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/token-2022/transfer-fee/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/token-2022/transfer-fee/anchor/programs/transfer-fee/Cargo.toml
================================================
[package]
name = "transfer-fee"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "transfer_fee"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = { version = "0.30.0", features = ["init-if-needed"] }
anchor-spl = "0.30.0"

================================================
File: tokens/token-2022/transfer-fee/anchor/programs/transfer-fee/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/token-2022/transfer-fee/anchor/programs/transfer-fee/src/lib.rs
================================================
use anchor_lang::prelude::*;

mod instructions;
use instructions::*;

declare_id!("4evptdGtALCNT8uTxJhbWBRZpBE8w5oNtmgfSyfQu7td");

#[program]
pub mod transfer_fee {
    use super::*;

    pub fn initialize(
        ctx: Context<Initialize>,
        transfer_fee_basis_points: u16,
        maximum_fee: u64,
    ) -> Result<()> {
        process_initialize(ctx, transfer_fee_basis_points, maximum_fee)
    }

    pub fn transfer(ctx: Context<Transfer>, amount: u64) -> Result<()> {
        process_transfer(ctx, amount)
    }

    pub fn harvest<'info>(ctx: Context<'_, '_, 'info, 'info, Harvest<'info>>) -> Result<()> {
        process_harvest(ctx)
    }

    pub fn withdraw(ctx: Context<Withdraw>) -> Result<()> {
        process_withdraw(ctx)
    }

    pub fn update_fee(
        ctx: Context<UpdateFee>,
        transfer_fee_basis_points: u16,
        maximum_fee: u64,
    ) -> Result<()> {
        process_update_fee(ctx, transfer_fee_basis_points, maximum_fee)
    }
}


================================================
File: tokens/token-2022/transfer-fee/anchor/programs/transfer-fee/src/instructions/mod.rs
================================================
pub mod transfer;
pub use transfer::*;
pub mod initialize;
pub use initialize::*;
pub mod harvest;
pub use harvest::*;
pub mod withdraw;
pub use withdraw::*;
pub mod update_fee;
pub use update_fee::*;


================================================
File: tokens/token-2022/transfer-fee/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml
solana program deploy ./program/target/deploy/program.so


================================================
File: tokens/token-2022/transfer-fee/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/hello_solana_program.so"
  },
  "dependencies": {
    "@metaplex-foundation/mpl-token-metadata": "^2.5.2",
    "@solana/spl-token": "^0.3.7",
    "@solana/web3.js": "^1.73.0",
    "borsh": "^0.7.0",
    "buffer": "^6.0.3",
    "fs": "^0.0.1-security"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.4.1",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-2022/transfer-fee/native/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/transfer-fee/native/program/Cargo.toml
================================================
[package]
name = "token-2022-transfer-fees-program"
version = "0.1.0"
edition = "2021"

[dependencies]
borsh = "0.10.3"
borsh-derive = "0.9.1"
solana-program = "=1.18.17"
spl-associated-token-account = { version="2.0.0", features = [ "no-entrypoint" ] }
spl-token-2022 = {version = "0.7.0", features = [ "no-entrypoint" ] }

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: tokens/token-2022/transfer-hook/account-data-as-seed/anchor/Anchor.toml
================================================

[programs.localnet]
transfer_hook = "1qahDxKHeCLZhbBU2NyMU6vQCQmEUmdeSEBrG5drffK"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 100000 tests/**/*.ts"


================================================
File: tokens/token-2022/transfer-hook/account-data-as-seed/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/token-2022/transfer-hook/account-data-as-seed/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.1",
    "@solana/spl-token": "^0.4.0",
    "@solana/web3.js": "^1.92.3"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai-as-promised": "^7.1.8",
    "chai-as-promised": "^7.1.2",
    "@types/chai": "^4.3.0",
    "chai": "^4.3.4",
    "@types/mocha": "^9.0.0",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-2022/transfer-hook/account-data-as-seed/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/transfer-hook/account-data-as-seed/anchor/.gitignore
================================================

.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: tokens/token-2022/transfer-hook/account-data-as-seed/anchor/.prettierignore
================================================

.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/token-2022/transfer-hook/account-data-as-seed/anchor/.prettierrc
================================================
{
  "tabWidth": 2,
  "useTabs": false,
  "singleQuote": false,
  "printWidth": 80,
  "trailingComma": "all",
  "arrowParens": "avoid",
  "endOfLine": "auto",
  "proseWrap": "always"
}


================================================
File: tokens/token-2022/transfer-hook/account-data-as-seed/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/token-2022/transfer-hook/account-data-as-seed/anchor/programs/transfer-hook/Cargo.toml
================================================
[toolchain]
anchor_version = "0.30.1"
solana_version = "2.0.3"

[package]
name = "transfer-hook"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "transfer_hook"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = { version = "0.30.1", features = ["interface-instructions"] }
anchor-spl = "0.30.1"
solana-program = "=1.18.21"
spl-tlv-account-resolution = "0.6.0"
spl-transfer-hook-interface = "0.6.0"


================================================
File: tokens/token-2022/transfer-hook/account-data-as-seed/anchor/programs/transfer-hook/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/token-2022/transfer-hook/counter/anchor/Anchor.toml
================================================

[programs.localnet]
transfer_hook = "1qahDxKHeCLZhbBU2NyMU6vQCQmEUmdeSEBrG5drffK"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 100000 tests/**/*.ts"


================================================
File: tokens/token-2022/transfer-hook/counter/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/token-2022/transfer-hook/counter/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/spl-token": "^0.4.0",
    "@solana/web3.js": "^1.92.3"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai-as-promised": "^7.1.8",
    "chai-as-promised": "^7.1.2",
    "@types/chai": "^4.3.0",
    "chai": "^4.3.4",
    "@types/mocha": "^9.0.0",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-2022/transfer-hook/counter/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/transfer-hook/counter/anchor/.gitignore
================================================

.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: tokens/token-2022/transfer-hook/counter/anchor/.prettierignore
================================================

.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/token-2022/transfer-hook/counter/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/token-2022/transfer-hook/counter/anchor/programs/transfer-hook/Cargo.toml
================================================
[toolchain]
anchor_version = "0.30.0"
solana_version = "1.18.15"

[package]
name = "transfer-hook"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "transfer_hook"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = { version = "0.30.0", features = ["interface-instructions"] }
anchor-spl = "0.30.0"
solana-program = "1.18.16"
spl-tlv-account-resolution = "0.6.3"
spl-transfer-hook-interface = "0.6.3"


================================================
File: tokens/token-2022/transfer-hook/counter/anchor/programs/transfer-hook/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/token-2022/transfer-hook/hello-world/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
transfer_hook = "jY5DfVksJT8Le38LCaQhz5USeiGu4rUeVSS8QRAMoba"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"

[test]
startup_wait = 5000
shutdown_wait = 2000
upgradeable = false

[test.validator]
bind_address = "0.0.0.0"
url = "https://api.devnet.solana.com"
ledger = ".anchor/test-ledger"
rpc_port = 8899

[[test.validator.clone]]
address = "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"


================================================
File: tokens/token-2022/transfer-hook/hello-world/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/token-2022/transfer-hook/hello-world/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/spl-token": "^0.4.0",
    "@solana/web3.js": "^1.92.3"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai-as-promised": "^7.1.8",
    "chai-as-promised": "^7.1.2",
    "@types/chai": "^4.3.0",
    "chai": "^4.3.4",
    "@types/mocha": "^9.0.0",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-2022/transfer-hook/hello-world/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/transfer-hook/hello-world/anchor/.gitignore
================================================

.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: tokens/token-2022/transfer-hook/hello-world/anchor/.prettierignore
================================================

.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/token-2022/transfer-hook/hello-world/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/token-2022/transfer-hook/hello-world/anchor/programs/transfer-hook/Cargo.toml
================================================
[package]
name = "transfer-hook"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "transfer_hook"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = { version = "0.30.0", features = ["interface-instructions"] }
anchor-spl = "0.30.0"
spl-tlv-account-resolution = "0.6.3"
spl-transfer-hook-interface = "0.6.3"


================================================
File: tokens/token-2022/transfer-hook/hello-world/anchor/programs/transfer-hook/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/token-2022/transfer-hook/transfer-cost/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
transfer_hook = "FjcHckEgXcBhFmSGai3FRpDLiT6hbpV893n8iTxVd81g"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: tokens/token-2022/transfer-hook/transfer-cost/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/token-2022/transfer-hook/transfer-cost/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/spl-token": "^0.4.0"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-2022/transfer-hook/transfer-cost/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/transfer-hook/transfer-cost/anchor/.gitignore
================================================

.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: tokens/token-2022/transfer-hook/transfer-cost/anchor/.prettierignore
================================================

.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/token-2022/transfer-hook/transfer-cost/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/token-2022/transfer-hook/transfer-cost/anchor/programs/transfer-hook/Cargo.toml
================================================
[package]
name = "transfer-hook"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "transfer_hook"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = {version = "0.30.0", features = ["interface-instructions"]}
anchor-spl = "0.30.0"
spl-tlv-account-resolution = "0.6.3"
spl-transfer-hook-interface = "0.6.3"


================================================
File: tokens/token-2022/transfer-hook/transfer-cost/anchor/programs/transfer-hook/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/token-2022/transfer-hook/transfer-switch/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
transfer_switch = "FjcHckEgXcBhFmSGai3FRpDLiT6hbpV893n8iTxVd81g"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: tokens/token-2022/transfer-hook/transfer-switch/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/token-2022/transfer-hook/transfer-switch/anchor/package.json
================================================
{
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.1",
    "@solana/spl-token": "^0.4.0"
  },
  "devDependencies": {
    "anchor-bankrun": "^0.5.0",
    "solana-bankrun": "^0.4.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "10.0.9",
    "chai": "^4.3.4",
    "mocha": "^10.8.2",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^5"
  }
}


================================================
File: tokens/token-2022/transfer-hook/transfer-switch/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/transfer-hook/transfer-switch/anchor/.gitignore
================================================

.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: tokens/token-2022/transfer-hook/transfer-switch/anchor/programs/transfer-switch/Cargo.toml
================================================
[package]
name = "transfer-switch"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "transfer_switch"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = {version="0.30.1", features=["init-if-needed", "interface-instructions"]}
anchor-spl = {version="0.30.1"}
spl-tlv-account-resolution = "0.6.3"
spl-transfer-hook-interface = "0.6.3"

================================================
File: tokens/token-2022/transfer-hook/transfer-switch/anchor/programs/transfer-switch/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/token-2022/transfer-hook/transfer-switch/anchor/programs/transfer-switch/src/error.rs
================================================
use anchor_lang::prelude::*;

#[error_code]
pub enum TransferError {
    #[msg("The token is not currently transferring")]
    IsNotCurrentlyTransferring,

    #[msg("The transfer switch is currently not on")]
    SwitchNotOn,
}


================================================
File: tokens/token-2022/transfer-hook/transfer-switch/anchor/programs/transfer-switch/src/lib.rs
================================================
mod error;
mod instructions;
mod state;

use anchor_lang::prelude::*;
use instructions::*;

declare_id!("FjcHckEgXcBhFmSGai3FRpDLiT6hbpV893n8iTxVd81g");

#[program]
pub mod transfer_switch {
    use super::*;

    pub fn configure_admin(ctx: Context<ConfigureAdmin>) -> Result<()> {
        ctx.accounts.is_admin()?;
        ctx.accounts.configure_admin()
    }

    #[interface(spl_transfer_hook_interface::initialize_extra_account_meta_list)]
    pub fn initialize_extra_account_metas_list(
        ctx: Context<InitializeExtraAccountMetas>,
    ) -> Result<()> {
        ctx.accounts.initialize_extra_account_metas_list(ctx.bumps)
    }

    pub fn switch(ctx: Context<Switch>, on: bool) -> Result<()> {
        ctx.accounts.switch(on)
    }

    #[interface(spl_transfer_hook_interface::execute)]
    pub fn transfer_hook(ctx: Context<TransferHook>) -> Result<()> {
        ctx.accounts.assert_is_transferring()?;
        ctx.accounts.assert_switch_is_on()
    }
}


================================================
File: tokens/token-2022/transfer-hook/transfer-switch/anchor/programs/transfer-switch/src/state.rs
================================================
use anchor_lang::prelude::*;

#[account]
#[derive(InitSpace)]
pub struct TransferSwitch {
    pub wallet: Pubkey,
    pub on: bool,
}

#[account]
#[derive(InitSpace)]
pub struct AdminConfig {
    pub is_initialised: bool,
    pub admin: Pubkey,
}


================================================
File: tokens/token-2022/transfer-hook/transfer-switch/anchor/programs/transfer-switch/src/instructions/mod.rs
================================================
pub mod configure_admin;
pub mod initialise_extra_account_metas_list;
pub mod switch;
pub mod transfer_hook;

pub use configure_admin::*;
pub use initialise_extra_account_metas_list::*;
pub use switch::*;
pub use transfer_hook::*;


================================================
File: tokens/token-2022/transfer-hook/whitelist/anchor/Anchor.toml
================================================
[toolchain]

[features]
seeds = false
skip-lint = false

[programs.localnet]
transfer_hook = "DrWbQtYJGtsoRwzKqAbHKHKsCJJfpysudF39GBVFSxub"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"

[test.validator]
url = "https://api.devnet.solana.com"

[[test.validator.clone]]
address = "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"


================================================
File: tokens/token-2022/transfer-hook/whitelist/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/token-2022/transfer-hook/whitelist/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/spl-token": "^0.4.0"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai-as-promised": "^7.1.8",
    "chai-as-promised": "^7.1.2",
    "@types/chai": "^4.3.0",
    "chai": "^4.3.4",
    "@types/mocha": "^9.0.0",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-2022/transfer-hook/whitelist/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-2022/transfer-hook/whitelist/anchor/.gitignore
================================================

.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: tokens/token-2022/transfer-hook/whitelist/anchor/.prettierignore
================================================

.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/token-2022/transfer-hook/whitelist/anchor/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/token-2022/transfer-hook/whitelist/anchor/programs/transfer-hook/Cargo.toml
================================================
[package]
name = "transfer-hook"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "transfer_hook"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = {version = "0.30.0", features = ["interface-instructions", "init-if-needed"]}
anchor-spl = "0.30.0"
spl-tlv-account-resolution = "0.6.3"
spl-transfer-hook-interface = "0.6.3"


================================================
File: tokens/token-2022/transfer-hook/whitelist/anchor/programs/transfer-hook/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/token-fundraiser/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
fundraiser = "Eoiuq1dXvHxh6dLx3wh9gj8kSAUpga11krTrbfF5XYsC"

[programs.devnet]
fundraiser = "Eoiuq1dXvHxh6dLx3wh9gj8kSAUpga11krTrbfF5XYsC"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: tokens/token-fundraiser/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/token-fundraiser/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/spl-token": "^0.4.6"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "anchor-bankrun": "^0.4.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-fundraiser/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-fundraiser/anchor/programs/fundraiser/Cargo.toml
================================================
[package]
name = "fundraiser"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "fundraiser"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = { version = "0.30.1", features = ["init-if-needed"] }
anchor-spl = "0.30.1"


================================================
File: tokens/token-fundraiser/anchor/programs/fundraiser/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/token-fundraiser/anchor/programs/fundraiser/src/constants.rs
================================================
pub const ANCHOR_DISCRIMINATOR: usize = 8;
pub const MIN_AMOUNT_TO_RAISE: u64 = 3;
pub const SECONDS_TO_DAYS: i64 = 86400;
pub const MAX_CONTRIBUTION_PERCENTAGE: u64 = 10;
pub const PERCENTAGE_SCALER: u64 = 100;

================================================
File: tokens/token-fundraiser/anchor/programs/fundraiser/src/error.rs
================================================
use anchor_lang::error_code;

#[error_code]
pub enum FundraiserError {
    #[msg("The amount to raise has not been met")]
    TargetNotMet,
    #[msg("The amount to raise has been achieved")]
    TargetMet,
    #[msg("The contribution is too big")]
    ContributionTooBig,
    #[msg("The contribution is too small")]
    ContributionTooSmall,
    #[msg("The maximum amount to contribute has been reached")]
    MaximumContributionsReached,
    #[msg("The fundraiser has not ended yet")]
    FundraiserNotEnded,
    #[msg("The fundraiser has ended")]
    FundraiserEnded,
    #[msg("Invalid total amount. i should be bigger than 3")]
    InvalidAmount
}

================================================
File: tokens/token-fundraiser/anchor/programs/fundraiser/src/lib.rs
================================================
use anchor_lang::prelude::*;

declare_id!("Eoiuq1dXvHxh6dLx3wh9gj8kSAUpga11krTrbfF5XYsC");

mod state;
mod instructions;
mod error;
mod constants;

use instructions::*;
use error::*;
pub use constants::*;

#[program]
pub mod fundraiser {
    use super::*;

    pub fn initialize(ctx: Context<Initialize>, amount: u64, duration: u16) -> Result<()> {

        ctx.accounts.initialize(amount, duration, &ctx.bumps)?;

        Ok(())
    }

    pub fn contribute(ctx: Context<Contribute>, amount: u64) -> Result<()> {

        ctx.accounts.contribute(amount)?;

        Ok(())
    }

    pub fn check_contributions(ctx: Context<CheckContributions>) -> Result<()> {

        ctx.accounts.check_contributions()?;

        Ok(())
    }

    pub fn refund(ctx: Context<Refund>) -> Result<()> {

        ctx.accounts.refund()?;

        Ok(())
    }
}


================================================
File: tokens/token-fundraiser/anchor/programs/fundraiser/src/instructions/mod.rs
================================================
pub mod initialize;
pub mod contribute;
pub mod checker;
pub mod refund;

pub use initialize::*;
pub use contribute::*;
pub use checker::*;
pub use refund::*;

================================================
File: tokens/token-fundraiser/anchor/programs/fundraiser/src/state/contributor.rs
================================================
use anchor_lang::prelude::*;

#[account]
#[derive(InitSpace)]
pub struct Contributor {
    pub amount: u64,
}

================================================
File: tokens/token-fundraiser/anchor/programs/fundraiser/src/state/fundraiser.rs
================================================
use anchor_lang::prelude::*;

#[account]
#[derive(InitSpace)]
pub struct Fundraiser {
    pub maker: Pubkey,
    pub mint_to_raise: Pubkey,
    pub amount_to_raise: u64,
    pub current_amount: u64,
    pub time_started: i64,
    pub duration: u16,
    pub bump: u8,
}

================================================
File: tokens/token-fundraiser/anchor/programs/fundraiser/src/state/mod.rs
================================================
pub mod fundraiser;
pub mod contributor;

pub use fundraiser::*;
pub use contributor::*;

================================================
File: tokens/token-swap/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.devnet]
swap_example = "AsGVFxWqEn8icRBFQApxJe68x3r9zvfSbmiEzYFATGYn"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"

[test]
startup_wait = 5000
shutdown_wait = 2000


================================================
File: tokens/token-swap/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1



================================================
File: tokens/token-swap/anchor/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/spl-token": "^0.3.8"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-swap/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-swap/anchor/programs/token-swap/Cargo.toml
================================================
[package]
name = "swap_example"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "swap_example"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = { version = "0.30.0", features = ["init-if-needed"] }
anchor-spl = { version = "0.30.0", features = ["metadata"] }
fixed = "1.27.0"


================================================
File: tokens/token-swap/anchor/programs/token-swap/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/token-swap/anchor/programs/token-swap/src/constants.rs
================================================
use anchor_lang::prelude::*;

#[constant]
pub const MINIMUM_LIQUIDITY: u64 = 100;

#[constant]
pub const AUTHORITY_SEED: &[u8] = b"authority";

#[constant]
pub const LIQUIDITY_SEED: &[u8] = b"liquidity";


================================================
File: tokens/token-swap/anchor/programs/token-swap/src/errors.rs
================================================
use anchor_lang::prelude::*;

#[error_code]
pub enum TutorialError {
    #[msg("Invalid fee value")]
    InvalidFee,

    #[msg("Invalid mint for the pool")]
    InvalidMint,

    #[msg("Depositing too little liquidity")]
    DepositTooSmall,

    #[msg("Output is below the minimum expected")]
    OutputTooSmall,

    #[msg("Invariant does not hold")]
    InvariantViolated,
}


================================================
File: tokens/token-swap/anchor/programs/token-swap/src/state.rs
================================================
use anchor_lang::prelude::*;

#[account]
#[derive(Default)]
pub struct Amm {
    /// The primary key of the AMM
    pub id: Pubkey,

    /// Account that has admin authority over the AMM
    pub admin: Pubkey,

    /// The LP fee taken on each trade, in basis points
    pub fee: u16,
}

impl Amm {
    pub const LEN: usize = 8 + 32 + 32 + 2;
}

#[account]
#[derive(Default)]
pub struct Pool {
    /// Primary key of the AMM
    pub amm: Pubkey,

    /// Mint of token A
    pub mint_a: Pubkey,

    /// Mint of token B
    pub mint_b: Pubkey,
}

impl Pool {
    pub const LEN: usize = 8 + 32 + 32 + 32;
}


================================================
File: tokens/token-swap/anchor/programs/token-swap/src/instructions/create_amm.rs
================================================
use anchor_lang::prelude::*;

use crate::{errors::*, state::Amm};

pub fn create_amm(ctx: Context<CreateAmm>, id: Pubkey, fee: u16) -> Result<()> {
    let amm = &mut ctx.accounts.amm;
    amm.id = id;
    amm.admin = ctx.accounts.admin.key();
    amm.fee = fee;

    Ok(())
}

#[derive(Accounts)]
#[instruction(id: Pubkey, fee: u16)]
pub struct CreateAmm<'info> {
    #[account(
        init,
        payer = payer,
        space = Amm::LEN,
        seeds = [
            id.as_ref()
        ],
        bump,
        constraint = fee < 10000 @ TutorialError::InvalidFee,
    )]
    pub amm: Account<'info, Amm>,

    /// The admin of the AMM
    /// CHECK: Read only, delegatable creation
    pub admin: AccountInfo<'info>,

    /// The account paying for all rents
    #[account(mut)]
    pub payer: Signer<'info>,

    /// Solana ecosystem accounts
    pub system_program: Program<'info, System>,
}


================================================
File: tokens/token-swap/anchor/programs/token-swap/src/instructions/mod.rs
================================================
mod create_amm;
mod create_pool;
mod deposit_liquidity;
mod swap_exact_tokens_for_tokens;
mod withdraw_liquidity;

pub use create_amm::*;
pub use create_pool::*;
pub use deposit_liquidity::*;
pub use swap_exact_tokens_for_tokens::*;
pub use withdraw_liquidity::*;


================================================
File: tokens/token-swap/poseidon/token_swap/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
token_swap = "3dDaJxmPcmQVfSx9rX4xHyP5rJvkwdKcNujcX2z9KB9h"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm run ts-mocha -p ./tsconfig.json -t 1000000 tests/create-pool.ts"


================================================
File: tokens/token-swap/poseidon/token_swap/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/token-swap/poseidon/token_swap/package.json
================================================
{
  "license": "ISC",
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check",
    "ts-mocha": "ts-mocha --project tsconfig.json"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.1",
    "@solana/spl-token": "^0.4.9",
    "anchor-bankrun": "^0.5.0",
    "solana-bankrun": "^0.4.0"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/token-swap/poseidon/token_swap/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-swap/poseidon/token_swap/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: tokens/token-swap/poseidon/token_swap/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/token-swap/poseidon/token_swap/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/token-swap/poseidon/token_swap/programs/token_swap/Cargo.toml
================================================
[package]
name = "token_swap"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "token_swap"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build","anchor-spl/idl-build"]

[dependencies]
anchor-lang = { version = "0.30.1", features = ["init-if-needed"]}
anchor-spl = "0.30.1"

================================================
File: tokens/token-swap/poseidon/token_swap/programs/token_swap/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/token-swap/poseidon/token_swap/ts-programs/package.json
================================================
{
  "name": "ts-programs",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@solanaturbine/poseidon": "^0.0.4"
  }
}


================================================
File: tokens/token-swap/poseidon/token_swap/ts-programs/pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@solanaturbine/poseidon':
        specifier: ^0.0.4
        version: 0.0.4

packages:

  '@solanaturbine/poseidon@0.0.4':
    resolution: {integrity: sha512-VNQRtqobzBT+Wkh8fdPb0WVt12aIlgRJuGDxptclkphXi5w+VHUfMPcBshWSFPZg1nheXYgJABwvffYcyirw1g==}

snapshots:

  '@solanaturbine/poseidon@0.0.4': {}


================================================
File: tokens/token-swap/steel/Cargo.toml
================================================
[workspace]
resolver = "2"
members = ["api", "program"]

[workspace.package]
version = "0.1.0"
edition = "2021"
license = "Apache-2.0"
homepage = ""
documentation = ""
repository = ""
readme = "./README.md"
keywords = ["solana"]

[workspace.dependencies]
token-swap-api = { path = "./api", version = "0.1.0" }
bytemuck = "1.14"
num_enum = "0.7"
solana-program = "1.18"
steel = { version = "2.0", features = ["spl"] }
thiserror = "1.0"
spl-token = "^4"
spl-math = { version = "0.3.0", features = ["no-entrypoint"] }


================================================
File: tokens/token-swap/steel/package.json
================================================
{
  "name": "token-swap",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/*.test.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/account_data_program.so"
  },
  "keywords": [],
  "author": "Leo Pham <hongthaipro@gmail.com>",
  "license": "ISC",
  "dependencies": {
    "@solana/spl-token": "^0.4.9",
    "@solana/web3.js": "^1.95.4",
    "bs58": "^6.0.0"
  },
  "devDependencies": {
    "@types/chai": "^4.3.7",
    "@types/mocha": "^10.0.9",
    "@types/node": "^22.7.9",
    "borsh": "^2.0.0",
    "chai": "^4.3.7",
    "mocha": "^10.7.3",
    "solana-bankrun": "^0.4.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^5.6.3"
  }
}


================================================
File: tokens/token-swap/steel/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai", "node"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/token-swap/steel/api/Cargo.toml
================================================
[package]
name = "token-swap-api"
description = "API for interacting with the TokenSwap program"
version.workspace = true
edition.workspace = true
license.workspace = true
homepage.workspace = true
documentation.workspace = true
repository.workspace = true
readme.workspace = true
keywords.workspace = true

[dependencies]
bytemuck.workspace = true
num_enum.workspace = true
solana-program.workspace = true
steel.workspace = true
thiserror.workspace = true
spl-token.workspace = true
spl-math.workspace = true


================================================
File: tokens/token-swap/steel/api/src/consts.rs
================================================
use solana_program::pubkey;
use steel::Pubkey;

pub const MINIMUM_LIQUIDITY: u64 = 100;

pub const AUTHORITY_SEED: &[u8] = b"authority";

pub const LIQUIDITY_SEED: &[u8] = b"liquidity";

pub const ASSOCIATED_TOKEN_PROGRAM_ID: Pubkey =
    pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL");


================================================
File: tokens/token-swap/steel/api/src/error.rs
================================================
use steel::*;

#[derive(Debug, Error, Clone, Copy, PartialEq, Eq, IntoPrimitive)]
#[repr(u32)]
pub enum TokenSwapError {
    #[error("Invalid fee, must be between 0 and 10000")]
    InvalidFee = 0,
    #[error("Account is not existed")]
    AccountIsNotExisted = 1,
    #[error("Invalid account")]
    InvalidAccount = 2,
    #[error("Deposit too small")]
    DepositTooSmall = 3,
    #[error("Withdrawal too small")]
    OutputTooSmall,
    #[error("Invariant violated")]
    InvariantViolated,
}

error!(TokenSwapError);


================================================
File: tokens/token-swap/steel/api/src/lib.rs
================================================
pub mod consts;
pub mod error;
pub mod instruction;
pub mod sdk;
pub mod state;

pub mod prelude {
    pub use crate::consts::*;
    pub use crate::error::*;
    pub use crate::instruction::*;
    pub use crate::sdk::*;
    pub use crate::state::*; 
}

use steel::*;

// TODO Set program id
declare_id!("z7msBPQHDJjTvdQRoEcKyENgXDhSRYeHieN1ZMTqo35"); 


================================================
File: tokens/token-swap/steel/api/src/state/amm.rs
================================================
use steel::*;

use super::TokenSwapAccount;

/// Fetch PDA of the amm account.
pub fn amm_pda(id: Pubkey) -> (Pubkey, u8) {
    Pubkey::find_program_address(&[id.as_ref()], &crate::id())
}

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq, Pod, Zeroable)]
pub struct Amm {
    /// The primary key of the AMM
    pub id: Pubkey,

    /// Account that has admin authority over the AMM
    pub admin: Pubkey,

    /// The LP fee taken on each trade, in basis points
    pub fee: [u8; 2],
}

account!(TokenSwapAccount, Amm);


================================================
File: tokens/token-swap/steel/api/src/state/mod.rs
================================================
mod amm;
mod pool;
pub use amm::*;
pub use pool::*;

use steel::*;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, IntoPrimitive, TryFromPrimitive)]
pub enum TokenSwapAccount {
    Amm = 0,
    Pool = 1,
}


================================================
File: tokens/token-swap/steel/program/Cargo.toml
================================================
[package]
name = "token-swap-program"
description = ""
version.workspace = true
edition.workspace = true
license.workspace = true
homepage.workspace = true
documentation.workspace = true
repository.workspace = true
readme.workspace = true
keywords.workspace = true

[lib]
crate-type = ["cdylib", "lib"]

[dependencies]
token-swap-api.workspace = true
solana-program.workspace = true
steel.workspace = true
spl-token.workspace = true
spl-math.workspace = true

[dev-dependencies]
bs64 = "0.1.2"
rand = "0.8.5"
solana-program-test = "1.18"
solana-sdk = "1.18"
tokio = { version = "1.35", features = ["full"] }


================================================
File: tokens/token-swap/steel/program/src/lib.rs
================================================
mod create_amm;
mod create_pool;
mod deposit_liquidity;
mod swap;
mod withdraw_liquidity;
use create_amm::*;
use create_pool::*;
use deposit_liquidity::*;
use swap::*;
use withdraw_liquidity::*;

use steel::*;
use token_swap_api::prelude::*;

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    data: &[u8],
) -> ProgramResult {
    let (ix, data) = parse_instruction(&token_swap_api::ID, program_id, data)?;

    match ix {
        TokenSwapInstruction::CreateAmm => process_create_amm(accounts, data)?,
        TokenSwapInstruction::CreatePool => process_create_pool(accounts, data)?,
        TokenSwapInstruction::DepositLiquidity => process_deposit_liquidity(accounts, data)?,
        TokenSwapInstruction::WithdrawLiquidity => process_withdraw_liquidity(accounts, data)?,
        TokenSwapInstruction::Swap => process_swap(accounts, data)?,
    }

    Ok(())
}

entrypoint!(process_instruction);


================================================
File: tokens/transfer-tokens/README.md
================================================
# Transfer Tokens

Just like with minting, transfers of SPL Tokens are conducted between Associated Token Accounts.   
   
You can use the `transfer()` function provided by the SPL Token Program to conduct a transfer of any SPL Token with the appropriate permissions.   
   
Check out [SPL Token Minter](../spl-token-minter) or [NFT Minter](../nft-minter) to learn more about Associated Token Accounts.

================================================
File: tokens/transfer-tokens/anchor/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
transfer_tokens = "nHi9DdNjuupjQ3c8AJU9sChB5gLbZvTLsJQouY4hU67"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"

[test]
startup_wait = 5000
shutdown_wait = 2000
upgradeable = false

[test.validator]
bind_address = "0.0.0.0"
url = "https://api.mainnet-beta.solana.com"
ledger = ".anchor/test-ledger"
rpc_port = 8899

[[test.validator.clone]]
address = "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"


================================================
File: tokens/transfer-tokens/anchor/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/transfer-tokens/anchor/package.json
================================================
{
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/spl-token": "^0.3.8"
  },
  "scripts": {
    "postinstall": "zx prepare.mjs"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "anchor-bankrun": "^0.4.0",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5",
    "zx": "^8.1.4"
  }
}


================================================
File: tokens/transfer-tokens/anchor/prepare.mjs
================================================
#!/usr/bin/env zx

import { mkdir, rm } from 'node:fs/promises';
import { join } from 'node:path';
import { $ } from 'zx';

const programs = [
  {
    id: 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
    name: 'token_metadata.so',
  },
];

const outputDir = 'tests/fixtures';
const overwrite = true;

try {
  for (const program of programs) {
    const { id, name } = program;
    const outputFile = join(outputDir, name);
    await $`solana config set -um`;

    try {
      await mkdir(outputDir, { recursive: true });
      if (overwrite) await rm(outputFile, { force: true });
      await $`solana program dump ${id} ${outputFile}`;
      console.log(`Program ${id} dumped to ${outputFile}`);
    } catch (error) {
      console.error(`Error dumping ${id}: ${error.message}`);
    }
  }
} catch (error) {
  console.error(`Error preparing programs: ${error.message}`);
}


================================================
File: tokens/transfer-tokens/anchor/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/transfer-tokens/anchor/programs/transfer-tokens/Cargo.toml
================================================
[package]
name = "transfer-tokens"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "transfer_tokens"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = { version = "0.30.0", features = ["init-if-needed"] }
anchor-spl = { version = "0.30.0", features = ["metadata"] }


================================================
File: tokens/transfer-tokens/anchor/programs/transfer-tokens/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/transfer-tokens/anchor/programs/transfer-tokens/src/lib.rs
================================================
#![allow(clippy::result_large_err)]

use anchor_lang::prelude::*;

pub mod instructions;

use instructions::*;

declare_id!("nHi9DdNjuupjQ3c8AJU9sChB5gLbZvTLsJQouY4hU67");

#[program]
pub mod transfer_tokens {
    use super::*;

    pub fn create_token(
        ctx: Context<CreateToken>,
        token_title: String,
        token_symbol: String,
        token_uri: String,
    ) -> Result<()> {
        create::create_token(ctx, token_title, token_symbol, token_uri)
    }

    pub fn mint_token(ctx: Context<MintToken>, amount: u64) -> Result<()> {
        mint::mint_token(ctx, amount)
    }

    pub fn transfer_tokens(ctx: Context<TransferTokens>, amount: u64) -> Result<()> {
        transfer::transfer_tokens(ctx, amount)
    }
}


================================================
File: tokens/transfer-tokens/anchor/programs/transfer-tokens/src/instructions/mod.rs
================================================
pub mod create;
pub mod mint;
pub mod transfer;

pub use create::*;
pub use mint::*;
pub use transfer::*;


================================================
File: tokens/transfer-tokens/native/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml
solana program deploy ./program/target/deploy/program.so


================================================
File: tokens/transfer-tokens/native/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/test.ts"
  },
  "dependencies": {
    "@metaplex-foundation/mpl-token-metadata": "^2.5.2",
    "@solana/spl-token": "^0.3.7",
    "@solana/web3.js": "^1.73.0",
    "borsh": "^0.7.0",
    "buffer": "^6.0.3",
    "fs": "^0.0.1-security"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/transfer-tokens/native/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/transfer-tokens/native/program/Cargo.toml
================================================
[package]
name = "transfer-tokens-program"
version = "0.1.0"
edition = "2021"

[dependencies]
borsh = "0.9.3"
borsh-derive = "0.9.1"
solana-program = "1.16.10"
spl-token = { version="4.0.0", features = [ "no-entrypoint" ] }
spl-associated-token-account = { version = "2.0.0", features = [ "no-entrypoint" ] }
mpl-token-metadata = { version="1.11", features = ["no-entrypoint"] }

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: tokens/transfer-tokens/native/program/src/lib.rs
================================================
use solana_program::{
    account_info::AccountInfo, entrypoint, entrypoint::ProgramResult, pubkey::Pubkey,
};

pub mod instructions;
pub mod processor;

entrypoint!(process_instruction);

fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    processor::process_instruction(program_id, accounts, instruction_data)
}


================================================
File: tokens/transfer-tokens/native/program/src/instructions/mod.rs
================================================
pub mod create;
pub mod mint_nft;
pub mod mint_spl;
pub mod transfer;

pub use create::*;
pub use mint_nft::*;
pub use mint_spl::*;
pub use transfer::*;


================================================
File: tokens/transfer-tokens/poseidon/transfer-tokens-program/Anchor.toml
================================================
[toolchain]

[features]
resolution = true
skip-lint = false

[programs.localnet]
transfer_tokens_program = "CSqtsYXnt2UfXttszwG6rGFFY7EedJ5kmn4xEyas4LeE"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "pnpm ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"


================================================
File: tokens/transfer-tokens/poseidon/transfer-tokens-program/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/transfer-tokens/poseidon/transfer-tokens-program/package.json
================================================
{
  "license": "ISC",
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.30.0",
    "@solana/spl-token": "^0.4.9",
    "@solana/web3.js": "^1.95.2"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "anchor-bankrun": "^0.4.0",
    "chai": "^4.4.1",
    "mocha": "^9.0.3",
    "prettier": "^2.6.2",
    "solana-bankrun": "^0.3.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5"
  }
}


================================================
File: tokens/transfer-tokens/poseidon/transfer-tokens-program/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/transfer-tokens/poseidon/transfer-tokens-program/.gitignore
================================================
.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger
.yarn


================================================
File: tokens/transfer-tokens/poseidon/transfer-tokens-program/.prettierignore
================================================
.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/transfer-tokens/poseidon/transfer-tokens-program/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/transfer-tokens/poseidon/transfer-tokens-program/programs/transfer-tokens-program/Cargo.toml
================================================
[package]
name = "transfer-tokens-program"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "transfer_tokens_program"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = { version = "0.30.1", features = ["init-if-needed"] }
anchor-spl = "0.30.1"



================================================
File: tokens/transfer-tokens/poseidon/transfer-tokens-program/programs/transfer-tokens-program/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/transfer-tokens/poseidon/transfer-tokens-program/ts-programs/package.json
================================================
{
  "name": "ts-programs",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@solanaturbine/poseidon": "^0.0.10"
  }
}


================================================
File: tokens/transfer-tokens/poseidon/transfer-tokens-program/ts-programs/pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@solanaturbine/poseidon':
        specifier: ^0.0.10
        version: 0.0.10

packages:

  '@solanaturbine/poseidon@0.0.10':
    resolution: {integrity: sha512-4C8niySNUp+qArCrtZ9WZszfwntynSzJUq8go7QSh63xUv2s5ACHfwLs73ajaH95NGmEcgpl6raENv0u0GeCqg==}

snapshots:

  '@solanaturbine/poseidon@0.0.10': {}


================================================
File: tokens/transfer-tokens/seahorse/README.md
================================================
# seahorse

This project was created by Seahorse 0.2.7.

To get started, just add your code to **programs_py/seahorse.py** and run `seahorse build`.


================================================
File: tokens/transfer-tokens/seahorse/Anchor.toml
================================================
[features]
seeds = true
skip-lint = false
[programs.localnet]
seahorse = "5KCV219sxBAZMfXWP5EZ57D6K9568krgPKGe1Lq2nkxH"

[registry]
url = "https://api.apr.dev"

[provider]
cluster = "Localnet"
wallet = "~/.config/solana/id.json"

[scripts]
test = "python3 tests/test.py"


================================================
File: tokens/transfer-tokens/seahorse/Cargo.toml
================================================
[workspace]
members = [
    "programs/*"
]
resolver = "2"

[profile.release]
overflow-checks = true
lto = "fat"
codegen-units = 1
[profile.release.build-override]
opt-level = 3
incremental = false
codegen-units = 1


================================================
File: tokens/transfer-tokens/seahorse/package.json
================================================
{
  "scripts": {
    "lint:fix": "prettier */*.js \"*/**/*{.js,.ts}\" -w",
    "lint": "prettier */*.js \"*/**/*{.js,.ts}\" --check"
  },
  "dependencies": {
    "@coral-xyz/anchor": "^0.27.0"
  },
  "devDependencies": {
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "typescript": "^4.3.5",
    "prettier": "^2.6.2"
  }
}


================================================
File: tokens/transfer-tokens/seahorse/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/transfer-tokens/seahorse/.gitignore
================================================

.anchor
.DS_Store
target
**/*.rs.bk
node_modules
test-ledger


================================================
File: tokens/transfer-tokens/seahorse/.prettierignore
================================================

.anchor
.DS_Store
target
node_modules
dist
build
test-ledger


================================================
File: tokens/transfer-tokens/seahorse/migrations/deploy.ts
================================================
// Migrations are an early feature. Currently, they're nothing more than this
// single deploy script that's invoked from the CLI, injecting a provider
// configured from the workspace's Anchor.toml.

const anchor = require('@coral-xyz/anchor');

module.exports = async (provider) => {
  // Configure client to use the provider.
  anchor.setProvider(provider);

  // Add your deploy script here.
};


================================================
File: tokens/transfer-tokens/seahorse/programs/seahorse/Cargo.toml
================================================
[package]
name = "seahorse"
version = "0.1.0"
description = "Created with Anchor"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]
name = "seahorse"

[features]
default = []
cpi = ["no-entrypoint"]
no-entrypoint = []
no-idl = []
no-log-ix-name = []
idl-build = ["anchor-lang/idl-build", "anchor-spl/idl-build"]

[dependencies]
anchor-lang = "0.27.0"
anchor-spl = "0.27.0"
pyth-sdk-solana = { version = "0.7.1", optional = true }


================================================
File: tokens/transfer-tokens/seahorse/programs/seahorse/Xargo.toml
================================================
[target.bpfel-unknown-unknown.dependencies.std]
features = []


================================================
File: tokens/transfer-tokens/seahorse/programs/seahorse/src/dot/mod.rs
================================================
pub mod program;


================================================
File: tokens/transfer-tokens/seahorse/tests/pyproject.toml
================================================
[tool.pyright]
reportMissingModuleSource = false

================================================
File: tokens/transfer-tokens/steel/README.md
================================================
# Steel

**Steel** is a ...
        
## API
- [`Consts`](api/src/consts.rs) – Program constants.
- [`Error`](api/src/error.rs) – Custom program errors.
- [`Event`](api/src/event.rs) – Custom program events.
- [`Instruction`](api/src/instruction.rs) – Declared instructions.

## Instructions
- [`Hello`](program/src/hello.rs) – Hello ...

## State
- [`User`](api/src/state/user.rs) – User ...

## Tests

To run the test suit, use the Solana toolchain:
```
cargo test-sbf         
```


================================================
File: tokens/transfer-tokens/steel/Cargo.toml
================================================
[workspace]
resolver = "2"
members = ["api", "program"]

[workspace.package]
version = "0.1.0"
edition = "2021"
license = "Apache-2.0"
homepage = ""
documentation = ""
repository = ""
readme = "./README.md"
keywords = ["solana"]

[workspace.dependencies]
transfer-tokens-api = { path = "./api", version = "0.1.0" }
bytemuck = "1.14"
num_enum = "0.7"
solana-program = "1.18"
steel = { version = "2.0", features = ["spl"] }
thiserror = "1.0"
spl-token = "^4"
mpl-token-metadata = { version = "4.1.2" }
spl-associated-token-account = { version = "^2.3", features = [
    "no-entrypoint",
] }


================================================
File: tokens/transfer-tokens/steel/cicd.sh
================================================
#!/bin/bash

# This script is for quick building & deploying of the program.
# It also serves as a reference for the commands used for building & deploying Solana programs.
# Run this bad boy with "bash cicd.sh" or "./cicd.sh"

cargo build-sbf --manifest-path=./program/Cargo.toml
solana program deploy ./program/target/deploy/program.so


================================================
File: tokens/transfer-tokens/steel/package.json
================================================
{
  "scripts": {
    "test": "pnpm ts-mocha -p ./tsconfig.json -t 1000000 ./tests/tests.ts",
    "build-and-test": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./tests/fixtures && pnpm test",
    "build": "cargo build-sbf --manifest-path=./program/Cargo.toml --sbf-out-dir=./program/target/so",
    "deploy": "solana program deploy ./program/target/so/transfer_tokens_program.so",
    "postinstall": "zx prepare.mjs"
  },
  "dependencies": {
    "@metaplex-foundation/mpl-token-metadata": "^2.5.2",
    "@solana/spl-token": "^0.3.7",
    "@solana/web3.js": "^1.73.0",
    "borsh": "^0.7.0",
    "buffer": "^6.0.3",
    "fs": "^0.0.1-security"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/chai": "^4.3.1",
    "@types/mocha": "^9.1.1",
    "chai": "^4.3.4",
    "mocha": "^9.0.3",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.3.5",
    "solana-bankrun": "^0.4.0",
    "zx": "^8.1.4"
  }
}


================================================
File: tokens/transfer-tokens/steel/prepare.mjs
================================================
#!/usr/bin/env zx

import { mkdir, rm } from 'node:fs/promises';
import { join } from 'node:path';
import { $ } from 'zx';

const programs = [
  {
    id: 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
    name: 'token_metadata.so',
  },
];

const outputDir = 'tests/fixtures';
const overwrite = true;

try {
  for (const program of programs) {
    const { id, name } = program;
    const outputFile = join(outputDir, name);
    await $`solana config set -um`;

    try {
      await mkdir(outputDir, { recursive: true });
      if (overwrite) await rm(outputFile, { force: true });
      await $`solana program dump ${id} ${outputFile}`;
      console.log(`Program ${id} dumped to ${outputFile}`);
    } catch (error) {
      console.error(`Error dumping ${id}: ${error.message}`);
    }
  }
} catch (error) {
  console.error(`Error preparing programs: ${error.message}`);
}


================================================
File: tokens/transfer-tokens/steel/tsconfig.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tokens/transfer-tokens/steel/.gitignore
================================================
target
test-ledger


================================================
File: tokens/transfer-tokens/steel/api/Cargo.toml
================================================
[package]
name = "transfer-tokens-api"
version = "0.1.0"
edition = "2021"

[dependencies]
bytemuck.workspace = true
num_enum.workspace = true
solana-program.workspace = true
steel.workspace = true
thiserror.workspace = true
spl-token.workspace = true
mpl-token-metadata.workspace = true
spl-associated-token-account.workspace = true


================================================
File: tokens/transfer-tokens/steel/api/src/consts.rs
================================================
/// The seed of the metadata account PDA.
pub const METADATA: &[u8] = b"metadata";


================================================
File: tokens/transfer-tokens/steel/api/src/instruction.rs
================================================
use std::str;
use steel::*;

#[repr(u8)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, TryFromPrimitive)]
pub enum SteelInstruction {
    Create = 0,
    Mint = 1,
    Transfer = 2,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct Create {
    pub token_name: [u8; 32],
    pub token_symbol: [u8; 8],
    pub token_uri: [u8; 64],
    pub token_decimals: u8,
}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct Mint {
    pub quantity: [u8; 8],
}

#[repr(C)]
#[derive(Clone, Copy, Debug, Pod, Zeroable)]
pub struct Transfer {
    pub quantity: [u8; 8],
}

instruction!(SteelInstruction, Create);
instruction!(SteelInstruction, Mint);
instruction!(SteelInstruction, Transfer);


================================================
File: tokens/transfer-tokens/steel/api/src/lib.rs
================================================
pub mod consts;
pub mod instruction;
pub mod sdk;
pub mod utils;

pub mod prelude {
    pub use crate::consts::*;
    pub use crate::instruction::*;
    pub use crate::sdk::*;
    pub use crate::utils::*;
}

use steel::*;

// TODO Set program id
declare_id!("z7msBPQHDJjTvdQRoEcKyENgXDhSRYeHieN1ZMTqo35");


================================================
File: tokens/transfer-tokens/steel/api/src/utils.rs
================================================
pub fn str_to_bytes<const N: usize>(str: &str) -> [u8; N] {
    let mut str_bytes = [0u8; N];
    let copy_len = str.len().min(N);
    str_bytes[..copy_len].copy_from_slice(&str.as_bytes()[..copy_len]);
    str_bytes
}


================================================
File: tokens/transfer-tokens/steel/program/Cargo.toml
================================================
[package]
name = "transfer-tokens-program"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "lib"]

[dependencies]
transfer-tokens-api.workspace = true
solana-program.workspace = true
steel.workspace = true
spl-token.workspace = true
mpl-token-metadata.workspace = true
spl-associated-token-account.workspace = true


[dev-dependencies]
base64 = "0.21"
rand = "0.8.5"
solana-program-test = "1.18"
solana-sdk = "1.18"
tokio = { version = "1.35", features = ["full"] }


================================================
File: tokens/transfer-tokens/steel/program/src/lib.rs
================================================
mod create;
mod mint;
mod transfer;

use create::*;
use mint::*;
use transfer::*;

use steel::*;
use transfer_tokens_api::prelude::*;

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    data: &[u8],
) -> ProgramResult {
    let (ix, data) = parse_instruction(&transfer_tokens_api::ID, program_id, data)?;

    match ix {
        SteelInstruction::Mint => process_mint(accounts, data)?,
        SteelInstruction::Create => process_create(accounts, data)?,
        SteelInstruction::Transfer => process_transfer(accounts, data)?,
    }

    Ok(())
}

entrypoint!(process_instruction);


================================================
File: tokens/.assets/nft.json
================================================
{
  "name": "Homer NFT",
  "symbol": "HOMR",
  "description": "An NFT of Homer Simpson",
  "image": "https://static.onecms.io/wp-content/uploads/sites/6/2018/08/simp_homersingle08_f_hires2-2000.jpg"
}


================================================
File: tokens/.assets/spl-token.json
================================================
{
  "name": "Solana Gold",
  "symbol": "GOLDSOL",
  "description": "A gold Solana SPL token :)",
  "image": "https://w7.pngwing.com/pngs/153/594/png-transparent-solana-coin-sign-icon-shiny-golden-symmetric-geometrical-design.png"
}


================================================
File: tools/clockwork/README.md
================================================
Clockwork is an automation infrastructure for Solana. It allows you to schedule transactions and build automated, event driven programs.

Here is a link to the Clockwork Program Examples repository: [Clockwork](https://github.com/clockwork-xyz/clockwork)


================================================
File: tools/shank-and-solita/native/package.json
================================================
{
  "scripts": {
    "test": "ts-mocha -p ./tests/tsconfig.test.json -t 1000000 ./tests/test.ts"
  },
  "devDependencies": {
    "@metaplex-foundation/solita": "^0.19.3",
    "@types/chai": "^4.3.4",
    "@types/mocha": "^10.0.1",
    "chai": "^4.3.7",
    "mocha": "^10.2.0",
    "ts-mocha": "^10.0.0",
    "typescript": "^4.9.4"
  }
}


================================================
File: tools/shank-and-solita/native/.solitarc.js
================================================
const path = require('node:path');
const programDir = path.join(__dirname, 'program');
const idlDir = path.join(programDir, 'idl');
const sdkDir = path.join(__dirname, 'tests', 'generated');
const binaryInstallDir = path.join(__dirname, '.crates');

module.exports = {
  idlGenerator: 'shank',
  programName: 'car_rental_service',
  idlDir,
  sdkDir,
  binaryInstallDir,
  programDir,
};


================================================
File: tools/shank-and-solita/native/program/Cargo.toml
================================================
[package]
name = "car-rental-service"
version = "0.1.0"
edition = "2021"

[dependencies]
borsh = "0.9.3"
borsh-derive = "0.9.3"
shank = "0.0.12"
solana-program = "1.14.13"

[lib]
crate-type = ["cdylib", "lib"]


================================================
File: tools/shank-and-solita/native/program/src/lib.rs
================================================
mod instructions;
mod state;

use {
    borsh::BorshDeserialize,
    solana_program::{
        account_info::AccountInfo, 
        declare_id,
        entrypoint, 
        entrypoint::ProgramResult, 
        pubkey::Pubkey,
    },
};
use crate::instructions::*;

declare_id!("8avNGHVXDwsELJaWMSoUZ44CirQd4zyU9Ez4ZmP4jNjZ");
entrypoint!(process_instruction);

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {

    let instruction = CarRentalServiceInstruction::try_from_slice(instruction_data)?;
    match instruction {
        CarRentalServiceInstruction::AddCar(car) => add_car(program_id, accounts, car),
        CarRentalServiceInstruction::BookRental(order) => book_rental(program_id, accounts, order),
        CarRentalServiceInstruction::PickUpCar => pick_up_car(program_id, accounts),
        CarRentalServiceInstruction::ReturnCar => return_car(program_id, accounts),
    }
}

================================================
File: tools/shank-and-solita/native/tests/tsconfig.test.json
================================================
{
  "compilerOptions": {
    "types": ["mocha", "chai"],
    "typeRoots": ["./node_modules/@types"],
    "lib": ["es2015"],
    "module": "commonjs",
    "target": "es6",
    "esModuleInterop": true
  }
}


================================================
File: tools/shank-and-solita/native/tests/generated/index.ts
================================================
import { PublicKey } from '@solana/web3.js';
export * from './accounts';
export * from './instructions';
export * from './types';

/**
 * Program address
 *
 * @category constants
 * @category generated
 */
export const PROGRAM_ADDRESS = '8avNGHVXDwsELJaWMSoUZ44CirQd4zyU9Ez4ZmP4jNjZ';

/**
 * Program public key
 *
 * @category constants
 * @category generated
 */
export const PROGRAM_ID = new PublicKey(PROGRAM_ADDRESS);


================================================
File: tools/shank-and-solita/native/tests/generated/accounts/index.ts
================================================
export * from './Car';
export * from './RentalOrder';

import { Car } from './Car';
import { RentalOrder } from './RentalOrder';

export const accountProviders = { Car, RentalOrder };


================================================
File: tools/shank-and-solita/native/tests/generated/instructions/index.ts
================================================
export * from './AddCar';
export * from './BookRental';
export * from './PickUpCar';
export * from './ReturnCar';


================================================
File: tools/shank-and-solita/native/tests/generated/types/AddCarArgs.ts
================================================
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
export type AddCarArgs = {
  year: number;
  make: string;
  model: string;
};

/**
 * @category userTypes
 * @category generated
 */
export const addCarArgsBeet = new beet.FixableBeetArgsStruct<AddCarArgs>(
  [
    ['year', beet.u16],
    ['make', beet.utf8String],
    ['model', beet.utf8String],
  ],
  'AddCarArgs',
);


================================================
File: tools/shank-and-solita/native/tests/generated/types/BookRentalArgs.ts
================================================
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
export type BookRentalArgs = {
  name: string;
  pickUpDate: string;
  returnDate: string;
  price: beet.bignum;
};

/**
 * @category userTypes
 * @category generated
 */
export const bookRentalArgsBeet = new beet.FixableBeetArgsStruct<BookRentalArgs>(
  [
    ['name', beet.utf8String],
    ['pickUpDate', beet.utf8String],
    ['returnDate', beet.utf8String],
    ['price', beet.u64],
  ],
  'BookRentalArgs',
);


================================================
File: tools/shank-and-solita/native/tests/generated/types/RentalOrderStatus.ts
================================================
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
/**
 * @category enums
 * @category generated
 */
export enum RentalOrderStatus {
  Created = 0,
  PickedUp = 1,
  Returned = 2,
}

/**
 * @category userTypes
 * @category generated
 */
export const rentalOrderStatusBeet = beet.fixedScalarEnum(RentalOrderStatus) as beet.FixedSizeBeet<RentalOrderStatus, RentalOrderStatus>;


================================================
File: tools/shank-and-solita/native/tests/generated/types/index.ts
================================================
export * from './AddCarArgs';
export * from './BookRentalArgs';
export * from './RentalOrderStatus';


================================================
File: tools/shank-and-solita/native/.crates/.crates.toml
================================================
[v1]
"shank-cli 0.0.12 (registry+https://github.com/rust-lang/crates.io-index)" = ["shank"]


================================================
File: tools/shank-and-solita/native/.crates/.crates2.json
================================================
{
  "installs": {
    "shank-cli 0.0.12 (registry+https://github.com/rust-lang/crates.io-index)": {
      "version_req": "0.0.12",
      "bins": ["shank"],
      "features": [],
      "all_features": false,
      "no_default_features": false,
      "profile": "release",
      "target": "aarch64-apple-darwin",
      "rustc": "rustc 1.66.1 (90743e729 2023-01-10)\nbinary: rustc\ncommit-hash: 90743e7298aca107ddaa0c202a4d3604e29bfeb6\ncommit-date: 2023-01-10\nhost: aarch64-apple-darwin\nrelease: 1.66.1\nLLVM version: 15.0.2\n"
    }
  }
}


================================================
File: .github/dependabot.yml
================================================
version: 2
updates:
  - package-ecosystem: "cargo"
    directory: "/"
    schedule:
      interval: weekly
    # ignore:
    # # these need to be updated together, so dependabot PRs
    # # are just noise. So, ignore them:
    # - dependency-name: sp-core
    # - dependency-name: sp-keyring
    # - dependency-name: sp-runtime
    # - dependency-name: sp-core-hashing
    # - dependency-name: sp-version
  - package-ecosystem: github-actions
    directory: '/'
    schedule:
      interval: weekly


================================================
File: .github/.ghaignore
================================================
# build and test error
basics/realloc/native
basics/cross-program-invocation/native

# uses generated client from shank, can't rewrite to solana-bankrun
tools/shank-and-solita/native

# can't test on localnet
tokens/pda-mint-authority/native
tokens/nft-minter/native
tokens/transfer-tokens/native
tokens/spl-token-minter/native
tokens/create-token/native

tokens/token-swap/anchor

# not building
oracles/pyth/anchor

# not building
compression/cutils/anchor
compression/cnft-vault/anchor
# builds but need to test on localhost
compression/cnft-burn/anchor

# test failing
# https://github.com/solana-developers/helpers/issues/40
tokens/escrow/anchor

# not live
tokens/token-2022/group/anchor


================================================
File: .github/workflows/biome.yml
================================================
name: Typescript Code quality

on:
  push:
    branches:
      - main
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches:
      - main
jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Biome
        uses: biomejs/setup-biome@v2
      - name: Run Biome
        run: |
          biome ci ./ --config-path biome.json


================================================
File: .husky/pre-commit
================================================
npx lint-staged


